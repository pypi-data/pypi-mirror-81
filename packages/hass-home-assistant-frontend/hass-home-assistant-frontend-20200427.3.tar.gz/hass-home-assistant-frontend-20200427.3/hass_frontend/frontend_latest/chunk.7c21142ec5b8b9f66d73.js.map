{"version":3,"sources":["webpack:///./src/common/dom/dynamic-element-directive.ts","webpack:///./src/dialogs/generic/show-dialog-box.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/panels/config/helpers/dialog-helper-detail.ts"],"names":["__webpack_require__","d","__webpack_exports__","dynamicElement","lit_html__WEBPACK_IMPORTED_MODULE_0__","directive","tag","properties","part","NodePart","Error","element","value","undefined","toUpperCase","tagName","document","createElement","Object","entries","forEach","key","setValue","showAlertDialog","showConfirmationDialog","showPromptDialog","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_0__","loadGenericDialog","Promise","all","e","then","bind","showDialogHelper","dialogParams","extra","resolve","origCancel","cancel","origConfirm","confirm","fireEvent","dialogTag","dialogImport","assign","prompt","out","confirmation","MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","[object Object]","args","super","this","F","kind","decorators","property","type","Boolean","query","_get","_getPrototypeOf","prototype","call","style","setProperty","classList","toggle","_slot","assignedNodes","length","addEventListener","haptic","forwardHaptic","html","ripple","interactionNode","_haChangeHandler","static","css","mdcFoundation","handleChange","checked","formElement","MwcDialog","createCloseHeading","hass","title","localize","_MwcDialog","_LitElement","attribute","label","placeholder","_valueChanged","disabled","errorMessage","ev","detail","bubbles","composed","LitElement","HELPERS","input_boolean","createInputBoolean","input_text","createInputText","input_number","createInputNumber","input_datetime","createInputDateTime","input_select","createInputSelect","DialogHelperDetail","async","_platform","_item","_opened","updateComplete","_error","closeDialog","classMap","button-left","item","new","_createItem","_submitting","_goBack","keys","map","platform","isLoaded","isComponentLoaded","_platformPicked","_handleEnter","domainIcon","err","message","keyCode","stopPropagation","preventDefault","currentTarget","_focusForm","_this$_form","_form","lastElementChild","focus","haStyleDialog"],"mappings":"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","file":"chunk.7c21142ec5b8b9f66d73.js","sourcesContent":["import { directive, NodePart, Part } from \"lit-html\";\n\nexport const dynamicElement = directive(\n  (tag: string, properties?: { [key: string]: any }) => (part: Part): void => {\n    if (!(part instanceof NodePart)) {\n      throw new Error(\n        \"dynamicElementDirective can only be used in content bindings\"\n      );\n    }\n\n    let element = part.value as HTMLElement | undefined;\n\n    if (\n      element !== undefined &&\n      tag.toUpperCase() === (element as HTMLElement).tagName\n    ) {\n      if (properties) {\n        Object.entries(properties).forEach(([key, value]) => {\n          element![key] = value;\n        });\n      }\n      return;\n    }\n\n    element = document.createElement(tag);\n    if (properties) {\n      Object.entries(properties).forEach(([key, value]) => {\n        element![key] = value;\n      });\n    }\n    part.setValue(element);\n  }\n);\n","import { TemplateResult } from \"lit-html\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\ninterface BaseDialogParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n}\n\nexport interface AlertDialogParams extends BaseDialogParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n}\n\nexport interface PromptDialogParams extends BaseDialogParams {\n  inputLabel?: string;\n  inputType?: string;\n  defaultValue?: string;\n  confirm?: (out?: string) => void;\n}\n\nexport interface DialogParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () =>\n  import(/* webpackChunkName: \"confirmation\" */ \"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogParams,\n  extra?: {\n    confirmation?: DialogParams[\"confirmation\"];\n    prompt?: DialogParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { confirmation: true }) as Promise<\n    boolean\n  >;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <paper-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    icon=\"hass:close\"\n    dialogAction=\"close\"\n    class=\"close_button\"\n  ></paper-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport \"../../../components/ha-dialog\";\nimport { createInputBoolean } from \"../../../data/input_boolean\";\nimport { createInputDateTime } from \"../../../data/input_datetime\";\nimport { createInputNumber } from \"../../../data/input_number\";\nimport { createInputSelect } from \"../../../data/input_select\";\nimport { createInputText } from \"../../../data/input_text\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { Helper } from \"./const\";\nimport \"./forms/ha-input_boolean-form\";\nimport \"./forms/ha-input_datetime-form\";\nimport \"./forms/ha-input_number-form\";\nimport \"./forms/ha-input_select-form\";\nimport \"./forms/ha-input_text-form\";\n\nconst HELPERS = {\n  input_boolean: createInputBoolean,\n  input_text: createInputText,\n  input_number: createInputNumber,\n  input_datetime: createInputDateTime,\n  input_select: createInputSelect,\n};\n\n@customElement(\"dialog-helper-detail\")\nexport class DialogHelperDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _item?: Helper;\n\n  @property() private _opened = false;\n\n  @property() private _platform?: string;\n\n  @property() private _error?: string;\n\n  @property() private _submitting = false;\n\n  @query(\".form\") private _form?: HTMLDivElement;\n\n  public async showDialog(): Promise<void> {\n    this._platform = undefined;\n    this._item = undefined;\n    this._opened = true;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._opened = false;\n    this._error = \"\";\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-dialog\n        .open=${this._opened}\n        @closing=${this.closeDialog}\n        class=${classMap({ \"button-left\": !this._platform })}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this._platform\n          ? this.hass.localize(\n              \"ui.panel.config.helpers.dialog.add_platform\",\n              \"platform\",\n              this.hass.localize(\n                `ui.panel.config.helpers.types.${this._platform}`\n              ) || this._platform\n            )\n          : this.hass.localize(\"ui.panel.config.helpers.dialog.add_helper\")}\n      >\n        ${this._platform\n          ? html`\n              <div class=\"form\" @value-changed=${this._valueChanged}>\n                ${this._error\n                  ? html` <div class=\"error\">${this._error}</div> `\n                  : \"\"}\n                ${dynamicElement(`ha-${this._platform}-form`, {\n                  hass: this.hass,\n                  item: this._item,\n                  new: true,\n                })}\n              </div>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=\"${this._createItem}\"\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.helpers.dialog.create\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=\"${this._goBack}\"\n                .disabled=${this._submitting}\n              >\n                Back\n              </mwc-button>\n            `\n          : html`\n              ${Object.keys(HELPERS).map((platform: string) => {\n                const isLoaded = isComponentLoaded(this.hass, platform);\n                return html`\n                  <div class=\"form\">\n                    <paper-icon-item\n                      .disabled=${!isLoaded}\n                      @click=${this._platformPicked}\n                      @keydown=${this._handleEnter}\n                      .platform=${platform}\n                      dialogInitialFocus\n                    >\n                      <ha-icon\n                        slot=\"item-icon\"\n                        .icon=${domainIcon(platform)}\n                      ></ha-icon>\n                      <span class=\"item-text\">\n                        ${this.hass.localize(\n                          `ui.panel.config.helpers.types.${platform}`\n                        ) || platform}\n                      </span>\n                    </paper-icon-item>\n                    ${!isLoaded\n                      ? html`\n                          <paper-tooltip\n                            >${this.hass.localize(\n                              \"ui.dialogs.helper_settings.platform_not_loaded\",\n                              \"platform\",\n                              platform\n                            )}</paper-tooltip\n                          >\n                        `\n                      : \"\"}\n                  </div>\n                `;\n              })}\n              <mwc-button slot=\"primaryAction\" @click=\"${this.closeDialog}\">\n                ${this.hass!.localize(\"ui.common.cancel\")}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._item = ev.detail.value;\n  }\n\n  private async _createItem(): Promise<void> {\n    if (!this._platform || !this._item) {\n      return;\n    }\n    this._submitting = true;\n    this._error = \"\";\n    try {\n      await HELPERS[this._platform](this.hass, this._item);\n      this.closeDialog();\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _handleEnter(ev: KeyboardEvent) {\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    ev.stopPropagation();\n    ev.preventDefault();\n    this._platformPicked(ev);\n  }\n\n  private _platformPicked(ev: Event): void {\n    this._platform = (ev.currentTarget! as any).platform;\n    this._focusForm();\n  }\n\n  private async _focusForm(): Promise<void> {\n    await this.updateComplete;\n    (this._form?.lastElementChild as HTMLElement).focus();\n  }\n\n  private _goBack() {\n    this._platform = undefined;\n    this._item = undefined;\n    this._error = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog.button-left {\n          --justify-action-buttons: flex-start;\n        }\n        paper-icon-item {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-helper-detail\": DialogHelperDetail;\n  }\n}\n"],"sourceRoot":""}