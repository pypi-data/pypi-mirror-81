{
  "var_def": {
    "ALLOCATABLE": {
      "doc": "Specify that an array is an allocatable array with a deferred shape."
    },
    "ASYNCHRONOUS": {
      "doc": "Specify that a variable can be used for asynchronous input and output."
    },
    "CONTIGUOUS": {
      "doc": "Specify that the target of a pointer or an assumed-sized array is contiguous."
    },
    "DIMENSION(:)": {
      "doc": "Specify that an object is an array, and defines the shape of the array."
    },
    "POINTER": {
      "doc": "Specify that an object or a procedure is a pointer (a dynamic variable)."
    },
    "TARGET": {
      "doc": "Specify that an object can become the target of a pointer."
    }
  },
  "arg": {
    "INTENT(IN)": {
      "doc": "Specify the intended use of one or more dummy arguments."
    },
    "INTENT(OUT)": {
      "doc": "Specify the intended use of one or more dummy arguments."
    },
    "INTENT(INOUT)": {
      "doc": "Specify the intended use of one or more dummy arguments."
    },
    "OPTIONAL": {
      "doc": "Allow dummy arguments to be omitted in a procedure reference."
    },
    "SAVE": {
      "doc": "Cause the values and definition of objects to be retained after execution of a RETURN or END statement in a subprogram."
    }
  },
  "type_mem": {
    "DEFERRED": {
      "doc": "Indicate that the procedure is deferred. Deferred bindings must only be specified for derived-type definitions with the ABSTRACT attribute."
    },
    "NON_OVERRIDABLE": {
      "doc": "Determine whether a binding can be overridden in an extended type."
    },
    "NOPASS": {
      "doc": "Indicate that the procedure has no passed-object dummy argument."
    },
    "PASS": {
      "doc": "Define the 'passed-object dummy argument' of the procedure.",
      "args": "arg_name"
    }
  },
  "vis": {
    "PRIVATE": { },
    "PUBLIC": { }
  },
  "param": {
    "PARAMETER": { }
  }
}
