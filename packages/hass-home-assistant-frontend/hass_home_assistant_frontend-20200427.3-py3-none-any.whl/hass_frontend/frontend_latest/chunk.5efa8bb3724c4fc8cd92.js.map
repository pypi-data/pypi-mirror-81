{"version":3,"sources":["webpack:///./src/data/weather.ts","webpack:///./src/panels/lovelace/entity-rows/hui-weather-entity-row.ts"],"names":["__webpack_require__","d","__webpack_exports__","weatherImages","weatherIcons","getWeatherUnit","getSecondaryWeatherAttribute","clear-night","cloudy","fog","lightning","lightning-rainy","partlycloudy","pouring","rainy","hail","snowy","snowy-rainy","sunny","windy","windy-variant","exceptional","hass","measure","lengthUnit","config","unit_system","length","stateObj","_stateObj$attributes$","extrema","getWeatherExtrema","value","attribute","attributes","forecast","undefined","precipitation","humidity","localize","_stateObj$attributes$2","tempLow","tempHigh","today","Date","getDate","datetime","temperature","templow","unit","customElement","_LitElement","[object Object]","args","super","_initialize","this","property","entity","Error","_config","changedProps","hasConfigOrEntityChanged","html","states","weatherRowConfig","Object","assign","icon","state","image","UNAVAILABLE_STATES","includes","computeStateDisplay","language","css","LitElement"],"mappings":"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","file":"chunk.5efa8bb3724c4fc8cd92.js","sourcesContent":["import { HomeAssistant, WeatherEntity } from \"../types\";\n\nexport const weatherImages = {\n  \"clear-night\": \"/static/images/weather/night.png\",\n  cloudy: \"/static/images/weather/cloudy.png\",\n  fog: \"/static/images/weather/cloudy.png\",\n  lightning: \"/static/images/weather/lightning.png\",\n  \"lightning-rainy\": \"/static/images/weather/lightning-rainy.png\",\n  partlycloudy: \"/static/images/weather/partly-cloudy.png\",\n  pouring: \"/static/images/weather/pouring.png\",\n  rainy: \"/static/images/weather/rainy.png\",\n  hail: \"/static/images/weather/rainy.png\",\n  snowy: \"/static/images/weather/snowy.png\",\n  \"snowy-rainy\": \"/static/images/weather/snowy.png\",\n  sunny: \"/static/images/weather/sunny.png\",\n  windy: \"/static/images/weather/windy.png\",\n  \"windy-variant\": \"/static/images/weather/windy.png\",\n};\n\nexport const weatherIcons = {\n  exceptional: \"hass:alert-circle-outline\",\n};\n\nexport const cardinalDirections = [\n  \"N\",\n  \"NNE\",\n  \"NE\",\n  \"ENE\",\n  \"E\",\n  \"ESE\",\n  \"SE\",\n  \"SSE\",\n  \"S\",\n  \"SSW\",\n  \"SW\",\n  \"WSW\",\n  \"W\",\n  \"WNW\",\n  \"NW\",\n  \"NNW\",\n  \"N\",\n];\n\nconst getWindBearingText = (degree: string): string => {\n  const degreenum = parseInt(degree, 10);\n  if (isFinite(degreenum)) {\n    // eslint-disable-next-line no-bitwise\n    return cardinalDirections[(((degreenum + 11.25) / 22.5) | 0) % 16];\n  }\n  return degree;\n};\n\nexport const getWindBearing = (bearing: string): string => {\n  if (bearing != null) {\n    return getWindBearingText(bearing);\n  }\n  return \"\";\n};\n\nexport const getWeatherUnit = (\n  hass: HomeAssistant,\n  measure: string\n): string => {\n  const lengthUnit = hass.config.unit_system.length || \"\";\n  switch (measure) {\n    case \"pressure\":\n      return lengthUnit === \"km\" ? \"hPa\" : \"inHg\";\n    case \"wind_speed\":\n      return `${lengthUnit}/h`;\n    case \"length\":\n      return lengthUnit;\n    case \"precipitation\":\n      return lengthUnit === \"km\" ? \"mm\" : \"in\";\n    case \"humidity\":\n    case \"precipitation_probability\":\n      return \"%\";\n    default:\n      return hass.config.unit_system[measure] || \"\";\n  }\n};\n\nexport const getSecondaryWeatherAttribute = (\n  hass: HomeAssistant,\n  stateObj: WeatherEntity\n): string | undefined => {\n  const extrema = getWeatherExtrema(hass, stateObj);\n\n  if (extrema) {\n    return extrema;\n  }\n\n  let value: number;\n  let attribute: string;\n\n  if (\n    stateObj.attributes.forecast?.length &&\n    stateObj.attributes.forecast[0].precipitation !== undefined &&\n    stateObj.attributes.forecast[0].precipitation !== null\n  ) {\n    value = stateObj.attributes.forecast[0].precipitation!;\n    attribute = \"precipitation\";\n  } else if (\"humidity\" in stateObj.attributes) {\n    value = stateObj.attributes.humidity!;\n    attribute = \"humidity\";\n  } else {\n    return undefined;\n  }\n\n  return `\n    ${hass!.localize(\n      `ui.card.weather.attributes.${attribute}`\n    )} ${value} ${getWeatherUnit(hass!, attribute)}\n  `;\n};\n\nconst getWeatherExtrema = (\n  hass: HomeAssistant,\n  stateObj: WeatherEntity\n): string | undefined => {\n  if (!stateObj.attributes.forecast?.length) {\n    return undefined;\n  }\n\n  let tempLow: number | undefined;\n  let tempHigh: number | undefined;\n  const today = new Date().getDate();\n\n  for (const forecast of stateObj.attributes.forecast!) {\n    if (new Date(forecast.datetime).getDate() !== today) {\n      break;\n    }\n    if (!tempHigh || forecast.temperature > tempHigh) {\n      tempHigh = forecast.temperature;\n    }\n    if (!tempLow || (forecast.templow && forecast.templow < tempLow)) {\n      tempLow = forecast.templow;\n    }\n    if (!forecast.templow && (!tempLow || forecast.temperature < tempLow)) {\n      tempLow = forecast.temperature;\n    }\n  }\n\n  if (!tempLow && !tempHigh) {\n    return undefined;\n  }\n\n  const unit = getWeatherUnit(hass!, \"temperature\");\n\n  return `\n    ${\n      tempHigh\n        ? `\n            ${tempHigh} ${unit}\n          `\n        : \"\"\n    }\n    ${tempLow && tempHigh ? \" / \" : \"\"}\n    ${\n      tempLow\n        ? `\n          ${tempLow} ${unit}\n        `\n        : \"\"\n    }\n  `;\n};\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport \"../../../components/entity/state-badge\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport {\n  getSecondaryWeatherAttribute,\n  getWeatherUnit,\n  weatherIcons,\n  weatherImages,\n} from \"../../../data/weather\";\nimport { HomeAssistant, WeatherEntity } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-weather-entity-row\")\nclass HuiWeatherEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config?.entity) {\n      throw new Error(\"Invalid Configuration: 'entity' required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const weatherRowConfig = {\n      ...this._config,\n      icon: weatherIcons[stateObj.state],\n      image: weatherImages[stateObj.state],\n    };\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${weatherRowConfig}>\n        <div class=\"attributes\">\n          <div>\n            ${UNAVAILABLE_STATES.includes(stateObj.state)\n              ? computeStateDisplay(\n                  this.hass.localize,\n                  stateObj,\n                  this.hass.language\n                )\n              : html`\n                  ${stateObj.attributes.temperature}\n                  ${getWeatherUnit(this.hass, \"temperature\")}\n                `}\n          </div>\n          <div class=\"secondary\">\n            ${getSecondaryWeatherAttribute(this.hass!, stateObj)}\n          </div>\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .attributes {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        text-align: right;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-entity-row\": HuiWeatherEntityRow;\n  }\n}\n"],"sourceRoot":""}