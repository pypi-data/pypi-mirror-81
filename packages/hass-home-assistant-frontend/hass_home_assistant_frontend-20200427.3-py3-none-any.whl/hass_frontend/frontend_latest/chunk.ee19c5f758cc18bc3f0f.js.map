{"version":3,"sources":["webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-conditional-card-editor.ts"],"names":["HaEntityPicker","_LitElement","[object Object]","args","super","_initialize","this","property","type","Boolean","attribute","Array","query","memoizeOne","_opened","hass","includeDomains","excludeDomains","entityFilter","includeDeviceClasses","states","entityIds","Object","keys","filter","eid","includes","computeDomain","sort","map","key","stateObj","entity_id","value","attributes","device_class","changedProps","has","_getStates","_comboBox","items","html","_value","allowCustomEntity","root","_owner","model","firstElementChild","innerHTML","querySelector","item","textContent","computeStateName","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","_clearValue","ev","stopPropagation","_setValue","detail","newValue","setTimeout","fireEvent","css","LitElement","customElements","define","__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","icon","conditionStruct","entity","state","state_not","cardConfigStruct","card","conditions","optional","HuiConditionalCardEditor","_decorate","customElement","F","kind","decorators","config","_config","_cardTab","_selectTab","_toggleMode","_guiModeAvailable","_cardEditorEl","_GUImode","_handleReplaceCard","lovelace","_handleCardChanged","_handleGUIModeChanged","_handleCardPicked","cond","idx","_this$hass","_changeCondition","_addCondition","parseInt","target","selected","_this$_cardEditorEl","toggleMode","GUImode","guiMode","guiModeAvailable","_setMode","push","configValue","splice","index","condition","static"],"mappings":"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","file":"chunk.ee19c5f758cc18bc3f0f.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./state-badge\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean }) private _opened = false;\n\n  @query(\"vaadin-combo-box-light\") private _comboBox!: HTMLElement;\n\n  private _getStates = memoizeOne(\n    (\n      _opened: boolean,\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const states = this._getStates(\n        this._opened,\n        this.hass,\n        this.includeDomains,\n        this.excludeDomains,\n        this.entityFilter,\n        this.includeDeviceClasses\n      );\n      (this._comboBox as any).items = states;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined\n            ? this.hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=${this.hass.localize(\n                    \"ui.components.entity.entity-picker.clear\"\n                  )}\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  @click=${this._clearValue}\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n\n          <paper-icon-button\n            aria-label=${this.hass.localize(\n              \"ui.components.entity.entity-picker.show_entities\"\n            )}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n            .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n          >\n            Toggle\n          </paper-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 0px 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-switch\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { ConditionalCardConfig } from \"../../cards/types\";\nimport { struct } from \"../../common/structs/struct\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport {\n  ConfigChangedEvent,\n  HuiCardEditor,\n} from \"../card-editor/hui-card-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport { GUIModeChangedEvent } from \"../types\";\n\nconst conditionStruct = struct({\n  entity: \"string\",\n  state: \"string?\",\n  state_not: \"string?\",\n});\nconst cardConfigStruct = struct({\n  type: \"string\",\n  card: \"any\",\n  conditions: struct.optional([conditionStruct]),\n});\n\n@customElement(\"hui-conditional-card-editor\")\nexport class HuiConditionalCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() public lovelace?: LovelaceConfig;\n\n  @property() private _config?: ConditionalCardConfig;\n\n  @property() private _GUImode = true;\n\n  @property() private _guiModeAvailable? = true;\n\n  @property() private _cardTab = false;\n\n  @query(\"hui-card-editor\") private _cardEditorEl?: HuiCardEditor;\n\n  public setConfig(config: ConditionalCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <paper-tabs\n        .selected=${this._cardTab ? \"1\" : \"0\"}\n        @iron-select=${this._selectTab}\n      >\n        <paper-tab\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.conditions\"\n          )}</paper-tab\n        >\n        <paper-tab\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.card\"\n          )}</paper-tab\n        >\n      </paper-tabs>\n      ${this._cardTab\n        ? html`\n            <div class=\"card\">\n              ${this._config.card.type !== undefined\n                ? html`\n                    <div class=\"card-options\">\n                      <mwc-button\n                        @click=${this._toggleMode}\n                        .disabled=${!this._guiModeAvailable}\n                        class=\"gui-mode-button\"\n                      >\n                        ${this.hass!.localize(\n                          !this._cardEditorEl || this._GUImode\n                            ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                            : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                        )}\n                      </mwc-button>\n                      <mwc-button @click=${this._handleReplaceCard}\n                        >${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.change_type\"\n                        )}</mwc-button\n                      >\n                    </div>\n                    <hui-card-editor\n                      .hass=${this.hass}\n                      .value=${this._config.card}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardChanged}\n                      @GUImode-changed=${this._handleGUIModeChanged}\n                    ></hui-card-editor>\n                  `\n                : html`\n                    <hui-card-picker\n                      .hass=${this.hass}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardPicked}\n                    ></hui-card-picker>\n                  `}\n            </div>\n          `\n        : html`\n            <div class=\"conditions\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.card.conditional.condition_explanation\"\n              )}\n              ${this._config.conditions.map((cond, idx) => {\n                return html`\n                  <div class=\"condition\">\n                    <div class=\"entity\">\n                      <ha-entity-picker\n                        .hass=${this.hass}\n                        .value=${cond.entity}\n                        .index=${idx}\n                        .configValue=${\"entity\"}\n                        @change=${this._changeCondition}\n                        allow-custom-entity\n                      ></ha-entity-picker>\n                    </div>\n                    <div class=\"state\">\n                      <paper-dropdown-menu>\n                        <paper-listbox\n                          .selected=${cond.state_not !== undefined ? 1 : 0}\n                          slot=\"dropdown-content\"\n                          .index=${idx}\n                          .configValue=${\"invert\"}\n                          @selected-item-changed=${this._changeCondition}\n                        >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_equal\"\n                            )}</paper-item\n                          >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_not_equal\"\n                            )}</paper-item\n                          >\n                        </paper-listbox>\n                      </paper-dropdown-menu>\n                      <paper-input\n                        .label=\"${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.generic.state\"\n                        )} (${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.current_state\"\n                        )}: '${this.hass?.states[cond.entity].state}')\"\n                        .value=${cond.state_not !== undefined\n                          ? cond.state_not\n                          : cond.state}\n                        .index=${idx}\n                        .configValue=${\"state\"}\n                        @value-changed=${this._changeCondition}\n                      ></paper-input>\n                    </div>\n                  </div>\n                `;\n              })}\n              <div class=\"condition\">\n                <ha-entity-picker\n                  .hass=${this.hass}\n                  @change=${this._addCondition}\n                ></ha-entity-picker>\n              </div>\n            </div>\n          `}\n    `;\n  }\n\n  private _selectTab(ev: Event): void {\n    this._cardTab = parseInt((ev.target! as any).selected!, 10) === 1;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _handleCardPicked(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._config.card = ev.detail.config;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardChanged(ev: HASSDomEvent<ConfigChangedEvent>): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config.card = ev.detail.config;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleReplaceCard(): void {\n    if (!this._config) {\n      return;\n    }\n    // @ts-ignore\n    this._config.card = {};\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _addCondition(ev: Event): void {\n    const target = ev.target! as any;\n    if (target.value === \"\" || !this._config) {\n      return;\n    }\n    this._config.conditions.push({\n      entity: target.value,\n      state: \"\",\n    });\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _changeCondition(ev: Event): void {\n    const target = ev.target as any;\n    if (!this._config || !target) {\n      return;\n    }\n    if (target.configValue === \"entity\" && target.value === \"\") {\n      this._config.conditions.splice(target.index, 1);\n    } else {\n      const condition = this._config.conditions[target.index];\n      if (target.configValue === \"entity\") {\n        condition.entity = target.value;\n      } else if (target.configValue === \"state\") {\n        if (condition.state_not !== undefined) {\n          condition.state_not = target.value;\n        } else {\n          condition.state = target.value;\n        }\n      } else if (target.configValue === \"invert\") {\n        if (target.selected === 1) {\n          if (condition.state) {\n            condition.state_not = condition.state;\n            delete condition.state;\n          }\n        } else if (condition.state_not) {\n          condition.state = condition.state_not;\n          delete condition.state_not;\n        }\n      }\n      this._config.conditions[target.index] = condition;\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-tabs {\n        --paper-tabs-selection-bar-color: var(--primary-color);\n        --paper-tab-ink: var(--primary-color);\n        border-bottom: 1px solid var(--divider-color);\n      }\n      .conditions {\n        margin-top: 8px;\n      }\n      .condition {\n        margin-top: 8px;\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      .condition .state {\n        display: flex;\n        align-items: flex-end;\n      }\n      .condition .state paper-dropdown-menu {\n        margin-right: 16px;\n      }\n      .condition .state paper-input {\n        flex-grow: 1;\n      }\n\n      .card {\n        margin-top: 8px;\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      @media (max-width: 450px) {\n        .card,\n        .condition {\n          margin: 8px -12px 0;\n        }\n      }\n      .card .card-options {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n      }\n      .gui-mode-button {\n        margin-right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-conditional-card-editor\": HuiConditionalCardEditor;\n  }\n}\n"],"sourceRoot":""}