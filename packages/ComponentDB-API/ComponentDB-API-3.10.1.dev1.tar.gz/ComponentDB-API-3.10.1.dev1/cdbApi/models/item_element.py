# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'is_required': 'bool',
        'description': 'str',
        'sort_order': 'float',
        'list_list': 'list[ListTbl]',
        'property_value_list': 'list[PropertyValue]',
        'log_list': 'list[Log]',
        'parent_item': 'Item',
        'derived_from_item_element_list': 'list[ItemElement]',
        'derived_from_item_element': 'ItemElement',
        'contained_item2': 'Item',
        'item_element_relationship_history_list': 'list[ItemElementRelationshipHistory]',
        'item_element_relationship_history_list1': 'list[ItemElementRelationshipHistory]',
        'item_element_relationship_history_list2': 'list[ItemElementRelationshipHistory]',
        'item_element_relationship_list': 'list[ItemElementRelationship]',
        'item_element_relationship_list1': 'list[ItemElementRelationship]',
        'item_element_relationship_list2': 'list[ItemElementRelationship]',
        'item_element_history_list': 'list[ItemElementHistory]',
        'import_parent_catalog_item': 'ItemDomainCatalog',
        'import_part_catalog_item_name': 'str',
        'row_style': 'str',
        'md_connector': 'ItemConnector',
        'contained_item': 'Item',
        'md_type_contained_item': 'Item',
        'import_part_name': 'str',
        'import_part_description': 'str',
        'import_part_required': 'bool',
        'import_part_catalog_item': 'ItemDomainCatalog'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_required': 'isRequired',
        'description': 'description',
        'sort_order': 'sortOrder',
        'list_list': 'listList',
        'property_value_list': 'propertyValueList',
        'log_list': 'logList',
        'parent_item': 'parentItem',
        'derived_from_item_element_list': 'derivedFromItemElementList',
        'derived_from_item_element': 'derivedFromItemElement',
        'contained_item2': 'containedItem2',
        'item_element_relationship_history_list': 'itemElementRelationshipHistoryList',
        'item_element_relationship_history_list1': 'itemElementRelationshipHistoryList1',
        'item_element_relationship_history_list2': 'itemElementRelationshipHistoryList2',
        'item_element_relationship_list': 'itemElementRelationshipList',
        'item_element_relationship_list1': 'itemElementRelationshipList1',
        'item_element_relationship_list2': 'itemElementRelationshipList2',
        'item_element_history_list': 'itemElementHistoryList',
        'import_parent_catalog_item': 'importParentCatalogItem',
        'import_part_catalog_item_name': 'importPartCatalogItemName',
        'row_style': 'rowStyle',
        'md_connector': 'mdConnector',
        'contained_item': 'containedItem',
        'md_type_contained_item': 'mdTypeContainedItem',
        'import_part_name': 'importPartName',
        'import_part_description': 'importPartDescription',
        'import_part_required': 'importPartRequired',
        'import_part_catalog_item': 'importPartCatalogItem'
    }

    def __init__(self, id=None, name=None, is_required=None, description=None, sort_order=None, list_list=None, property_value_list=None, log_list=None, parent_item=None, derived_from_item_element_list=None, derived_from_item_element=None, contained_item2=None, item_element_relationship_history_list=None, item_element_relationship_history_list1=None, item_element_relationship_history_list2=None, item_element_relationship_list=None, item_element_relationship_list1=None, item_element_relationship_list2=None, item_element_history_list=None, import_parent_catalog_item=None, import_part_catalog_item_name=None, row_style=None, md_connector=None, contained_item=None, md_type_contained_item=None, import_part_name=None, import_part_description=None, import_part_required=None, import_part_catalog_item=None, local_vars_configuration=None):  # noqa: E501
        """ItemElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._is_required = None
        self._description = None
        self._sort_order = None
        self._list_list = None
        self._property_value_list = None
        self._log_list = None
        self._parent_item = None
        self._derived_from_item_element_list = None
        self._derived_from_item_element = None
        self._contained_item2 = None
        self._item_element_relationship_history_list = None
        self._item_element_relationship_history_list1 = None
        self._item_element_relationship_history_list2 = None
        self._item_element_relationship_list = None
        self._item_element_relationship_list1 = None
        self._item_element_relationship_list2 = None
        self._item_element_history_list = None
        self._import_parent_catalog_item = None
        self._import_part_catalog_item_name = None
        self._row_style = None
        self._md_connector = None
        self._contained_item = None
        self._md_type_contained_item = None
        self._import_part_name = None
        self._import_part_description = None
        self._import_part_required = None
        self._import_part_catalog_item = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_required is not None:
            self.is_required = is_required
        if description is not None:
            self.description = description
        if sort_order is not None:
            self.sort_order = sort_order
        if list_list is not None:
            self.list_list = list_list
        if property_value_list is not None:
            self.property_value_list = property_value_list
        if log_list is not None:
            self.log_list = log_list
        if parent_item is not None:
            self.parent_item = parent_item
        if derived_from_item_element_list is not None:
            self.derived_from_item_element_list = derived_from_item_element_list
        if derived_from_item_element is not None:
            self.derived_from_item_element = derived_from_item_element
        if contained_item2 is not None:
            self.contained_item2 = contained_item2
        if item_element_relationship_history_list is not None:
            self.item_element_relationship_history_list = item_element_relationship_history_list
        if item_element_relationship_history_list1 is not None:
            self.item_element_relationship_history_list1 = item_element_relationship_history_list1
        if item_element_relationship_history_list2 is not None:
            self.item_element_relationship_history_list2 = item_element_relationship_history_list2
        if item_element_relationship_list is not None:
            self.item_element_relationship_list = item_element_relationship_list
        if item_element_relationship_list1 is not None:
            self.item_element_relationship_list1 = item_element_relationship_list1
        if item_element_relationship_list2 is not None:
            self.item_element_relationship_list2 = item_element_relationship_list2
        if item_element_history_list is not None:
            self.item_element_history_list = item_element_history_list
        if import_parent_catalog_item is not None:
            self.import_parent_catalog_item = import_parent_catalog_item
        if import_part_catalog_item_name is not None:
            self.import_part_catalog_item_name = import_part_catalog_item_name
        if row_style is not None:
            self.row_style = row_style
        if md_connector is not None:
            self.md_connector = md_connector
        if contained_item is not None:
            self.contained_item = contained_item
        if md_type_contained_item is not None:
            self.md_type_contained_item = md_type_contained_item
        if import_part_name is not None:
            self.import_part_name = import_part_name
        if import_part_description is not None:
            self.import_part_description = import_part_description
        if import_part_required is not None:
            self.import_part_required = import_part_required
        if import_part_catalog_item is not None:
            self.import_part_catalog_item = import_part_catalog_item

    @property
    def id(self):
        """Gets the id of this ItemElement.  # noqa: E501


        :return: The id of this ItemElement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemElement.


        :param id: The id of this ItemElement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ItemElement.  # noqa: E501


        :return: The name of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemElement.


        :param name: The name of this ItemElement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def is_required(self):
        """Gets the is_required of this ItemElement.  # noqa: E501


        :return: The is_required of this ItemElement.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this ItemElement.


        :param is_required: The is_required of this ItemElement.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def description(self):
        """Gets the description of this ItemElement.  # noqa: E501


        :return: The description of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemElement.


        :param description: The description of this ItemElement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def sort_order(self):
        """Gets the sort_order of this ItemElement.  # noqa: E501


        :return: The sort_order of this ItemElement.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ItemElement.


        :param sort_order: The sort_order of this ItemElement.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def list_list(self):
        """Gets the list_list of this ItemElement.  # noqa: E501


        :return: The list_list of this ItemElement.  # noqa: E501
        :rtype: list[ListTbl]
        """
        return self._list_list

    @list_list.setter
    def list_list(self, list_list):
        """Sets the list_list of this ItemElement.


        :param list_list: The list_list of this ItemElement.  # noqa: E501
        :type: list[ListTbl]
        """

        self._list_list = list_list

    @property
    def property_value_list(self):
        """Gets the property_value_list of this ItemElement.  # noqa: E501


        :return: The property_value_list of this ItemElement.  # noqa: E501
        :rtype: list[PropertyValue]
        """
        return self._property_value_list

    @property_value_list.setter
    def property_value_list(self, property_value_list):
        """Sets the property_value_list of this ItemElement.


        :param property_value_list: The property_value_list of this ItemElement.  # noqa: E501
        :type: list[PropertyValue]
        """

        self._property_value_list = property_value_list

    @property
    def log_list(self):
        """Gets the log_list of this ItemElement.  # noqa: E501


        :return: The log_list of this ItemElement.  # noqa: E501
        :rtype: list[Log]
        """
        return self._log_list

    @log_list.setter
    def log_list(self, log_list):
        """Sets the log_list of this ItemElement.


        :param log_list: The log_list of this ItemElement.  # noqa: E501
        :type: list[Log]
        """

        self._log_list = log_list

    @property
    def parent_item(self):
        """Gets the parent_item of this ItemElement.  # noqa: E501


        :return: The parent_item of this ItemElement.  # noqa: E501
        :rtype: Item
        """
        return self._parent_item

    @parent_item.setter
    def parent_item(self, parent_item):
        """Sets the parent_item of this ItemElement.


        :param parent_item: The parent_item of this ItemElement.  # noqa: E501
        :type: Item
        """

        self._parent_item = parent_item

    @property
    def derived_from_item_element_list(self):
        """Gets the derived_from_item_element_list of this ItemElement.  # noqa: E501


        :return: The derived_from_item_element_list of this ItemElement.  # noqa: E501
        :rtype: list[ItemElement]
        """
        return self._derived_from_item_element_list

    @derived_from_item_element_list.setter
    def derived_from_item_element_list(self, derived_from_item_element_list):
        """Sets the derived_from_item_element_list of this ItemElement.


        :param derived_from_item_element_list: The derived_from_item_element_list of this ItemElement.  # noqa: E501
        :type: list[ItemElement]
        """

        self._derived_from_item_element_list = derived_from_item_element_list

    @property
    def derived_from_item_element(self):
        """Gets the derived_from_item_element of this ItemElement.  # noqa: E501


        :return: The derived_from_item_element of this ItemElement.  # noqa: E501
        :rtype: ItemElement
        """
        return self._derived_from_item_element

    @derived_from_item_element.setter
    def derived_from_item_element(self, derived_from_item_element):
        """Sets the derived_from_item_element of this ItemElement.


        :param derived_from_item_element: The derived_from_item_element of this ItemElement.  # noqa: E501
        :type: ItemElement
        """

        self._derived_from_item_element = derived_from_item_element

    @property
    def contained_item2(self):
        """Gets the contained_item2 of this ItemElement.  # noqa: E501


        :return: The contained_item2 of this ItemElement.  # noqa: E501
        :rtype: Item
        """
        return self._contained_item2

    @contained_item2.setter
    def contained_item2(self, contained_item2):
        """Sets the contained_item2 of this ItemElement.


        :param contained_item2: The contained_item2 of this ItemElement.  # noqa: E501
        :type: Item
        """

        self._contained_item2 = contained_item2

    @property
    def item_element_relationship_history_list(self):
        """Gets the item_element_relationship_history_list of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_history_list of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationshipHistory]
        """
        return self._item_element_relationship_history_list

    @item_element_relationship_history_list.setter
    def item_element_relationship_history_list(self, item_element_relationship_history_list):
        """Sets the item_element_relationship_history_list of this ItemElement.


        :param item_element_relationship_history_list: The item_element_relationship_history_list of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationshipHistory]
        """

        self._item_element_relationship_history_list = item_element_relationship_history_list

    @property
    def item_element_relationship_history_list1(self):
        """Gets the item_element_relationship_history_list1 of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_history_list1 of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationshipHistory]
        """
        return self._item_element_relationship_history_list1

    @item_element_relationship_history_list1.setter
    def item_element_relationship_history_list1(self, item_element_relationship_history_list1):
        """Sets the item_element_relationship_history_list1 of this ItemElement.


        :param item_element_relationship_history_list1: The item_element_relationship_history_list1 of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationshipHistory]
        """

        self._item_element_relationship_history_list1 = item_element_relationship_history_list1

    @property
    def item_element_relationship_history_list2(self):
        """Gets the item_element_relationship_history_list2 of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_history_list2 of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationshipHistory]
        """
        return self._item_element_relationship_history_list2

    @item_element_relationship_history_list2.setter
    def item_element_relationship_history_list2(self, item_element_relationship_history_list2):
        """Sets the item_element_relationship_history_list2 of this ItemElement.


        :param item_element_relationship_history_list2: The item_element_relationship_history_list2 of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationshipHistory]
        """

        self._item_element_relationship_history_list2 = item_element_relationship_history_list2

    @property
    def item_element_relationship_list(self):
        """Gets the item_element_relationship_list of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_list of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationship]
        """
        return self._item_element_relationship_list

    @item_element_relationship_list.setter
    def item_element_relationship_list(self, item_element_relationship_list):
        """Sets the item_element_relationship_list of this ItemElement.


        :param item_element_relationship_list: The item_element_relationship_list of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationship]
        """

        self._item_element_relationship_list = item_element_relationship_list

    @property
    def item_element_relationship_list1(self):
        """Gets the item_element_relationship_list1 of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_list1 of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationship]
        """
        return self._item_element_relationship_list1

    @item_element_relationship_list1.setter
    def item_element_relationship_list1(self, item_element_relationship_list1):
        """Sets the item_element_relationship_list1 of this ItemElement.


        :param item_element_relationship_list1: The item_element_relationship_list1 of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationship]
        """

        self._item_element_relationship_list1 = item_element_relationship_list1

    @property
    def item_element_relationship_list2(self):
        """Gets the item_element_relationship_list2 of this ItemElement.  # noqa: E501


        :return: The item_element_relationship_list2 of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementRelationship]
        """
        return self._item_element_relationship_list2

    @item_element_relationship_list2.setter
    def item_element_relationship_list2(self, item_element_relationship_list2):
        """Sets the item_element_relationship_list2 of this ItemElement.


        :param item_element_relationship_list2: The item_element_relationship_list2 of this ItemElement.  # noqa: E501
        :type: list[ItemElementRelationship]
        """

        self._item_element_relationship_list2 = item_element_relationship_list2

    @property
    def item_element_history_list(self):
        """Gets the item_element_history_list of this ItemElement.  # noqa: E501


        :return: The item_element_history_list of this ItemElement.  # noqa: E501
        :rtype: list[ItemElementHistory]
        """
        return self._item_element_history_list

    @item_element_history_list.setter
    def item_element_history_list(self, item_element_history_list):
        """Sets the item_element_history_list of this ItemElement.


        :param item_element_history_list: The item_element_history_list of this ItemElement.  # noqa: E501
        :type: list[ItemElementHistory]
        """

        self._item_element_history_list = item_element_history_list

    @property
    def import_parent_catalog_item(self):
        """Gets the import_parent_catalog_item of this ItemElement.  # noqa: E501


        :return: The import_parent_catalog_item of this ItemElement.  # noqa: E501
        :rtype: ItemDomainCatalog
        """
        return self._import_parent_catalog_item

    @import_parent_catalog_item.setter
    def import_parent_catalog_item(self, import_parent_catalog_item):
        """Sets the import_parent_catalog_item of this ItemElement.


        :param import_parent_catalog_item: The import_parent_catalog_item of this ItemElement.  # noqa: E501
        :type: ItemDomainCatalog
        """

        self._import_parent_catalog_item = import_parent_catalog_item

    @property
    def import_part_catalog_item_name(self):
        """Gets the import_part_catalog_item_name of this ItemElement.  # noqa: E501


        :return: The import_part_catalog_item_name of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._import_part_catalog_item_name

    @import_part_catalog_item_name.setter
    def import_part_catalog_item_name(self, import_part_catalog_item_name):
        """Sets the import_part_catalog_item_name of this ItemElement.


        :param import_part_catalog_item_name: The import_part_catalog_item_name of this ItemElement.  # noqa: E501
        :type: str
        """

        self._import_part_catalog_item_name = import_part_catalog_item_name

    @property
    def row_style(self):
        """Gets the row_style of this ItemElement.  # noqa: E501


        :return: The row_style of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._row_style

    @row_style.setter
    def row_style(self, row_style):
        """Sets the row_style of this ItemElement.


        :param row_style: The row_style of this ItemElement.  # noqa: E501
        :type: str
        """

        self._row_style = row_style

    @property
    def md_connector(self):
        """Gets the md_connector of this ItemElement.  # noqa: E501


        :return: The md_connector of this ItemElement.  # noqa: E501
        :rtype: ItemConnector
        """
        return self._md_connector

    @md_connector.setter
    def md_connector(self, md_connector):
        """Sets the md_connector of this ItemElement.


        :param md_connector: The md_connector of this ItemElement.  # noqa: E501
        :type: ItemConnector
        """

        self._md_connector = md_connector

    @property
    def contained_item(self):
        """Gets the contained_item of this ItemElement.  # noqa: E501


        :return: The contained_item of this ItemElement.  # noqa: E501
        :rtype: Item
        """
        return self._contained_item

    @contained_item.setter
    def contained_item(self, contained_item):
        """Sets the contained_item of this ItemElement.


        :param contained_item: The contained_item of this ItemElement.  # noqa: E501
        :type: Item
        """

        self._contained_item = contained_item

    @property
    def md_type_contained_item(self):
        """Gets the md_type_contained_item of this ItemElement.  # noqa: E501


        :return: The md_type_contained_item of this ItemElement.  # noqa: E501
        :rtype: Item
        """
        return self._md_type_contained_item

    @md_type_contained_item.setter
    def md_type_contained_item(self, md_type_contained_item):
        """Sets the md_type_contained_item of this ItemElement.


        :param md_type_contained_item: The md_type_contained_item of this ItemElement.  # noqa: E501
        :type: Item
        """

        self._md_type_contained_item = md_type_contained_item

    @property
    def import_part_name(self):
        """Gets the import_part_name of this ItemElement.  # noqa: E501


        :return: The import_part_name of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._import_part_name

    @import_part_name.setter
    def import_part_name(self, import_part_name):
        """Sets the import_part_name of this ItemElement.


        :param import_part_name: The import_part_name of this ItemElement.  # noqa: E501
        :type: str
        """

        self._import_part_name = import_part_name

    @property
    def import_part_description(self):
        """Gets the import_part_description of this ItemElement.  # noqa: E501


        :return: The import_part_description of this ItemElement.  # noqa: E501
        :rtype: str
        """
        return self._import_part_description

    @import_part_description.setter
    def import_part_description(self, import_part_description):
        """Sets the import_part_description of this ItemElement.


        :param import_part_description: The import_part_description of this ItemElement.  # noqa: E501
        :type: str
        """

        self._import_part_description = import_part_description

    @property
    def import_part_required(self):
        """Gets the import_part_required of this ItemElement.  # noqa: E501


        :return: The import_part_required of this ItemElement.  # noqa: E501
        :rtype: bool
        """
        return self._import_part_required

    @import_part_required.setter
    def import_part_required(self, import_part_required):
        """Sets the import_part_required of this ItemElement.


        :param import_part_required: The import_part_required of this ItemElement.  # noqa: E501
        :type: bool
        """

        self._import_part_required = import_part_required

    @property
    def import_part_catalog_item(self):
        """Gets the import_part_catalog_item of this ItemElement.  # noqa: E501


        :return: The import_part_catalog_item of this ItemElement.  # noqa: E501
        :rtype: ItemDomainCatalog
        """
        return self._import_part_catalog_item

    @import_part_catalog_item.setter
    def import_part_catalog_item(self, import_part_catalog_item):
        """Sets the import_part_catalog_item of this ItemElement.


        :param import_part_catalog_item: The import_part_catalog_item of this ItemElement.  # noqa: E501
        :type: ItemDomainCatalog
        """

        self._import_part_catalog_item = import_part_catalog_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemElement):
            return True

        return self.to_dict() != other.to_dict()
