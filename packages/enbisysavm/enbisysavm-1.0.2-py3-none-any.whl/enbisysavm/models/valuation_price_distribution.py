# coding: utf-8

"""
    ENBISYS AVM API

    API for ENBISYS AVM-platform  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: avm@enbisys.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ValuationPriceDistribution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price_from': 'int',
        'price_to': 'int',
        'probability': 'float'
    }

    attribute_map = {
        'price_from': 'priceFrom',
        'price_to': 'priceTo',
        'probability': 'probability'
    }

    def __init__(self, price_from=None, price_to=None, probability=None):  # noqa: E501
        """ValuationPriceDistribution - a model defined in OpenAPI"""  # noqa: E501

        self._price_from = None
        self._price_to = None
        self._probability = None
        self.discriminator = None

        if price_from is not None:
            self.price_from = price_from
        if price_to is not None:
            self.price_to = price_to
        if probability is not None:
            self.probability = probability

    @property
    def price_from(self):
        """Gets the price_from of this ValuationPriceDistribution.  # noqa: E501

        left subrange boundary  # noqa: E501

        :return: The price_from of this ValuationPriceDistribution.  # noqa: E501
        :rtype: int
        """
        return self._price_from

    @price_from.setter
    def price_from(self, price_from):
        """Sets the price_from of this ValuationPriceDistribution.

        left subrange boundary  # noqa: E501

        :param price_from: The price_from of this ValuationPriceDistribution.  # noqa: E501
        :type: int
        """

        self._price_from = price_from

    @property
    def price_to(self):
        """Gets the price_to of this ValuationPriceDistribution.  # noqa: E501

        right subrange boundary  # noqa: E501

        :return: The price_to of this ValuationPriceDistribution.  # noqa: E501
        :rtype: int
        """
        return self._price_to

    @price_to.setter
    def price_to(self, price_to):
        """Sets the price_to of this ValuationPriceDistribution.

        right subrange boundary  # noqa: E501

        :param price_to: The price_to of this ValuationPriceDistribution.  # noqa: E501
        :type: int
        """

        self._price_to = price_to

    @property
    def probability(self):
        """Gets the probability of this ValuationPriceDistribution.  # noqa: E501

        Probability that price is within the specified boundaries  # noqa: E501

        :return: The probability of this ValuationPriceDistribution.  # noqa: E501
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this ValuationPriceDistribution.

        Probability that price is within the specified boundaries  # noqa: E501

        :param probability: The probability of this ValuationPriceDistribution.  # noqa: E501
        :type: float
        """

        self._probability = probability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValuationPriceDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
