{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-input/iron-input.js","webpack:///./node_modules/fecha/src/fecha.js","webpack:///./node_modules/@polymer/paper-input/paper-input.js"],"names":["__webpack_require__","d","__webpack_exports__","IronA11yAnnouncer","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_2__","Polymer","_template","html","is","properties","mode","type","String","value","_text","created","instance","this","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","_polymer_iron_a11y_announcer_iron_a11y_announcer_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_iron_validatable_behavior_iron_validatable_behavior_js__WEBPACK_IMPORTED_MODULE_2__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_4__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","behaviors","IronValidatableBehavior","bindValue","computed","allowedPattern","autoValidate","Boolean","_inputElement","Object","observers","listeners","input","keypress","_previousValidInput","_patternAlreadyChecked","attached","_observer","dom","observeNodes","info","_initSlottedInput","detached","unobserveNodes","inputElement","getEffectiveChildren","fire","_patternRegExp","pattern","RegExp","_bindValueChanged","undefined","validate","_onInput","_checkPatternValidity","_announceInvalidCharacter","_isPrintable","anyNonPrintable","keyCode","mozNonPrintable","charCode","_onKeypress","regexp","metaKey","ctrlKey","altKey","thisChar","fromCharCode","test","preventDefault","i","length","invalid","valid","checkValidity","required","hasValidator","call","message","_computeValue","fecha","token","word","literal","noop","shorten","arr","sLen","newArr","len","push","substr","monthUpdate","arrName","v","i18n","index","indexOf","charAt","toUpperCase","toLowerCase","month","pad","val","dayNames","monthNames","monthNamesShort","dayNamesShort","amPm","DoFn","D","formatFlags","dateObj","getDate","DD","Do","getDay","dd","ddd","dddd","M","getMonth","MM","MMM","MMMM","YY","getFullYear","YYYY","h","getHours","hh","H","HH","m","getMinutes","mm","s","getSeconds","ss","S","Math","round","getMilliseconds","SS","SSS","a","A","ZZ","o","getTimezoneOffset","floor","abs","parseFlags","day","parseInt","cent","Date","year","hour","minute","second","millisecond","isPm","minutes","parts","match","timezoneOffset","masks","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","format","mask","i18nSettings","prototype","toString","isNaN","getTime","Error","literals","replace","$0","$1","slice","shift","parse","dateStr","str","dateInfo","parseInfo","newFormat","matches","date","today","UTC","_polymer_iron_form_element_behavior_iron_form_element_behavior_js__WEBPACK_IMPORTED_MODULE_5__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_7__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_8__","_paper_input_behavior_js__WEBPACK_IMPORTED_MODULE_9__","PaperInputBehavior","IronFormElementBehavior","_focusableElement","iron-input-ready","_onIronInputReady","$","nativeInput","$$","_typesThatHaveText","alwaysFloatLabel","container","_handleValueAndAutoValidate"],"mappings":"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","file":"chunk.582b9897103c94947965.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n","/**\n * Parse or format dates\n * @class fecha\n */\nvar fecha = {};\nvar token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigits = '\\\\d\\\\d?';\nvar threeDigits = '\\\\d{3}';\nvar fourDigits = '\\\\d{4}';\nvar word = '[^\\\\s]+';\nvar literal = /\\[([^]*?)\\]/gm;\nvar noop = function () {\n};\n\nfunction regexEscape(str) {\n  return str.replace( /[|\\\\{()[^$+*?.-]/g, '\\\\$&');\n}\n\nfunction shorten(arr, sLen) {\n  var newArr = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nfunction monthUpdate(arrName) {\n  return function (d, v, i18n) {\n    var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());\n    if (~index) {\n      d.month = index;\n    }\n  };\n}\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\nvar dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nfecha.i18n = {\n  dayNamesShort: dayNamesShort,\n  dayNames: dayNames,\n  monthNamesShort: monthNamesShort,\n  monthNames: monthNames,\n  amPm: ['am', 'pm'],\n  DoFn: function DoFn(D) {\n    return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];\n  }\n};\n\nvar formatFlags = {\n  D: function(dateObj) {\n    return dateObj.getDate();\n  },\n  DD: function(dateObj) {\n    return pad(dateObj.getDate());\n  },\n  Do: function(dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n  d: function(dateObj) {\n    return dateObj.getDay();\n  },\n  dd: function(dateObj) {\n    return pad(dateObj.getDay());\n  },\n  ddd: function(dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n  dddd: function(dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n  M: function(dateObj) {\n    return dateObj.getMonth() + 1;\n  },\n  MM: function(dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n  MMM: function(dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n  MMMM: function(dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n  YY: function(dateObj) {\n    return pad(String(dateObj.getFullYear()), 4).substr(2);\n  },\n  YYYY: function(dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n  h: function(dateObj) {\n    return dateObj.getHours() % 12 || 12;\n  },\n  hh: function(dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n  H: function(dateObj) {\n    return dateObj.getHours();\n  },\n  HH: function(dateObj) {\n    return pad(dateObj.getHours());\n  },\n  m: function(dateObj) {\n    return dateObj.getMinutes();\n  },\n  mm: function(dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n  s: function(dateObj) {\n    return dateObj.getSeconds();\n  },\n  ss: function(dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n  S: function(dateObj) {\n    return Math.round(dateObj.getMilliseconds() / 100);\n  },\n  SS: function(dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n  SSS: function(dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n  a: function(dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n  A: function(dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n  },\n  ZZ: function(dateObj) {\n    var o = dateObj.getTimezoneOffset();\n    return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);\n  }\n};\n\nvar parseFlags = {\n  D: [twoDigits, function (d, v) {\n    d.day = v;\n  }],\n  Do: [twoDigits + word, function (d, v) {\n    d.day = parseInt(v, 10);\n  }],\n  M: [twoDigits, function (d, v) {\n    d.month = v - 1;\n  }],\n  YY: [twoDigits, function (d, v) {\n    var da = new Date(), cent = +('' + da.getFullYear()).substr(0, 2);\n    d.year = '' + (v > 68 ? cent - 1 : cent) + v;\n  }],\n  h: [twoDigits, function (d, v) {\n    d.hour = v;\n  }],\n  m: [twoDigits, function (d, v) {\n    d.minute = v;\n  }],\n  s: [twoDigits, function (d, v) {\n    d.second = v;\n  }],\n  YYYY: [fourDigits, function (d, v) {\n    d.year = v;\n  }],\n  S: ['\\\\d', function (d, v) {\n    d.millisecond = v * 100;\n  }],\n  SS: ['\\\\d{2}', function (d, v) {\n    d.millisecond = v * 10;\n  }],\n  SSS: [threeDigits, function (d, v) {\n    d.millisecond = v;\n  }],\n  d: [twoDigits, noop],\n  ddd: [word, noop],\n  MMM: [word, monthUpdate('monthNamesShort')],\n  MMMM: [word, monthUpdate('monthNames')],\n  a: [word, function (d, v, i18n) {\n    var val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      d.isPm = false;\n    } else if (val === i18n.amPm[1]) {\n      d.isPm = true;\n    }\n  }],\n  ZZ: ['[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z', function (d, v) {\n    var parts = (v + '').match(/([+-]|\\d\\d)/gi), minutes;\n\n    if (parts) {\n      minutes = +(parts[1] * 60) + parseInt(parts[2], 10);\n      d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;\n    }\n  }]\n};\nparseFlags.dd = parseFlags.d;\nparseFlags.dddd = parseFlags.ddd;\nparseFlags.DD = parseFlags.D;\nparseFlags.mm = parseFlags.m;\nparseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;\nparseFlags.MM = parseFlags.M;\nparseFlags.ss = parseFlags.s;\nparseFlags.A = parseFlags.a;\n\n\n// Some common format strings\nfecha.masks = {\n  default: 'ddd MMM DD YYYY HH:mm:ss',\n  shortDate: 'M/D/YY',\n  mediumDate: 'MMM D, YYYY',\n  longDate: 'MMMM D, YYYY',\n  fullDate: 'dddd, MMMM D, YYYY',\n  shortTime: 'HH:mm',\n  mediumTime: 'HH:mm:ss',\n  longTime: 'HH:mm:ss.SSS'\n};\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n */\nfecha.format = function (dateObj, mask, i18nSettings) {\n  var i18n = i18nSettings || fecha.i18n;\n\n  if (typeof dateObj === 'number') {\n    dateObj = new Date(dateObj);\n  }\n\n  if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {\n    throw new Error('Invalid Date in fecha.format');\n  }\n\n  mask = fecha.masks[mask] || mask || fecha.masks['default'];\n\n  var literals = [];\n\n  // Make literals inactive by replacing them with ??\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return '??';\n  });\n  // Apply formatting rules\n  mask = mask.replace(token, function ($0) {\n    return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);\n  });\n  // Inline literal values back into the formatted value\n  return mask.replace(/\\?\\?/g, function() {\n    return literals.shift();\n  });\n};\n\n/**\n * Parse a date string into an object, changes - into /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @returns {Date|boolean}\n */\nfecha.parse = function (dateStr, format, i18nSettings) {\n  var i18n = i18nSettings || fecha.i18n;\n\n  if (typeof format !== 'string') {\n    throw new Error('Invalid format in fecha.parse');\n  }\n\n  format = fecha.masks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  var dateInfo = {};\n  var parseInfo = [];\n  var newFormat = regexEscape(format).replace(token, function ($0) {\n    if (parseFlags[$0]) {\n      var info = parseFlags[$0];\n      parseInfo.push(info[1]);\n      return '(' + info[0] + ')';\n    }\n\n    return $0;\n  });\n  var matches = dateStr.match(new RegExp(newFormat, 'i'));\n  if (!matches) {\n    return null;\n  }\n\n  for (var i = 1; i < matches.length; i++) {\n    parseInfo[i - 1](dateInfo, matches[i], i18n);\n  }\n\n  var today = new Date();\n  if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  var date;\n  if (dateInfo.timezoneOffset != null) {\n    dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;\n    date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1,\n      dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));\n  } else {\n    date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1,\n      dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);\n  }\n  return date;\n};\n\nexport default fecha;\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    }\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = this.$$('input');\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n"],"sourceRoot":""}