{"version":3,"sources":["webpack:///./src/util/custom-panel/create-custom-panel-element.ts","webpack:///./src/util/custom-panel/load-custom-panel.ts","webpack:///./src/util/custom-panel/set-custom-panel-properties.ts","webpack:///./src/panels/custom/ha-panel-custom.ts","webpack:///./src/common/dom/load_resource.ts"],"names":["__webpack_require__","d","__webpack_exports__","createCustomPanelElement","panelConfig","tagName","concat","name","document","createElement","JS_CACHE","loadCustomPanel","html_url","toLoad","e","then","bind","embed_iframe","push","Promise","all","_ref","importHrefPromise","_slicedToArray","js_url","loadJS","module_url","loadModule","reject","setCustomPanelProperties","root","properties","setProperties","Object","keys","forEach","key","HaPanelCustom","_decorate","_initialize","_UpdatingElement","_UpdatingElement2","_inherits","_super","_createSuper","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","_assertThisInitialized","F","kind","decorators","property","value","_this2","path","replace","navigate","initialize","panel","hass","narrow","route","_setProperties","_get","_getPrototypeOf","prototype","_cleanupPanel","changedProps","has","get","_createPanel","_step","props","_iterator","_createForOfIteratorHelper","s","n","done","err","f","window","customPanel","undefined","lastChild","removeChild","_this3","config","_panel_custom","tempA","href","trust_external","location","hostname","includes","confirm","localize","innerHTML","trim","iframeDoc","querySelector","contentWindow","open","write","customPanelJS","close","element","appendChild","alert","UpdatingElement","customElements","define","loadCSS","_load","tag","url","type","resolve","attr","parent","onload","onerror","async","rel"],"mappings":"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","file":"chunk.d61e687f0af89d93a367.js","sourcesContent":["export const createCustomPanelElement = (panelConfig) => {\n  // Legacy support. Custom panels used to have to define element ha-panel-{name}\n  const tagName =\n    \"html_url\" in panelConfig\n      ? `ha-panel-${panelConfig.name}`\n      : panelConfig.name;\n  return document.createElement(tagName);\n};\n","import { loadJS, loadModule } from \"../../common/dom/load_resource\";\n\n// Make sure we only import every JS-based panel once (HTML import has this built-in)\nconst JS_CACHE = {};\n\nexport const loadCustomPanel = (panelConfig): Promise<unknown> => {\n  if (panelConfig.html_url) {\n    const toLoad = [\n      import(\n        /* webpackChunkName: \"import-href-polyfill\" */ \"../../resources/html-import/import-href\"\n      ),\n    ];\n\n    if (!panelConfig.embed_iframe) {\n      toLoad.push(\n        import(/* webpackChunkName: \"legacy-support\" */ \"../legacy-support\")\n      );\n    }\n\n    return Promise.all(toLoad).then(([{ importHrefPromise }]) =>\n      importHrefPromise(panelConfig.html_url)\n    );\n  }\n  if (panelConfig.js_url) {\n    if (!(panelConfig.js_url in JS_CACHE)) {\n      JS_CACHE[panelConfig.js_url] = loadJS(panelConfig.js_url);\n    }\n    return JS_CACHE[panelConfig.js_url];\n  }\n  if (panelConfig.module_url) {\n    return loadModule(panelConfig.module_url);\n  }\n  return Promise.reject(\"No valid url found in panel config.\");\n};\n","export const setCustomPanelProperties = (root, properties) => {\n  if (\"setProperties\" in root) {\n    root.setProperties(properties);\n  } else {\n    Object.keys(properties).forEach((key) => {\n      root[key] = properties[key];\n    });\n  }\n};\n","import { property, PropertyValues, UpdatingElement } from \"lit-element\";\nimport { navigate } from \"../../common/navigate\";\nimport { CustomPanelInfo } from \"../../data/panel_custom\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { createCustomPanelElement } from \"../../util/custom-panel/create-custom-panel-element\";\nimport { loadCustomPanel } from \"../../util/custom-panel/load-custom-panel\";\nimport { setCustomPanelProperties } from \"../../util/custom-panel/set-custom-panel-properties\";\n\ndeclare global {\n  interface Window {\n    customPanel: HaPanelCustom | undefined;\n  }\n}\n\nexport class HaPanelCustom extends UpdatingElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public panel!: CustomPanelInfo;\n\n  private _setProperties?: (props: {}) => void | undefined;\n\n  // Since navigate fires events on `window`, we need to expose this as a function\n  // to allow custom panels to forward their location changes to the main window\n  // instead of their iframe window.\n  public navigate = (path: string, replace?: boolean) =>\n    navigate(this, path, replace);\n\n  public registerIframe(initialize, setProperties) {\n    initialize(this.panel, {\n      hass: this.hass,\n      narrow: this.narrow,\n      route: this.route,\n    });\n    this._setProperties = setProperties;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._cleanupPanel();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"panel\")) {\n      // Clean up old things if we had a panel\n      if (changedProps.get(\"panel\")) {\n        this._cleanupPanel();\n      }\n      this._createPanel(this.panel);\n      return;\n    }\n    if (!this._setProperties) {\n      return;\n    }\n    const props = {};\n    // @ts-ignore\n    for (const key of changedProps.keys()) {\n      props[key] = this[key];\n    }\n    this._setProperties(props);\n  }\n\n  private _cleanupPanel() {\n    delete window.customPanel;\n    this._setProperties = undefined;\n    while (this.lastChild) {\n      this.removeChild(this.lastChild);\n    }\n  }\n\n  private _createPanel(panel: CustomPanelInfo) {\n    const config = panel.config!._panel_custom;\n\n    const tempA = document.createElement(\"a\");\n    tempA.href = config.html_url || config.js_url || config.module_url || \"\";\n\n    if (\n      !config.trust_external &&\n      ![\"localhost\", \"127.0.0.1\", location.hostname].includes(tempA.hostname)\n    ) {\n      if (\n        !confirm(\n          `${this.hass.localize(\n            \"ui.panel.custom.external_panel.question_trust\",\n            \"name\",\n            config.name,\n            \"link\",\n            tempA.href\n          )}\n\n           ${this.hass.localize(\n             \"ui.panel.custom.external_panel.complete_access\"\n           )}\n\n           (${this.hass.localize(\n             \"ui.panel.custom.external_panel.hide_message\"\n           )})`\n        )\n      ) {\n        return;\n      }\n    }\n\n    if (!config.embed_iframe) {\n      loadCustomPanel(config).then(\n        () => {\n          const element = createCustomPanelElement(config);\n          this._setProperties = (props) =>\n            setCustomPanelProperties(element, props);\n          setCustomPanelProperties(element, {\n            panel,\n            hass: this.hass,\n            narrow: this.narrow,\n            route: this.route,\n          });\n          this.appendChild(element);\n        },\n        () => {\n          alert(`Unable to load custom panel from ${tempA.href}`);\n        }\n      );\n      return;\n    }\n\n    window.customPanel = this;\n    this.innerHTML = `\n    <style>\n      iframe {\n        border: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n        background-color: var(--primary-background-color);\n      }\n    </style>\n    <iframe></iframe>\n    `.trim();\n    const iframeDoc = this.querySelector(\"iframe\")!.contentWindow!.document;\n    iframeDoc.open();\n    iframeDoc.write(\n      `<!doctype html><script src='${window.customPanelJS}'></script>`\n    );\n    iframeDoc.close();\n  }\n}\n\ncustomElements.define(\"ha-panel-custom\", HaPanelCustom);\n","// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (\n  tag: \"link\" | \"script\" | \"img\",\n  url: string,\n  type?: \"module\"\n) => {\n  // This promise will be used by Promise.all to determine success or failure\n  return new Promise((resolve, reject) => {\n    const element = document.createElement(tag);\n    let attr = \"src\";\n    let parent = \"body\";\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case \"script\":\n        (element as HTMLScriptElement).async = true;\n        if (type) {\n          (element as HTMLScriptElement).type = type;\n        }\n        break;\n      case \"link\":\n        (element as HTMLLinkElement).type = \"text/css\";\n        (element as HTMLLinkElement).rel = \"stylesheet\";\n        attr = \"href\";\n        parent = \"head\";\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\n};\n\nexport const loadCSS = (url: string) => _load(\"link\", url);\nexport const loadJS = (url: string) => _load(\"script\", url);\nexport const loadImg = (url: string) => _load(\"img\", url);\nexport const loadModule = (url: string) => _load(\"script\", url, \"module\");\n"],"sourceRoot":""}