{"version":3,"sources":["theme.jsx","components/Confirmation.jsx","util/confirm.js","sagas.js","reducer.js","store.js","client.js","TaskDetail.jsx","Tasks.jsx","Experiments.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Theme","props","muiTheme","getMuiTheme","lightBaseTheme","Fragment","children","Confirmation","this","okLabel","cancelLabel","title","confirmation","show","proceed","dismiss","cancel","modal","actions","label","secondary","onClick","primary","open","onRequestClose","React","Component","confirmable","confirm","createConfirmation","options","refreshExperimentsSaga","rootSaga","action","payload","client","send","type","serverError","toast","all","takeEvery","initialState","connected","jobs","byId","ids","experiments","experiment","status2int","status","jobComparator","id1","id2","j1","j2","z","localeCompare","reducer","produce","draft","name","undefined","jobId","push","sort","_","merge","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","dispatch","close","message","event","console","log","data","JSON","parse","error","ws","readyState","WebSocket","OPEN","stringify","query","location","window","url","hostname","port","addEventListener","Transition","Slide","direction","listitem","text","value","ListItem","ListItemText","className","style","textAlign","data-clipboard-text","onSuccess","success","TaskDetail","state","classes","job","fullScreen","onClose","handleClose","TransitionComponent","AppBar","appBar","Toolbar","IconButton","color","aria-label","Typography","variant","flex","taskId","List","locator","Divider","DateTime","fromMillis","submitted","toLocaleString","DATETIME_FULL_WITH_SECONDS","start","end","tags","withStyles","position","Tasks","searchtask","searchtagstring","searchtags","kill","then","info","details","setState","handleChange","target","handleTagChange","tag","re","match","exec","id","TextField","onChange","margin","helperText","map","search","mainloop","tv","toString","key","progress","right","connect","theme","container","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","width","padding","dense","marginTop","menu","Experiments","App","toastClassName","isLocalhost","Boolean","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","div","document","getElementById","ReactDOM","render","URL","process","origin","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ac017d3a.chunk.js","sourcesContent":["import React from 'react';\n\nimport lightBaseTheme from 'material-ui/styles/baseThemes/lightBaseTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\n\n// import injectTapEventPlugin from 'react-tap-event-plugin';\n// injectTapEventPlugin();\n\nconst Theme = (props) => (\n  <MuiThemeProvider muiTheme={getMuiTheme(lightBaseTheme)}>\n    <React.Fragment>{ props.children }</React.Fragment>\n  </MuiThemeProvider>\n);\n\nexport default Theme;","import React from 'react';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\nimport { confirmable } from 'react-confirm';\n\nimport Theme from '../theme'\n\nclass Confirmation extends React.Component {\n\n  render() {\n    const {\n      okLabel = 'OK',\n      cancelLabel = 'Cancel',\n      title,\n      confirmation,\n      show,\n      proceed,\n      dismiss,\n      cancel,\n      modal,\n    } = this.props;\n\n    const actions = [\n      <FlatButton\n        label={cancelLabel}\n        secondary={true}\n        onClick={cancel}\n      />,\n      <FlatButton\n        label={okLabel}\n        primary={true}\n        onClick={proceed}\n      />,\n    ];\n\n    return (\n      <Theme>\n        <Dialog\n          title={title}\n          actions={actions}\n          modal={modal}\n          open={show}\n          onRequestClose={dismiss}\n        >\n          {confirmation}\n        </Dialog>\n      </Theme>\n    );\n  }\n}\n\nexport default confirmable(Confirmation);\n","import Confirmation from '../components/Confirmation';\nimport { createConfirmation } from 'react-confirm';\n\nconst confirm = createConfirmation(Confirmation);\n\nexport default function(confirmation, options = {}) {\n  return confirm({ confirmation, ...options });\n}\n","// @flow\n\nimport \"regenerator-runtime/runtime\";\nimport { takeEvery, all } from 'redux-saga/effects'\nimport { toast } from 'react-toastify'\n\nimport client from './client'\n\n/// Retrieve the seasons\nfunction* refreshExperimentsSaga(action) : any {\n  if (action.payload) {\n    // We are connected\n    yield client.send({type: \"refresh\" });\n  }\n}\n\nfunction serverError(action) : any {\n  toast(\"Server error: \" + action.payload, { type: \"error\" })\n}\n\nexport default function* rootSaga() : any {\n    yield all([\n      takeEvery(\"CONNECTED\", refreshExperimentsSaga),\n      takeEvery(\"SERVER_ERROR\", serverError)\n    ])\n  }\n","// @flow\n\nimport { Reducer } from 'redux'\nimport produce from \"immer\"\nimport _ from 'lodash';\n\n// ---- States\n\ntype Experiment = {\n    name: string;\n}\n\ntype JobStatus = \"running\" | \"done\" | \"error\" | \"ready\" | \"waiting\";\n\nexport type Job = {\n    jobId: string;\n    taskId: string;\n\n    locator: string;\n    status: JobStatus;\n\n    start: number;\n    end: number;\n    submitted: number;\n\n    tags: Array<[string, number|string|boolean]>;\n\n    progress: number;\n}\nexport type Jobs = {\n    byId: { [string]: Job },\n    ids: Array<string>\n}\n\nexport type State = {\n    connected: boolean;\n\n    experiment: ?string;\n    jobs: Jobs,\n    experiments: {[string]: Experiment};\n}\n\n\n// ---- Actions\n\ntype Action = \n    { type: \"CONNECTED\", payload: boolean } // true if the connexion is open, false otherwise\n    \n    | { type: \"CLEAN_INFORMATION\" }\n\n    | { type: \"EXPERIMENT_ADD\", payload: Experiment }\n    | { type: \"EXPERIMENT_SET_MAIN\", payload: string }\n\n    | { type: \"JOB_ADD\", payload: Job }\n    | { type: \"JOB_UPDATE\", payload: $Shape<Job> }\n;\n\n\n\n// --- Reducer\n\nexport const initialState : State = {\n    connected: false,\n    jobs: {\n        byId: {},\n        ids: []\n    },\n    experiments: {},\n    experiment: null\n}\n\n\nconst status2int = (status: JobStatus) : number => {\n    switch(status) {\n        case \"running\": return 5;\n        case \"error\": return 2;\n        case \"waiting\": return 2;\n        case \"ready\": return 1;\n        case \"done\": return 0;\n        default: return 0;\n    }\n}\nconst jobComparator = (jobs: {[string]: Job}) => {\n    return (id1: string, id2: string) : number => {\n        let j1 = jobs[id1];\n        let j2 = jobs[id2];\n        let z =  status2int(j2.status) - status2int(j1.status);\n        if (z !== 0) return z;\n        return id1.localeCompare(id2);\n    }\n}\n\nexport const reducer : Reducer<State,Action> =\n    produce((draft: State, action: Action) : void => {\n        switch (action.type) {\n            case \"CONNECTED\":\n                draft.connected = action.payload;\n                break;\n            case \"CLEAN_INFORMATION\":\n                draft.jobs = {\n                    byId: {},\n                    ids: []\n                };\n                draft.experiments = {};\n                break;\n\n            case \"EXPERIMENT_SET_MAIN\":\n                draft.experiment = action.payload;\n                break;\n\n            case \"EXPERIMENT_ADD\":\n                draft.experiments[action.payload.name] = action.payload;\n                break;\n\n            case \"JOB_ADD\":\n                if (draft.jobs.byId[action.payload.jobId] === undefined) {\n                    draft.jobs.ids.push(action.payload.jobId);\n                }\n                draft.jobs.byId[action.payload.jobId] = action.payload;\n                draft.jobs.ids.sort(jobComparator(draft.jobs.byId));\n                break;\n\n            case \"JOB_UPDATE\":\n                if (draft.jobs.byId[action.payload.jobId] === undefined) {\n                } else {\n                    _.merge(draft.jobs.byId[action.payload.jobId], action.payload);\n                }\n                draft.jobs.ids.sort(jobComparator(draft.jobs.byId));\n                break;\n\n            default: \n                break;\n        }\n    }, initialState)\n","// @flow\n\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootSaga from './sagas'\nimport { reducer, initialState } from './reducer'\n \n// --- Store\n\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(rootSaga)\n\nif (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe\n    if (module.hot) {\n        module.hot.accept('./reducer', () => {\n            store.replaceReducer(reducer);\n        });\n    }\n}\n\n\nexport default store;","// @flow\n\nimport store from './store'\nimport { toast } from 'react-toastify'\n\n/// Connects to the Websocket server\nclass Client {\n    ws: WebSocket;\n    waiting: Map<number, any>;\n    queued: Array<any>;\n\n    constructor() {\n        console.log(\"Connecting to websocket\");\n\n        let location = window.location;\n        var url = 'ws://'+location.hostname+(location.port ? ':'+location.port: '') + '/ws';\n\n        this.ws = new WebSocket(url);\n        this.ws.addEventListener('open', this.open);        \n        this.ws.addEventListener('close', this.close);        \n        this.ws.addEventListener('message', this.message);        \n    }\n\n    open = () => {\n        store.dispatch({ type: \"CONNECTED\", payload: true });\n    }\n\n    close = () => {\n        store.dispatch({ type: \"CONNECTED\", payload: false });\n        toast(\"Websocket connexion closed\", {type: \"info\"});\n    }\n\n    message = (event: any) => {    \n        console.log(\"[WS:in]\", event.data)\n        let action = JSON.parse(event.data)\n        if (action.error) {\n            toast.error(action.message)\n        } else {\n            store.dispatch(action)\n        }\n    }\n\n\n    /** Send without waiting for an answer */\n    send = (data: any, message: ?string) => {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            console.log(\"[WS:out]\", data)\n            return this.ws.send(JSON.stringify(data));\n        } else {\n            console.log(\"Connection not ready\");\n            if (message) {\n                toast(\"No websocket connection: could not \" + message, {type: \"error\"});\n            }\n            return false;\n        }\n            \n    }\n\n    /** Wait for an answer */\n    query = (data: any, timeout: number = 60) => {\n        return this.ws.send(JSON.stringify(data));\n    }\n}\n\nexport default new Client();","// @flow\n\nimport React, { type Node } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\n// import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\n// import CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nimport { DateTime } from 'luxon'\nimport Clipboard from 'react-clipboard.js';\nimport { toast } from 'react-toastify';\n\nimport { type Job } from './reducer'\n\nconst styles = {\n  appBar: {\n    position: 'relative',\n  },\n  flex: {\n    flex: 1,\n  },\n};\n\nfunction Transition(props: any) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\ntype Props = {\n    job: Job,\n    classes: any,\n    handleClose: void => void\n}\n\nconst listitem = (text: string, value: Node) => {\n    return (\n        <ListItem>\n             \n                <ListItemText primary={text} secondary={<Clipboard className=\"clipboard\" style={{textAlign: \"left\"}} data-clipboard-text={value} onSuccess={() => toast.success(`Value copied`)}>{value}</Clipboard>} /> \n    </ListItem>\n    )\n\n}\n\nclass TaskDetail extends React.Component<Props, { open: boolean }> {\n  state = {\n    open: false,\n  };\n\n  render() {\n    const { classes, job } = this.props;\n\n    return (\n      <div>\n        <Dialog\n          fullScreen\n          open={true}\n          onClose={this.props.handleClose}\n          TransitionComponent={Transition}\n        >\n          <AppBar className={classes.appBar}>\n            <Toolbar>\n              <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\n                <i className=\"far fa-window-close\"/>\n              </IconButton>\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n                Task {job.taskId}\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <List>\n            {listitem(\"Status\", job.status)}\n            {listitem(\"Path\", job.locator)}\n            <Divider />\n            {listitem(\"Submitted\", DateTime.fromMillis(1000 * job.submitted).toLocaleString(DateTime.DATETIME_FULL_WITH_SECONDS))}         \n            {listitem(\"Start\", job.start)}\n            {listitem(\"End\", job.end)}\n            {listitem(\"Tags\", job.tags)}\n          </List>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TaskDetail);\n","// @flow\n\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport Clipboard from 'react-clipboard.js';\nimport { toast } from 'react-toastify';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport { type State, type Jobs } from './reducer'\nimport confirm from './util/confirm';\nimport client from './client'\nimport Theme from './theme'\nimport TaskDetail from './TaskDetail'\n\ntype StateProps = {\n    jobs: Jobs\n};\n\ntype Props = StateProps;\ntype OwnState = {\n    jobId: ?string;\n    searchtask: string;\n    searchtagstring: string;\n    searchtags: Array<{tag: string, value: string}>\n}\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n    padding: 10\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\n\nclass Tasks extends Component<Props, OwnState> {\n    state = {\n        searchtask: \"\",\n        searchtagstring: \"\",\n        searchtags: [],\n        jobId: null\n    }\n\n    kill = (jobId: string) => {\n        confirm('Are you sure to kill this job?').then(() => {\n            client.send({ type: \"kill\", payload: jobId}, \"cannot kill job \" + jobId)\n        }, () => {\n            toast.info(\"Action cancelled\");\n        });\n    }\n\n    details = (jobId: ?string) => {\n        if (jobId) {\n            client.send({ type: \"details\", payload: jobId}, \"cannot get details for job \" + jobId);\n        }\n        this.setState({ ...this.state, jobId: jobId});\n    }\n\n    handleChange = name => event => {\n        this.setState({ ...this.state, \n            [name]: event.target.value\n        });\n    };\n\n    handleTagChange = event => {\n        let tag = event.target.value;\n        let re = /(\\S+):(?:([^\"]\\S*)|\"([^\"]+)\")\\s*/g;\n        var match = [];\n        var tags = [];\n        while ((match = re.exec(tag)) !== null) {\n            // $FlowFixMe\n            tags.push({ tag: match[1], value: match[2] });\n        }\n        this.setState({ ...this.state,\n            searchtagstring: tag,\n            searchtags: tags\n        })\n    }\n\n    render() {\n        let { jobs } = this.props;\n        let { searchtask, searchtags, jobId } = this.state;\n\n        if (jobId) {\n            let job = jobs.byId[jobId];\n            return <TaskDetail job={job} handleClose={() => this.setState({...this.state, jobId: null})}/>;\n        }\n\n        return <div id=\"resources\">\n            <Theme>\n            <div className=\"search\">\n                <TextField\n                    label=\"Task\"\n                    className=\"textField\"\n                    value={this.state.searchtask}\n                    onChange={this.handleChange('searchtask')}                \n                    margin=\"normal\"\n                    helperText=\"Task contains...\"\n                />\n                <TextField\n                    label=\"Tags\"\n                    className=\"textField\"\n                    value={this.state.searchtagstring}\n                    onChange={this.handleTagChange}\n                    margin=\"normal\"\n                    helperText=\"Search tags (format tag:value)\"\n                />\n\n            </div>\n            {\n            jobs.ids.map(jobId => {\n                let job = jobs.byId[jobId];\n\n                if (searchtask !== \"\" && job.taskId.search(searchtask) === -1) {\n                    return null;\n                }\n\n                mainloop: for(let {tag, value} of searchtags) {\n                    for(let tv of job.tags) {\n                        if (tv[0].search(tag) !== -1 && tv[1].toString().search(value) !== -1)\n                            continue mainloop;\n                    }\n                    return null;\n                }\n\n                return <div className=\"resource\" key={jobId}>\n                    {\n                        job.status === \"running\" ?\n                        <React.Fragment>\n                            <span className=\"status progressbar-container\" title={`${job.progress*100}%`}>\n                                <span style={{right: `${(1-job.progress)*100}%`}} className=\"progressbar\"></span><div className=\"status-running\">{job.status}</div>\n                            </span> \n                            <i className=\"fa fa-skull-crossbones action\" onClick={() => this.kill(jobId) }/>\n                        </React.Fragment>\n                        :\n                        <span className={`status status-${job.status}`}>{job.status}</span>\n                    }\n                    <i className=\"fas fa-eye action\" title=\"Details\" onClick={() => this.details(jobId)}/>\n                    <span className=\"job-id\"><Clipboard className=\"clipboard\" data-clipboard-text={`${job.taskId}/${job.jobId}`} onSuccess={() => toast.success(`Job path copied`)}>{job.taskId}</Clipboard></span>\n                    {\n                        job.tags.map((tv) => {\n                            return <span key={tv[0]} className=\"tag\">\n                                <span className=\"name\">{tv[0]}</span>\n                                <span className=\"value\">{tv[1]}</span>\n                            </span>\n                        })\n                    }\n                </div>\n            })\n        }</Theme></div>;\n    }\n}\n\nconst mapStateToProps = (state: State) : StateProps => ({\n    jobs: state.jobs\n})\nexport default connect(mapStateToProps)(withStyles(styles)(Tasks));","// @flow\n\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { type State } from './reducer'\n\n\ntype DispatchProps = {\n}\ntype Props = { ...DispatchProps,\n    experiment: string\n}\n\nclass Experiments extends Component<Props> {\n    render() {\n        // let { experiment } = this.props;\n        return <div>\n            </div>;\n    }\n}\n\nconst mapStateToProps = (state: State) => ({\n    experiment: state.experiment\n})\nexport default connect(mapStateToProps, {  })(Experiments);","// @flow\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport './App.css';\nimport { type State } from './reducer';\nimport Tasks from './Tasks'\nimport Experiments from './Experiments'\n\ntype StateProps = { \n  connected: boolean,\n  experiment: string\n}\ntype Props = StateProps;\n\nclass App extends Component<Props> {\n  render() {\n    let { connected, experiment } = this.props;\n    return (\n      <div>\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Experimaestro {experiment ? \" – \" + experiment : \"\"}  <i className={`fab fa-staylinked ws-status ${connected ? \"ws-link\" : \"ws-no-link\" }`} /> </h1>\n        </header>\n        <ToastContainer toastClassName=\"dark-toast\"/>\n        <Experiments/>\n        <Tasks/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({ connected: state.connected, experiment: state.experiment })\nexport default connect(mapStateToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nlet div = document.getElementById('root')\nif (div) {\n    const render = Component => {\n        return ReactDOM.render(\n            <Provider store={store}><App /></Provider>,\n            div\n        );\n    };\n\n    render(App);\n\n    // $FlowFixMe\n    if (module.hot) {\n        module.hot.accept('./App', () => {\n            const NextApp = require('./App').default;\n            render(NextApp);\n        });\n    }\n\n    registerServiceWorker();\n\n}"],"sourceRoot":""}