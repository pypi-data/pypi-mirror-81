{"version":3,"sources":["webpack:///./src/panels/lovelace/cards/hui-plant-status-card.ts"],"names":["SENSORS","moisture","temperature","brightness","conductivity","battery","customElement","HuiPlantStatusCard","_LitElement","[object Object]","args","super","_initialize","this","async","Promise","all","__webpack_require__","e","then","bind","document","createElement","hass","entities","entitiesFallback","type","entity","findEntities","property","config","split","Error","_config","changedProps","hasConfigOrEntityChanged","_get","_getPrototypeOf","prototype","call","oldHass","get","oldConfig","themes","theme","applyThemesOnElement","html","stateObj","states","attributes","entity_picture","name","computeStateName","computeAttributes","map","item","_handleMoreInfo","actionHandler","computeIcon","problem","indexOf","unit_of_measurement_dict","localize","css","Object","keys","filter","key","attr","batLvl","icon","Math","round","ev","target","currentTarget","value","fireEvent","entityId","sensors","LitElement"],"mappings":"q4DAuBA,MAAMA,EAAU,CACdC,SAAU,aACVC,YAAa,mBACbC,WAAY,2BACZC,aAAc,qBACdC,QAAS,grMAGVC,YAAc,wCAAf,MACMC,UADNC,EACoEC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAC,gBAA9DN,2DACJO,iBAIE,aAHMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,WAGCC,SAASC,cAAc,qFAGhC,SACEC,EACAC,EACAC,GAYA,MAAO,CAAEC,KAAM,eAAgBC,OARTC,YACpBL,EAFkB,EAIlBC,EACAC,EANqB,CAAC,UAU6B,IAAM,gCAG5DI,kEAEAA,kFAED,WACE,OAAO,yCAGT,SAAiBC,GACf,IAAKA,EAAOH,QAA0C,UAAhCG,EAAOH,OAAOI,MAAM,KAAK,GAC7C,MAAM,IAAIC,MAAM,mDAGlBnB,KAAKoB,QAAUH,4CAGjB,SAAuBI,GACrB,OAAOC,YAAyBtB,KAAMqB,wCAGxC,SAAkBA,GAEhB,GADAE,EAAAC,EA/CE9B,EA+CF+B,WAAA,UAAAzB,MAAA0B,KAAA1B,KAAcqB,IACTrB,KAAKoB,UAAYpB,KAAKU,KACzB,OAEF,MAAMiB,EAAUN,EAAaO,IAAI,QAC3BC,EAAYR,EAAaO,IAAI,WAKhCD,GACAE,GACDF,EAAQG,SAAW9B,KAAKU,KAAKoB,QAC7BD,EAAUE,QAAU/B,KAAKoB,QAAQW,OAEjCC,YAAqBhC,KAAMA,KAAKU,KAAKoB,OAAQ9B,KAAKoB,QAAQW,2CAI9D,WACE,IAAK/B,KAAKU,OAASV,KAAKoB,QACtB,OAAOa,MAGT,MAAMC,EAAWlC,KAAKU,KAAKyB,OAAOnC,KAAKoB,QAASN,QAEhD,OAAKoB,EAYED;;iBAEMC,EAASE,WAAWC,eAAiB,kBAAoB;;;;wCAIlCH,EAASE,WAAWC;;;cAG9CrC,KAAKoB,QAAQkB,MAAQC,YAAiBL;;;;YAIxClC,KAAKwC,kBAAkBN,GAAUO,IAChCC,GAAST;;;0BAGIjC,KAAK2C;iCACEC;;0BAEPF;;;;4BAIE1C,KAAK6C,YACXH,EACAR,EAASE,WAAW5C;;;;4BAKgC,IAA/C0C,EAASE,WAAWU,QAAQC,QAAQL,GACzC,GACA;;oBAEFR,EAASE,WAAWM;;;oBAGpBR,EAASE,WAAWY,yBAAyBN,IAAS;;;;;;MAjD7DT;;aAEAjC,KAAKU,KAAKuC,SACX,6CACA,SACAjD,KAAKoB,QAAQN;;mDAsDvB,WACE,OAAOoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDA8ET,SAA0BhB,GACxB,OAAOiB,OAAOC,KAAKjE,GAASkE,OAAQC,GAAQA,KAAOpB,EAASE,qDAG9D,SAAoBmB,EAAcC,GAChC,MAAMC,EAAOtE,EAAQoE,GACrB,GAAa,YAATA,EAAoB,CACtB,GAAIC,GAAU,EACZ,SAAUC,UAEZ,GAAID,EAAS,GACX,SAAUC,KAAyC,GAAjCC,KAAKC,MAAMH,EAAS,GAAK,OAG/C,OAAOC,+CAGT,SAAwBG,GACtB,MAAMC,EAASD,EAAGE,cACZ5B,EAAWlC,KAAKU,KAAMyB,OAAOnC,KAAKoB,QAASN,QAE7C+C,EAAOE,OACTC,YAAUhE,KAAM,iBAAkB,CAChCiE,SAAU/B,EAASE,WAAW8B,QAAQL,EAAOE,cA3OpBI","file":"chunk.ca5859f4033201231474.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entites\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { PlantAttributeTarget, PlantStatusCardConfig } from \"./types\";\n\nconst SENSORS = {\n  moisture: \"hass:water\",\n  temperature: \"hass:thermometer\",\n  brightness: \"hass:white-balance-sunny\",\n  conductivity: \"hass:emoticon-poop\",\n  battery: \"hass:battery\",\n};\n\n@customElement(\"hui-plant-status-card\")\nclass HuiPlantStatusCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\n      /* webpackChunkName: \"hui-plant-status-card-editor\" */ \"../editor/config-elements/hui-plant-status-card-editor\"\n    );\n    return document.createElement(\"hui-plant-status-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): PlantStatusCardConfig {\n    const includeDomains = [\"plant\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"plant-status\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: PlantStatusCardConfig;\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: PlantStatusCardConfig): void {\n    if (!config.entity || config.entity.split(\".\")[0] !== \"plant\") {\n      throw new Error(\"Specify an entity from within the plant domain.\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | PlantStatusCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config!.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <ha-card\n        class=\"${stateObj.attributes.entity_picture ? \"has-plant-image\" : \"\"}\"\n      >\n        <div\n          class=\"banner\"\n          style=\"background-image:url(${stateObj.attributes.entity_picture})\"\n        >\n          <div class=\"header\">\n            ${this._config.name || computeStateName(stateObj)}\n          </div>\n        </div>\n        <div class=\"content\">\n          ${this.computeAttributes(stateObj).map(\n            (item) => html`\n              <div\n                class=\"attributes\"\n                @action=${this._handleMoreInfo}\n                .actionHandler=${actionHandler()}\n                tabindex=\"0\"\n                .value=\"${item}\"\n              >\n                <div>\n                  <ha-icon\n                    icon=\"${this.computeIcon(\n                      item,\n                      stateObj.attributes.battery\n                    )}\"\n                  ></ha-icon>\n                </div>\n                <div\n                  class=\"${stateObj.attributes.problem.indexOf(item) === -1\n                    ? \"\"\n                    : \"problem\"}\"\n                >\n                  ${stateObj.attributes[item]}\n                </div>\n                <div class=\"uom\">\n                  ${stateObj.attributes.unit_of_measurement_dict[item] || \"\"}\n                </div>\n              </div>\n            `\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        display: flex;\n        align-items: flex-end;\n        background-repeat: no-repeat;\n        background-size: cover;\n        background-position: center;\n        padding-top: 12px;\n      }\n\n      .has-plant-image .banner {\n        padding-top: 30%;\n      }\n\n      .header {\n        /* start paper-font-headline style */\n        font-family: \"Roboto\", \"Noto\", sans-serif;\n        -webkit-font-smoothing: antialiased; /* OS X subpixel AA bleed bug */\n        text-rendering: optimizeLegibility;\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -0.012em;\n        /* end paper-font-headline style */\n\n        line-height: 40px;\n        padding: 8px 16px;\n      }\n\n      .has-plant-image .header {\n        font-size: 16px;\n        font-weight: 500;\n        line-height: 16px;\n        padding: 16px;\n        color: white;\n        width: 100%;\n        background: rgba(0, 0, 0, var(--dark-secondary-opacity));\n      }\n\n      .content {\n        display: flex;\n        justify-content: space-between;\n        padding: 16px 32px 24px 32px;\n      }\n\n      .has-plant-image .content {\n        padding-bottom: 16px;\n      }\n\n      ha-icon {\n        color: var(--paper-item-icon-color);\n        margin-bottom: 8px;\n      }\n\n      .attributes {\n        cursor: pointer;\n      }\n\n      .attributes:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n\n      .attributes div {\n        text-align: center;\n      }\n\n      .problem {\n        color: var(--google-red-500);\n        font-weight: bold;\n      }\n\n      .uom {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n\n  private computeAttributes(stateObj: HassEntity): string[] {\n    return Object.keys(SENSORS).filter((key) => key in stateObj.attributes);\n  }\n\n  private computeIcon(attr: string, batLvl: number): string {\n    const icon = SENSORS[attr];\n    if (attr === \"battery\") {\n      if (batLvl <= 5) {\n        return `${icon}-alert`;\n      }\n      if (batLvl < 95) {\n        return `${icon}-${Math.round(batLvl / 10 - 0.01) * 10}`;\n      }\n    }\n    return icon;\n  }\n\n  private _handleMoreInfo(ev: Event): void {\n    const target = ev.currentTarget! as PlantAttributeTarget;\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    if (target.value) {\n      fireEvent(this, \"hass-more-info\", {\n        entityId: stateObj.attributes.sensors[target.value],\n      });\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-plant-status-card\": HuiPlantStatusCard;\n  }\n}\n"],"sourceRoot":""}