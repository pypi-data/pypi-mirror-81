# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: mishmash_rpc.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import mishmash_rpc_pb2


class MishmashServiceBase(abc.ABC):

    @abc.abstractmethod
    async def stream(self, stream: 'grpclib.server.Stream[mishmash_rpc_pb2.StreamClientMessage, mishmash_rpc_pb2.StreamServerMessage]') -> None:
        pass

    @abc.abstractmethod
    async def mutate(self, stream: 'grpclib.server.Stream[mishmash_rpc_pb2.MutationClientMessage, mishmash_rpc_pb2.MutationServerMessage]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/io.mishmash.common.rpc.MishmashService/stream': grpclib.const.Handler(
                self.stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                mishmash_rpc_pb2.StreamClientMessage,
                mishmash_rpc_pb2.StreamServerMessage,
            ),
            '/io.mishmash.common.rpc.MishmashService/mutate': grpclib.const.Handler(
                self.mutate,
                grpclib.const.Cardinality.STREAM_STREAM,
                mishmash_rpc_pb2.MutationClientMessage,
                mishmash_rpc_pb2.MutationServerMessage,
            ),
        }


class MishmashServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.stream = grpclib.client.StreamStreamMethod(
            channel,
            '/io.mishmash.common.rpc.MishmashService/stream',
            mishmash_rpc_pb2.StreamClientMessage,
            mishmash_rpc_pb2.StreamServerMessage,
        )
        self.mutate = grpclib.client.StreamStreamMethod(
            channel,
            '/io.mishmash.common.rpc.MishmashService/mutate',
            mishmash_rpc_pb2.MutationClientMessage,
            mishmash_rpc_pb2.MutationServerMessage,
        )
