{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","loaded","loadCodeMirror","_ref","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Promise","all","e","then","bind","abrupt","stop","apply","this","arguments","_decorate","customElement","_initialize","_UpdatingElement","HaCodeEditor","_UpdatingElement2","_inherits","_super","_createSuper","_this","_classCallCheck","_len","length","args","Array","_key","call","concat","_assertThisInitialized","F","kind","key","decorators","property","type","Boolean","_value","codemirror","getValue","shadowRoot","querySelector","_get","_getPrototypeOf","prototype","refresh","autofocus","focus","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","error","_load","_load2","codeMirror","_this2","sent","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","readOnly","extraKeys","Tab","Shift-Tab","gutters","on","_onChange","newValue","fireEvent","rtl","getWrapperElement","UpdatingElement","lovelaceStruct","title","views","html","_templateObject","_closeEditor","hass","localize","classMap","saved","_saving","_changed","_handleSave","computeRTL","_yamlChanged","yamlEditor","safeDump","lovelace","config","haStyle","css","_templateObject2","getDoc","isClean","_generation","window","onbeforeunload","t0","showConfirmationDialog","text","dismissText","confirmText","closeEditor","_callee2","_context2","deleteConfig","showAlertDialog","_callee3","_context3","confirm","_removeConfig","hasComments","safeLoad","t1","resources","saveConfig","t2","changeGeneration","LitElement"],"mappings":"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","file":"chunk.989d5e14e655eae858bf.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { Editor } from \"codemirror\";\nimport {\n  customElement,\n  property,\n  PropertyValues,\n  UpdatingElement,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n\n  @property() public mode?: string;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public rtl = false;\n\n  @property() public error = false;\n\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return !!this.shadowRoot!.querySelector(\"span.cm-comment\");\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      readOnly: this.readOnly,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport { safeDump, safeLoad } from \"js-yaml\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/ha-code-editor\";\nimport type { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport \"../../components/ha-icon\";\nimport type { LovelaceConfig } from \"../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { struct } from \"./common/structs/struct\";\nimport type { Lovelace } from \"./types\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n});\n\n@customElement(\"hui-editor\")\nclass LovelaceFullConfigEditor extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public lovelace?: Lovelace;\n\n  @property() public closeEditor?: () => void;\n\n  @property() private _saving?: boolean;\n\n  @property() private _changed?: boolean;\n\n  private _generation = 1;\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button\n              raised\n              @click=\"${this._handleSave}\"\n              .disabled=${!this._changed}\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            .rtl=${computeRTL(this.hass)}\n            .hass=${this.hass}\n            @value-changed=\"${this._yamlChanged}\"\n            @editor-save=\"${this._handleSave}\"\n          >\n          </ha-code-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = safeDump(this.lovelace!.config);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        mwc-button[disabled] {\n          background-color: var(--mdc-theme-on-primary);\n          border-radius: 4px;\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = !this.yamlEditor\n      .codemirror!.getDoc()\n      .isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private async _closeEditor() {\n    if (\n      this._changed &&\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_changes\"\n        ),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n      }))\n    ) {\n      return;\n    }\n\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _removeConfig() {\n    try {\n      await this.lovelace!.deleteConfig();\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_remove\",\n          \"error\",\n          err\n        ),\n      });\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    const value = this.yamlEditor.value;\n\n    if (!value) {\n      showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_text\"\n        ),\n        confirmText: this.hass.localize(\"ui.common.yes\"),\n        dismissText: this.hass.localize(\"ui.common.no\"),\n        confirm: () => this._removeConfig(),\n      });\n      return;\n    }\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_comments\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n\n    let config: LovelaceConfig;\n    try {\n      config = safeLoad(value);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_parse_yaml\",\n          \"error\",\n          err\n        ),\n      });\n      this._saving = false;\n      return;\n    }\n    try {\n      config = lovelaceStruct(config);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_invalid_config\",\n          \"error\",\n          err\n        ),\n      });\n      return;\n    }\n    // @ts-ignore\n    if (config.resources) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.resources_moved\"\n        ),\n      });\n    }\n    try {\n      await this.lovelace!.saveConfig(config);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_save_yaml\",\n          \"error\",\n          err\n        ),\n      });\n    }\n    this._generation = this.yamlEditor\n      .codemirror!.getDoc()\n      .changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n"],"sourceRoot":""}