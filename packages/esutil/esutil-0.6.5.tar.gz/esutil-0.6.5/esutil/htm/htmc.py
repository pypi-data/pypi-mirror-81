# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _htmc
else:
    import _htmc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class PAIR_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i1 = property(_htmc.PAIR_INFO_i1_get, _htmc.PAIR_INFO_i1_set)
    i2 = property(_htmc.PAIR_INFO_i2_get, _htmc.PAIR_INFO_i2_set)
    d12 = property(_htmc.PAIR_INFO_d12_get, _htmc.PAIR_INFO_d12_set)

    def __init__(self):
        _htmc.PAIR_INFO_swiginit(self, _htmc.new_PAIR_INFO())
    __swig_destroy__ = _htmc.delete_PAIR_INFO

# Register PAIR_INFO in _htmc:
_htmc.PAIR_INFO_swigregister(PAIR_INFO)

class PAIR_INFO_ORDERING(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, pi1, pi2):
        return _htmc.PAIR_INFO_ORDERING___call__(self, pi1, pi2)

    def __init__(self):
        _htmc.PAIR_INFO_ORDERING_swiginit(self, _htmc.new_PAIR_INFO_ORDERING())
    __swig_destroy__ = _htmc.delete_PAIR_INFO_ORDERING

# Register PAIR_INFO_ORDERING in _htmc:
_htmc.PAIR_INFO_ORDERING_swigregister(PAIR_INFO_ORDERING)

class HTMC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, depth=10):
        _htmc.HTMC_swiginit(self, _htmc.new_HTMC(depth))

    def init(self, depth=10):
        return _htmc.HTMC_init(self, depth)
    __swig_destroy__ = _htmc.delete_HTMC

    def lookup_id(self, ra_array, dec_array, htm_ids_array):
        return _htmc.HTMC_lookup_id(self, ra_array, dec_array, htm_ids_array)

    def intersect(self, ra, dec, radius, inclusive):
        return _htmc.HTMC_intersect(self, ra, dec, radius, inclusive)

    def cbincount(self, rmin, rmax, nbin_object, ra1_array, dec1_array, ra2_array, dec2_array, htmrev2_array, minmax_ids_array, scale_object=None, verbose=0):
        return _htmc.HTMC_cbincount(self, rmin, rmax, nbin_object, ra1_array, dec1_array, ra2_array, dec2_array, htmrev2_array, minmax_ids_array, scale_object, verbose)

    def get_depth(self):
        return _htmc.HTMC_get_depth(self)

# Register HTMC in _htmc:
_htmc.HTMC_swigregister(HTMC)

class Matcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, depth, ra, dec):
        _htmc.Matcher_swiginit(self, _htmc.new_Matcher(depth, ra, dec))
    __swig_destroy__ = _htmc.delete_Matcher

    def get_depth(self):
        return _htmc.Matcher_get_depth(self)

    def match(self, radius_array, ra_array, dec_array, maxmatch, filename):
        return _htmc.Matcher_match(self, radius_array, ra_array, dec_array, maxmatch, filename)

# Register Matcher in _htmc:
_htmc.Matcher_swigregister(Matcher)



