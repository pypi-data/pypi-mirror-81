# coding: utf-8

"""
    ENBISYS AVM API

    API for ENBISYS AVM-platform  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: avm@enbisys.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdditionalFeatures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price_of_previous_sale': 'int',
        'date_of_previous_sale': 'str',
        'leasehold_or_freehold': 'LeaseholdOrFreehold',
        'wall_type': 'WallType',
        'wall_insulation': 'WallInsulation',
        'wall_energy_efficiency': 'EnergyEfficiency',
        'roof_type': 'RoofType',
        'roof_insulation': 'RoofInsulation',
        'roof_energy_efficiency': 'EnergyEfficiency',
        'window_glazing_type': 'WindowGlazingType',
        'window_energy_efficiency': 'EnergyEfficiency',
        'current_energy_rating': 'EnergyRating',
        'potential_energy_rating': 'EnergyRating',
        'annual_heating_cost_in_pounds': 'int',
        'annual_hot_water_cost_in_pounds': 'int',
        'annual_lighting_cost_in_pounds': 'int',
        'annual_energy_consumption_in_k_wh': 'int',
        'floor_height_in_foot': 'float',
        'built_form': 'BuiltForm'
    }

    attribute_map = {
        'price_of_previous_sale': 'priceOfPreviousSale',
        'date_of_previous_sale': 'dateOfPreviousSale',
        'leasehold_or_freehold': 'leaseholdOrFreehold',
        'wall_type': 'wallType',
        'wall_insulation': 'wallInsulation',
        'wall_energy_efficiency': 'wallEnergyEfficiency',
        'roof_type': 'roofType',
        'roof_insulation': 'roofInsulation',
        'roof_energy_efficiency': 'roofEnergyEfficiency',
        'window_glazing_type': 'windowGlazingType',
        'window_energy_efficiency': 'windowEnergyEfficiency',
        'current_energy_rating': 'currentEnergyRating',
        'potential_energy_rating': 'potentialEnergyRating',
        'annual_heating_cost_in_pounds': 'annualHeatingCostInPounds',
        'annual_hot_water_cost_in_pounds': 'annualHotWaterCostInPounds',
        'annual_lighting_cost_in_pounds': 'annualLightingCostInPounds',
        'annual_energy_consumption_in_k_wh': 'annualEnergyConsumptionInKWh',
        'floor_height_in_foot': 'floorHeightInFoot',
        'built_form': 'builtForm'
    }

    def __init__(self, price_of_previous_sale=None, date_of_previous_sale=None, leasehold_or_freehold=None, wall_type=None, wall_insulation=None, wall_energy_efficiency=None, roof_type=None, roof_insulation=None, roof_energy_efficiency=None, window_glazing_type=None, window_energy_efficiency=None, current_energy_rating=None, potential_energy_rating=None, annual_heating_cost_in_pounds=None, annual_hot_water_cost_in_pounds=None, annual_lighting_cost_in_pounds=None, annual_energy_consumption_in_k_wh=None, floor_height_in_foot=None, built_form=None):  # noqa: E501
        """AdditionalFeatures - a model defined in OpenAPI"""  # noqa: E501

        self._price_of_previous_sale = None
        self._date_of_previous_sale = None
        self._leasehold_or_freehold = None
        self._wall_type = None
        self._wall_insulation = None
        self._wall_energy_efficiency = None
        self._roof_type = None
        self._roof_insulation = None
        self._roof_energy_efficiency = None
        self._window_glazing_type = None
        self._window_energy_efficiency = None
        self._current_energy_rating = None
        self._potential_energy_rating = None
        self._annual_heating_cost_in_pounds = None
        self._annual_hot_water_cost_in_pounds = None
        self._annual_lighting_cost_in_pounds = None
        self._annual_energy_consumption_in_k_wh = None
        self._floor_height_in_foot = None
        self._built_form = None
        self.discriminator = None

        if price_of_previous_sale is not None:
            self.price_of_previous_sale = price_of_previous_sale
        if date_of_previous_sale is not None:
            self.date_of_previous_sale = date_of_previous_sale
        if leasehold_or_freehold is not None:
            self.leasehold_or_freehold = leasehold_or_freehold
        if wall_type is not None:
            self.wall_type = wall_type
        if wall_insulation is not None:
            self.wall_insulation = wall_insulation
        if wall_energy_efficiency is not None:
            self.wall_energy_efficiency = wall_energy_efficiency
        if roof_type is not None:
            self.roof_type = roof_type
        if roof_insulation is not None:
            self.roof_insulation = roof_insulation
        if roof_energy_efficiency is not None:
            self.roof_energy_efficiency = roof_energy_efficiency
        if window_glazing_type is not None:
            self.window_glazing_type = window_glazing_type
        if window_energy_efficiency is not None:
            self.window_energy_efficiency = window_energy_efficiency
        if current_energy_rating is not None:
            self.current_energy_rating = current_energy_rating
        if potential_energy_rating is not None:
            self.potential_energy_rating = potential_energy_rating
        if annual_heating_cost_in_pounds is not None:
            self.annual_heating_cost_in_pounds = annual_heating_cost_in_pounds
        if annual_hot_water_cost_in_pounds is not None:
            self.annual_hot_water_cost_in_pounds = annual_hot_water_cost_in_pounds
        if annual_lighting_cost_in_pounds is not None:
            self.annual_lighting_cost_in_pounds = annual_lighting_cost_in_pounds
        if annual_energy_consumption_in_k_wh is not None:
            self.annual_energy_consumption_in_k_wh = annual_energy_consumption_in_k_wh
        if floor_height_in_foot is not None:
            self.floor_height_in_foot = floor_height_in_foot
        if built_form is not None:
            self.built_form = built_form

    @property
    def price_of_previous_sale(self):
        """Gets the price_of_previous_sale of this AdditionalFeatures.  # noqa: E501


        :return: The price_of_previous_sale of this AdditionalFeatures.  # noqa: E501
        :rtype: int
        """
        return self._price_of_previous_sale

    @price_of_previous_sale.setter
    def price_of_previous_sale(self, price_of_previous_sale):
        """Sets the price_of_previous_sale of this AdditionalFeatures.


        :param price_of_previous_sale: The price_of_previous_sale of this AdditionalFeatures.  # noqa: E501
        :type: int
        """
        if price_of_previous_sale is not None and price_of_previous_sale < 1:  # noqa: E501
            raise ValueError("Invalid value for `price_of_previous_sale`, must be a value greater than or equal to `1`")  # noqa: E501

        self._price_of_previous_sale = price_of_previous_sale

    @property
    def date_of_previous_sale(self):
        """Gets the date_of_previous_sale of this AdditionalFeatures.  # noqa: E501


        :return: The date_of_previous_sale of this AdditionalFeatures.  # noqa: E501
        :rtype: str
        """
        return self._date_of_previous_sale

    @date_of_previous_sale.setter
    def date_of_previous_sale(self, date_of_previous_sale):
        """Sets the date_of_previous_sale of this AdditionalFeatures.


        :param date_of_previous_sale: The date_of_previous_sale of this AdditionalFeatures.  # noqa: E501
        :type: str
        """

        self._date_of_previous_sale = date_of_previous_sale

    @property
    def leasehold_or_freehold(self):
        """Gets the leasehold_or_freehold of this AdditionalFeatures.  # noqa: E501


        :return: The leasehold_or_freehold of this AdditionalFeatures.  # noqa: E501
        :rtype: LeaseholdOrFreehold
        """
        return self._leasehold_or_freehold

    @leasehold_or_freehold.setter
    def leasehold_or_freehold(self, leasehold_or_freehold):
        """Sets the leasehold_or_freehold of this AdditionalFeatures.


        :param leasehold_or_freehold: The leasehold_or_freehold of this AdditionalFeatures.  # noqa: E501
        :type: LeaseholdOrFreehold
        """

        self._leasehold_or_freehold = leasehold_or_freehold

    @property
    def wall_type(self):
        """Gets the wall_type of this AdditionalFeatures.  # noqa: E501


        :return: The wall_type of this AdditionalFeatures.  # noqa: E501
        :rtype: WallType
        """
        return self._wall_type

    @wall_type.setter
    def wall_type(self, wall_type):
        """Sets the wall_type of this AdditionalFeatures.


        :param wall_type: The wall_type of this AdditionalFeatures.  # noqa: E501
        :type: WallType
        """

        self._wall_type = wall_type

    @property
    def wall_insulation(self):
        """Gets the wall_insulation of this AdditionalFeatures.  # noqa: E501


        :return: The wall_insulation of this AdditionalFeatures.  # noqa: E501
        :rtype: WallInsulation
        """
        return self._wall_insulation

    @wall_insulation.setter
    def wall_insulation(self, wall_insulation):
        """Sets the wall_insulation of this AdditionalFeatures.


        :param wall_insulation: The wall_insulation of this AdditionalFeatures.  # noqa: E501
        :type: WallInsulation
        """

        self._wall_insulation = wall_insulation

    @property
    def wall_energy_efficiency(self):
        """Gets the wall_energy_efficiency of this AdditionalFeatures.  # noqa: E501


        :return: The wall_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :rtype: EnergyEfficiency
        """
        return self._wall_energy_efficiency

    @wall_energy_efficiency.setter
    def wall_energy_efficiency(self, wall_energy_efficiency):
        """Sets the wall_energy_efficiency of this AdditionalFeatures.


        :param wall_energy_efficiency: The wall_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :type: EnergyEfficiency
        """

        self._wall_energy_efficiency = wall_energy_efficiency

    @property
    def roof_type(self):
        """Gets the roof_type of this AdditionalFeatures.  # noqa: E501


        :return: The roof_type of this AdditionalFeatures.  # noqa: E501
        :rtype: RoofType
        """
        return self._roof_type

    @roof_type.setter
    def roof_type(self, roof_type):
        """Sets the roof_type of this AdditionalFeatures.


        :param roof_type: The roof_type of this AdditionalFeatures.  # noqa: E501
        :type: RoofType
        """

        self._roof_type = roof_type

    @property
    def roof_insulation(self):
        """Gets the roof_insulation of this AdditionalFeatures.  # noqa: E501


        :return: The roof_insulation of this AdditionalFeatures.  # noqa: E501
        :rtype: RoofInsulation
        """
        return self._roof_insulation

    @roof_insulation.setter
    def roof_insulation(self, roof_insulation):
        """Sets the roof_insulation of this AdditionalFeatures.


        :param roof_insulation: The roof_insulation of this AdditionalFeatures.  # noqa: E501
        :type: RoofInsulation
        """

        self._roof_insulation = roof_insulation

    @property
    def roof_energy_efficiency(self):
        """Gets the roof_energy_efficiency of this AdditionalFeatures.  # noqa: E501


        :return: The roof_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :rtype: EnergyEfficiency
        """
        return self._roof_energy_efficiency

    @roof_energy_efficiency.setter
    def roof_energy_efficiency(self, roof_energy_efficiency):
        """Sets the roof_energy_efficiency of this AdditionalFeatures.


        :param roof_energy_efficiency: The roof_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :type: EnergyEfficiency
        """

        self._roof_energy_efficiency = roof_energy_efficiency

    @property
    def window_glazing_type(self):
        """Gets the window_glazing_type of this AdditionalFeatures.  # noqa: E501


        :return: The window_glazing_type of this AdditionalFeatures.  # noqa: E501
        :rtype: WindowGlazingType
        """
        return self._window_glazing_type

    @window_glazing_type.setter
    def window_glazing_type(self, window_glazing_type):
        """Sets the window_glazing_type of this AdditionalFeatures.


        :param window_glazing_type: The window_glazing_type of this AdditionalFeatures.  # noqa: E501
        :type: WindowGlazingType
        """

        self._window_glazing_type = window_glazing_type

    @property
    def window_energy_efficiency(self):
        """Gets the window_energy_efficiency of this AdditionalFeatures.  # noqa: E501


        :return: The window_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :rtype: EnergyEfficiency
        """
        return self._window_energy_efficiency

    @window_energy_efficiency.setter
    def window_energy_efficiency(self, window_energy_efficiency):
        """Sets the window_energy_efficiency of this AdditionalFeatures.


        :param window_energy_efficiency: The window_energy_efficiency of this AdditionalFeatures.  # noqa: E501
        :type: EnergyEfficiency
        """

        self._window_energy_efficiency = window_energy_efficiency

    @property
    def current_energy_rating(self):
        """Gets the current_energy_rating of this AdditionalFeatures.  # noqa: E501


        :return: The current_energy_rating of this AdditionalFeatures.  # noqa: E501
        :rtype: EnergyRating
        """
        return self._current_energy_rating

    @current_energy_rating.setter
    def current_energy_rating(self, current_energy_rating):
        """Sets the current_energy_rating of this AdditionalFeatures.


        :param current_energy_rating: The current_energy_rating of this AdditionalFeatures.  # noqa: E501
        :type: EnergyRating
        """

        self._current_energy_rating = current_energy_rating

    @property
    def potential_energy_rating(self):
        """Gets the potential_energy_rating of this AdditionalFeatures.  # noqa: E501


        :return: The potential_energy_rating of this AdditionalFeatures.  # noqa: E501
        :rtype: EnergyRating
        """
        return self._potential_energy_rating

    @potential_energy_rating.setter
    def potential_energy_rating(self, potential_energy_rating):
        """Sets the potential_energy_rating of this AdditionalFeatures.


        :param potential_energy_rating: The potential_energy_rating of this AdditionalFeatures.  # noqa: E501
        :type: EnergyRating
        """

        self._potential_energy_rating = potential_energy_rating

    @property
    def annual_heating_cost_in_pounds(self):
        """Gets the annual_heating_cost_in_pounds of this AdditionalFeatures.  # noqa: E501


        :return: The annual_heating_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :rtype: int
        """
        return self._annual_heating_cost_in_pounds

    @annual_heating_cost_in_pounds.setter
    def annual_heating_cost_in_pounds(self, annual_heating_cost_in_pounds):
        """Sets the annual_heating_cost_in_pounds of this AdditionalFeatures.


        :param annual_heating_cost_in_pounds: The annual_heating_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :type: int
        """

        self._annual_heating_cost_in_pounds = annual_heating_cost_in_pounds

    @property
    def annual_hot_water_cost_in_pounds(self):
        """Gets the annual_hot_water_cost_in_pounds of this AdditionalFeatures.  # noqa: E501


        :return: The annual_hot_water_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :rtype: int
        """
        return self._annual_hot_water_cost_in_pounds

    @annual_hot_water_cost_in_pounds.setter
    def annual_hot_water_cost_in_pounds(self, annual_hot_water_cost_in_pounds):
        """Sets the annual_hot_water_cost_in_pounds of this AdditionalFeatures.


        :param annual_hot_water_cost_in_pounds: The annual_hot_water_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :type: int
        """

        self._annual_hot_water_cost_in_pounds = annual_hot_water_cost_in_pounds

    @property
    def annual_lighting_cost_in_pounds(self):
        """Gets the annual_lighting_cost_in_pounds of this AdditionalFeatures.  # noqa: E501


        :return: The annual_lighting_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :rtype: int
        """
        return self._annual_lighting_cost_in_pounds

    @annual_lighting_cost_in_pounds.setter
    def annual_lighting_cost_in_pounds(self, annual_lighting_cost_in_pounds):
        """Sets the annual_lighting_cost_in_pounds of this AdditionalFeatures.


        :param annual_lighting_cost_in_pounds: The annual_lighting_cost_in_pounds of this AdditionalFeatures.  # noqa: E501
        :type: int
        """

        self._annual_lighting_cost_in_pounds = annual_lighting_cost_in_pounds

    @property
    def annual_energy_consumption_in_k_wh(self):
        """Gets the annual_energy_consumption_in_k_wh of this AdditionalFeatures.  # noqa: E501


        :return: The annual_energy_consumption_in_k_wh of this AdditionalFeatures.  # noqa: E501
        :rtype: int
        """
        return self._annual_energy_consumption_in_k_wh

    @annual_energy_consumption_in_k_wh.setter
    def annual_energy_consumption_in_k_wh(self, annual_energy_consumption_in_k_wh):
        """Sets the annual_energy_consumption_in_k_wh of this AdditionalFeatures.


        :param annual_energy_consumption_in_k_wh: The annual_energy_consumption_in_k_wh of this AdditionalFeatures.  # noqa: E501
        :type: int
        """

        self._annual_energy_consumption_in_k_wh = annual_energy_consumption_in_k_wh

    @property
    def floor_height_in_foot(self):
        """Gets the floor_height_in_foot of this AdditionalFeatures.  # noqa: E501


        :return: The floor_height_in_foot of this AdditionalFeatures.  # noqa: E501
        :rtype: float
        """
        return self._floor_height_in_foot

    @floor_height_in_foot.setter
    def floor_height_in_foot(self, floor_height_in_foot):
        """Sets the floor_height_in_foot of this AdditionalFeatures.


        :param floor_height_in_foot: The floor_height_in_foot of this AdditionalFeatures.  # noqa: E501
        :type: float
        """

        self._floor_height_in_foot = floor_height_in_foot

    @property
    def built_form(self):
        """Gets the built_form of this AdditionalFeatures.  # noqa: E501


        :return: The built_form of this AdditionalFeatures.  # noqa: E501
        :rtype: BuiltForm
        """
        return self._built_form

    @built_form.setter
    def built_form(self, built_form):
        """Sets the built_form of this AdditionalFeatures.


        :param built_form: The built_form of this AdditionalFeatures.  # noqa: E501
        :type: BuiltForm
        """

        self._built_form = built_form

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
