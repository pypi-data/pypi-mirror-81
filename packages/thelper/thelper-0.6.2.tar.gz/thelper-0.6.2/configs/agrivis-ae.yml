name: agrivis-ae-hunt
overwrite: true
datasets:
  agrivis_train:
    type: thelper.data.geo.agrivis.Hdf5AgricultureDataset
    params:
      hdf5_path: "data/agri_v2.hdf5"
      group_name: train
      copy_to_slurm_tmpdir: true
  agrivis_valid:
    type: thelper.data.geo.agrivis.Hdf5AgricultureDataset
    params:
      hdf5_path: "data/agri_v2.hdf5"
      group_name: val
      copy_to_slurm_tmpdir: true
  #agrivis_test:
  #  type: thelper.data.geo.agrivis.Hdf5AgricultureDataset
  #  params:
  #    hdf5_path: "data/agri_v2.hdf5"
  #    group_name: test
orion:
  report: true
loaders:
  batch_size: 64
  train_shuffle: true
  valid_shuffle: false
  test_shuffle: false
  valid_seed: 0
  test_seed: 0
  torch_seed: 0
  workers: 4
  pin_memory: true
  drop_last: false
  base_transforms:
    - operation: thelper.transforms.operations.Resize
      target_key: image
      params:
        dsize: [256, 256]
    - operation: thelper.transforms.operations.Resize
      target_key: [mask, label_map]
      params:
        dsize: [256, 256]
        interp: cv2.INTER_NEAREST
    - operation: torchvision.transforms.ToTensor
      target_key: [image, mask, label_map]
  train_augments:
    append: false
    transforms:
      - operation: albumentations.Compose
        params:
          Flip:
            p: 0.5
          RandomRotate90:
            p: 0.5
        image_key: image
        mask_key: label_map
  train_split:
    agrivis_train: 1.0
  valid_split:
    agrivis_valid: 1.0
  #test_split:
  #  agrivis_test: 1.0
model:
  type: thelper.nn.resnet.AutoEncoderSkipResNet
  params:
    block: thelper.nn.resnet.SqueezeExcitationBlock
    layers: 'orion~choices(["18", "34"])'
    strides: [1, 2, 2, 2]
    input_channels: 4
    flexible_input_res: false
    conv1_kernel_size: 5
    conv1_stride: 2
    pool_size: 4
    coordconv: 'orion~choices([0, 1])'
    output_pads: [1, 1, 1, 1, 1]
    decoder_dropout: 'orion~choices([0, 1])'
trainer:
  type: thelper.train.ae.AutoEncoderTrainer
  reconstr_display_count: 16
  reconstr_display_mean: loader.dataset.image_mean
  reconstr_display_stddev: loader.dataset.image_stddev
  reconstr_edges: true
  reconstr_scale: 'orion~uniform(0.10, 2.00)'
  classif_loss:
    type: torch.nn.CrossEntropyLoss
    weight_distribution:
      background: 'orion~uniform(0.20,1.00)'
      cloud_shadow: 'orion~uniform(1.00,2.00)'
      double_plant: 'orion~uniform(1.00,3.00)'
      planter_skip: 'orion~uniform(1.00,4.00)'
      standing_water: 'orion~uniform(1.00,2.50)'
      waterway: 'orion~uniform(1.00,2.50)'
      weed_cluster: 'orion~uniform(1.00,1.50)'
  save_freq: 100  # only keep best checkpoints
  use_tbx: true
  epochs: 8
  monitor: mIoU
  optimization:
    optimizer:
      type: torch.optim.Adam
      params:
        lr: 'orion~loguniform(1e-4, 1e-2)'
    scheduler:
      type: torch.optim.lr_scheduler.MultiStepLR
      params:
        milestones: [12, 20, 28]
        gamma: 0.5
  metrics:
    accuracy:
      type: thelper.optim.Accuracy
    mIoU:
      type: thelper.optim.IntersectionOverUnion
    background_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: background
    cloud_shadow_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: cloud_shadow
    double_plant_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: double_plant
    planter_skip_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: planter_skip
    standing_water_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: standing_water
    waterway_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: waterway
    weed_cluster_IoU:
      type: thelper.optim.IntersectionOverUnion
      params:
        target_names: weed_cluster
