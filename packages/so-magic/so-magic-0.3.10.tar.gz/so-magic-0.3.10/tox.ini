[tox]
envlist = clean,check,py36-cov,py37-cov,py38-cov,report,spell,docs
skip_missing_interpreters = true
requires = tox-conda

[testenv]
basepython = {clean,check,report,codecov,graphs,quickstart,spell,docs}: {env:TOXPYTHON:python3}
deps =
    -rrequirements/base.txt
    -rrequirements/dev.txt
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=0
    TEST_RESULTS_DIR={toxinidir}/test-results
    JUNIT_TEST_RESULTS=junit-test-results.xml
    BUILD_ARTIFACTS_DIR={toxinidir}/build-artifacts
passenv =
    *
    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
commands = {posargs:pytest --cov --cov-report=term-missing -vv --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}}


[support]
skip_install = True

[base]
commands_pre = python -c 'import nltk; nltk.download("stopwords"); nltk.download("punkt"); nltk.download("wordnet")'

[nocov]
commands = {posargs:python -m pytest -vv}

###### MAIN ######
[testenv:py36-cov]
basepython = {env:TOXPYTHON:python3.6}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}

[testenv:py37-cov]
basepython = {env:TOXPYTHON:python3.7}
conda_deps = somoclu
conda_channels = conda-forge
use_develop = true
commands_pre = {[base]commands_pre}

[testenv:py38-cov]
basepython = {env:TOXPYTHON:python3.8}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}


[testenv:py36]
basepython = {env:TOXPYTHON:python3.6}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}

[testenv:py37]
basepython = {env:TOXPYTHON:python3.7}
use_develop = true
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}

[testenv:py38]
conda_deps = somoclu
conda_channels = conda-forge
basepython = {env:TOXPYTHON:python3.8}
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}


###### SUPPORT ######
[testenv:clean]
deps = coverage
skip_install = True
commands = coverage erase

[testenv:check]
description = Run the build step (creates a source distribution and a wheel) and test the produced artefacts with twine
    to make sure the packaging configuration (to prepare for pypi) is valid
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
    twine
skip_install = True
commands =
    # python setup.py check --metadata --restructuredtext
    check-manifest
    python setup.py sdist bdist_wheel
    twine check dist/so-magic-*.tar.gz
    twine check dist/so_magic-*.whl


[testenv:report]
deps = coverage
skip_install = True
commands = {posargs:coverage report -i}

[testenv:codecov]
description = Send code coverage data to codecov.io
passenv = TOXENV CI TRAVIS TRAVIS_* CODECOV_*
deps = codecov
skip_install = True
commands = codecov


[testenv:graphs]
deps = pydeps
skip_install = True
passenv = HOME
commands_pre = python ./scripts/create-dir.py {env:BUILD_ARTIFACTS_DIR}
commands =
    pydeps src/so_magic --max-bacon=2 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic_1.svg
    pydeps src/so_magic --max-bacon=4 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic_2.svg
    pydeps src/so_magic --max-bacon=6 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic_3.svg
    pydeps src/so_magic --max-bacon=8 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic_4.svg
    pydeps src/so_magic --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic_5.svg

    pydeps src/so_magic/clustering --cluster --max-bacon=8 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic.clustering.svg
    pydeps src/so_magic/interfaces --cluster --max-bacon=8 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic.interfaces.svg
    pydeps src/so_magic/som --cluster --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic.som.svg
    pydeps src/so_magic/strain --cluster --max-bacon=8 --noshow -o {env:BUILD_ARTIFACTS_DIR}/so_magic.strain.svg


############## DOCS ##############
[docs-base]
deps =
    setuptools >= 40.0.0
    -rrequirements/docs.txt

[testenv:quickstart]
changedir = docs
use_develop = true
deps = {[docs-base]deps}
commands = sphinx-quickstart

[testenv:spell]
# requires the pyenchant C library (ie on Linux: sudo apt-get install python-pyenchant)
description = an environment to execute the spelling check before building the documentation
setenv =
    SPELLCHECK=1
deps =
    {[docs-base]deps}
    pyenchant
skip_install = true
commands = - sphinx-build -b spelling docs dist/docs

[testenv:docs]
description = an environment to build the documentation
deps = {[docs-base]deps}
skip_install = true
commands =
    sphinx-build {posargs:-E} -b doctest docs dist/docs
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs
