{"version":3,"sources":["webpack:///./src/common/search/search-input.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/get-card-stub-config.ts","webpack:///./src/panels/lovelace/editor/card-editor/hui-card-picker.ts"],"names":["customElement","property","type","Boolean","attribute","this","shadowRoot","querySelector","focus","html","_templateObject","classMap","no-underline","noUnderline","autofocus","filter","_filterInputChanged","noLabelFloat","_templateObject2","_clearSearch","_callee","value","regeneratorRuntime","wrap","_context","prev","next","fireEvent","String","stop","_callee2","e","_context2","_filterChanged","target","_callee3","_context3","css","_templateObject3","LitElement","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","Array","isArray","_step","_iterator","_createForOfIteratorHelper","s","n","done","entityId","add","err","f","addEntityId","entity","camera_image","tap_action","hold_action","computeUsedEntities","config","Set","views","forEach","view","addEntities","obj","card","cards","elements","badges","badge","calcUnusedEntities","hass","usedEntities","unusedEntities","_i","_Object$keys","Object","keys","states","length","has","includes","split","computeUnusedEntities","getCardStubConfig","_ref","mark","entitiesFallback","cardConfig","elClass","classStubConfig","getCardElementClass","sent","getStubConfig","assign","abrupt","_x","_x2","_x3","_x4","apply","arguments","previewCards","nonPreviewCards","_decorate","_initialize","_LitElement","F","_LitElement2","_inherits","HuiCardPicker","_super","_createSuper","_this","_classCallCheck","_len","args","_key","call","concat","_assertThisInitialized","d","kind","decorators","key","memoizeOne","cardElements","map","cardElement","fuse","Fuse","caseSensitive","minMatchCharLength","threshold","search","lovelace","_unusedEntities","_usedEntities","_filter","_handleSearchChange","_filterCards","_cards","element","_cardPicked","localize","changedProps","oldHass","get","language","_this2","_toConsumableArray","eid","UNAVAILABLE_STATES","state","_loadCards","_this3","name","description","noElement","customCards","ccard","isCustom","until","_renderCardElement","_templateObject4","ev","detail","requestUpdate","static","_templateObject5","currentTarget","_this4","createCardElement","addEventListener","stopPropagation","parentElement","replaceChild","_createCardElement","once","_renderCardElement2","customCard","getCustomCardEntry","undefined","CUSTOM_TYPE_PREFIX","preview","_templateObject6","tagName"],"mappings":"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","file":"chunk.7415a2711ef4c6313f02.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { html, TemplateResult } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../components/ha-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <style>\n        .no-underline:not(.focused) {\n          --paper-input-container-underline: {\n            display: none;\n            height: 0;\n          }\n        }\n      </style>\n      <paper-input\n        class=${classMap({ \"no-underline\": this.noUnderline })}\n        .autofocus=${this.autofocus}\n        label=\"Search\"\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <ha-icon icon=\"hass:magnify\" slot=\"prefix\" class=\"prefix\"></ha-icon>\n        ${this.filter &&\n        html`\n          <paper-icon-button\n            slot=\"suffix\"\n            class=\"suffix\"\n            @click=${this._clearSearch}\n            icon=\"hass:close\"\n            alt=\"Clear\"\n            title=\"Clear\"\n          ></paper-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-icon {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import { ActionConfig, LovelaceConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities && Array.isArray(obj.entities)) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards && Array.isArray(obj.cards)) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements && Array.isArray(obj.elements)) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges && Array.isArray(obj.badges)) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nexport const computeUsedEntities = (config: LovelaceConfig): Set<string> => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const calcUnusedEntities = (\n  hass: HomeAssistant,\n  usedEntities: Set<string>\n): Set<string> => {\n  const unusedEntities: Set<string> = new Set();\n\n  for (const entity of Object.keys(hass.states)) {\n    if (\n      !usedEntities.has(entity) &&\n      !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    ) {\n      unusedEntities.add(entity);\n    }\n  }\n\n  return unusedEntities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): Set<string> => {\n  const usedEntities = computeUsedEntities(config);\n  const unusedEntities = calcUnusedEntities(hass, usedEntities);\n  return unusedEntities;\n};\n","import { LovelaceCardConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { getCardElementClass } from \"../create-element/create-card-element\";\n\nexport const getCardStubConfig = async (\n  hass: HomeAssistant,\n  type: string,\n  entities: string[],\n  entitiesFallback: string[]\n): Promise<LovelaceCardConfig> => {\n  let cardConfig: LovelaceCardConfig = { type };\n\n  const elClass = await getCardElementClass(type);\n\n  if (elClass && elClass.getStubConfig) {\n    const classStubConfig = elClass.getStubConfig(\n      hass,\n      entities,\n      entitiesFallback\n    );\n\n    cardConfig = { ...cardConfig, ...classStubConfig };\n  }\n\n  return cardConfig;\n};\n","import * as Fuse from \"fuse.js\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { until } from \"lit-html/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../common/search/search-input\";\nimport { UNAVAILABLE_STATES } from \"../../../../data/entity\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\nimport {\n  CustomCardEntry,\n  customCards,\n  CUSTOM_TYPE_PREFIX,\n  getCustomCardEntry,\n} from \"../../../../data/lovelace_custom_cards\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  calcUnusedEntities,\n  computeUsedEntities,\n} from \"../../common/compute-unused-entities\";\nimport { createCardElement } from \"../../create-element/create-card-element\";\nimport { LovelaceCard } from \"../../types\";\nimport { getCardStubConfig } from \"../get-card-stub-config\";\nimport { CardPickTarget } from \"../types\";\n\ninterface Card {\n  type: string;\n  name?: string;\n  description?: string;\n  noElement?: boolean;\n  isCustom?: boolean;\n}\n\ninterface CardElement {\n  card: Card;\n  element: TemplateResult;\n}\n\nconst previewCards: string[] = [\n  \"alarm-panel\",\n  \"button\",\n  \"entities\",\n  \"entity\",\n  \"gauge\",\n  \"glance\",\n  \"history-graph\",\n  \"light\",\n  \"map\",\n  \"markdown\",\n  \"media-control\",\n  \"picture\",\n  \"picture-elements\",\n  \"picture-entity\",\n  \"picture-glance\",\n  \"plant-status\",\n  \"sensor\",\n  \"thermostat\",\n  \"weather-forecast\",\n];\n\nconst nonPreviewCards: string[] = [\n  \"conditional\",\n  \"entity-filter\",\n  \"horizontal-stack\",\n  \"iframe\",\n  \"vertical-stack\",\n  \"shopping-list\",\n];\n\n@customElement(\"hui-card-picker\")\nexport class HuiCardPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _cards: CardElement[] = [];\n\n  public lovelace?: LovelaceConfig;\n\n  public cardPicked?: (cardConf: LovelaceCardConfig) => void;\n\n  private _filter?: string;\n\n  private _unusedEntities?: string[];\n\n  private _usedEntities?: string[];\n\n  private _filterCards = memoizeOne(\n    (cardElements: CardElement[], filter?: string): CardElement[] => {\n      if (filter) {\n        let cards = cardElements.map(\n          (cardElement: CardElement) => cardElement.card\n        );\n        const options: Fuse.FuseOptions<Card> = {\n          keys: [\"type\", \"name\", \"description\"],\n          caseSensitive: false,\n          minMatchCharLength: 2,\n          threshold: 0.2,\n        };\n        const fuse = new Fuse(cards, options);\n        cards = fuse.search(filter);\n        cardElements = cardElements.filter((cardElement: CardElement) =>\n          cards.includes(cardElement.card)\n        );\n      }\n      return cardElements;\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.lovelace ||\n      !this._unusedEntities ||\n      !this._usedEntities\n    ) {\n      return html``;\n    }\n\n    return html`\n      <search-input\n        .filter=${this._filter}\n        no-label-float\n        @value-changed=${this._handleSearchChange}\n      ></search-input>\n      <div class=\"cards-container\">\n        ${this._filterCards(this._cards, this._filter).map(\n          (cardElement: CardElement) => cardElement.element\n        )}\n      </div>\n      <div class=\"cards-container\">\n        <div\n          class=\"card\"\n          @click=\"${this._cardPicked}\"\n          .config=\"${{ type: \"\" }}\"\n        >\n          <div class=\"preview description\">\n            ${this.hass!.localize(\n              `ui.panel.lovelace.editor.card.generic.manual_description`\n            )}\n          </div>\n          <div class=\"card-header\">\n            ${this.hass!.localize(\n              `ui.panel.lovelace.editor.card.generic.manual`\n            )}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass) {\n      return true;\n    }\n\n    if (oldHass.language !== this.hass!.language) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n\n    const usedEntities = computeUsedEntities(this.lovelace);\n    const unusedEntities = calcUnusedEntities(this.hass, usedEntities);\n\n    this._usedEntities = [...usedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n    this._unusedEntities = [...unusedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n\n    this._loadCards();\n  }\n\n  private _loadCards() {\n    let cards: Card[] = previewCards\n      .map((type: string) => ({\n        type,\n        name: this.hass!.localize(`ui.panel.lovelace.editor.card.${type}.name`),\n        description: this.hass!.localize(\n          `ui.panel.lovelace.editor.card.${type}.description`\n        ),\n      }))\n      .concat(\n        nonPreviewCards.map((type: string) => ({\n          type,\n          name: this.hass!.localize(\n            `ui.panel.lovelace.editor.card.${type}.name`\n          ),\n          description: this.hass!.localize(\n            `ui.panel.lovelace.editor.card.${type}.description`\n          ),\n          noElement: true,\n        }))\n      );\n    if (customCards.length > 0) {\n      cards = cards.concat(\n        customCards.map((ccard: CustomCardEntry) => ({\n          type: ccard.type,\n          name: ccard.name,\n          description: ccard.description,\n          noElement: true,\n          isCustom: true,\n        }))\n      );\n    }\n    this._cards = cards.map((card: Card) => ({\n      card: card,\n      element: html`${until(\n        this._renderCardElement(card),\n        html`\n          <div class=\"card spinner\">\n            <paper-spinner active alt=\"Loading\"></paper-spinner>\n          </div>\n        `\n      )}`,\n    }));\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    this.requestUpdate();\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .cards-container {\n          display: grid;\n          grid-gap: 8px 8px;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          margin-top: 20px;\n        }\n\n        .card {\n          height: 100%;\n          max-width: 500px;\n          display: flex;\n          flex-direction: column;\n          border-radius: 4px;\n          border: 1px solid var(--divider-color);\n          background: var(--primary-background-color, #fafafa);\n          cursor: pointer;\n          box-sizing: border-box;\n          position: relative;\n        }\n\n        .card-header {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: 16px;\n          letter-spacing: -0.012em;\n          line-height: 20px;\n          padding: 12px 16px;\n          display: block;\n          text-align: center;\n          background: var(\n            --ha-card-background,\n            var(--paper-card-background-color, white)\n          );\n          border-radius: 0 0 4px 4px;\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .preview {\n          pointer-events: none;\n          margin: 20px;\n          flex-grow: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .preview > :first-child {\n          zoom: 0.6;\n          display: block;\n          width: 100%;\n        }\n\n        .description {\n          text-align: center;\n        }\n\n        .spinner {\n          align-items: center;\n          justify-content: center;\n        }\n\n        .overlay {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n        }\n      `,\n    ];\n  }\n\n  private _cardPicked(ev: Event): void {\n    const config: LovelaceCardConfig = (ev.currentTarget! as CardPickTarget)\n      .config;\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _createCardElement(cardConfig: LovelaceCardConfig) {\n    const element = createCardElement(cardConfig) as LovelaceCard;\n    element.hass = this.hass;\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev) => {\n        ev.stopPropagation();\n        element.parentElement!.replaceChild(\n          this._createCardElement(cardConfig),\n          element\n        );\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  private async _renderCardElement(card: Card): Promise<TemplateResult> {\n    let { type } = card;\n    const { noElement, isCustom, name, description } = card;\n    const customCard = isCustom ? getCustomCardEntry(type) : undefined;\n    if (isCustom) {\n      type = `${CUSTOM_TYPE_PREFIX}${type}`;\n    }\n\n    let element: LovelaceCard | undefined;\n    let cardConfig: LovelaceCardConfig = { type };\n\n    if (this.hass && this.lovelace) {\n      cardConfig = await getCardStubConfig(\n        this.hass,\n        type,\n        this._unusedEntities!,\n        this._usedEntities!\n      );\n\n      if (!noElement || customCard?.preview) {\n        element = this._createCardElement(cardConfig);\n      }\n    }\n\n    return html`\n      <div class=\"card\">\n        <div\n          class=\"overlay\"\n          @click=${this._cardPicked}\n          .config=${cardConfig}\n        ></div>\n        <div\n          class=\"preview ${classMap({\n            description: !element || element.tagName === \"HUI-ERROR-CARD\",\n          })}\"\n        >\n          ${element && element.tagName !== \"HUI-ERROR-CARD\"\n            ? element\n            : customCard\n            ? customCard.description ||\n              this.hass!.localize(\n                `ui.panel.lovelace.editor.cardpicker.no_description`\n              )\n            : description}\n        </div>\n        <div class=\"card-header\">\n          ${customCard\n            ? `${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.custom_card\"\n              )}: ${customCard.name || customCard.type}`\n            : name}\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-picker\": HuiCardPicker;\n  }\n}\n"],"sourceRoot":""}