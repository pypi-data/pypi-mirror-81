# coding: utf-8

"""
    ENBISYS AVM API

    API for ENBISYS AVM-platform  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: avm@enbisys.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FloorLevel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BASEMENT = "basement"
    GROUND = "ground"
    MIDDLE = "middle"
    TOP = "top"
    FLOOR_1 = "floor_1"
    FLOOR_2 = "floor_2"
    FLOOR_3 = "floor_3"
    FLOOR_4 = "floor_4"
    FLOOR_5 = "floor_5"
    FLOOR_6 = "floor_6"
    FLOOR_7 = "floor_7"
    FLOOR_8 = "floor_8"
    FLOOR_9 = "floor_9"
    FLOOR_10 = "floor_10"
    FLOOR_11 = "floor_11"
    FLOOR_12 = "floor_12"
    FLOOR_13 = "floor_13"
    FLOOR_14 = "floor_14"
    FLOOR_15 = "floor_15"
    FLOOR_16 = "floor_16"
    FLOOR_17 = "floor_17"
    FLOOR_18 = "floor_18"
    FLOOR_19 = "floor_19"
    FLOOR_20 = "floor_20"
    FLOOR_21_OR_ABOVE = "floor_21_or_above"

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """FloorLevel - a model defined in OpenAPI"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FloorLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
