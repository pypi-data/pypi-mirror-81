# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDICOMOrientImageFilterPython
else:
    import _itkDICOMOrientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDICOMOrientImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDICOMOrientImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkDICOMOrientImageFilterICF3_New():
    return itkDICOMOrientImageFilterICF3.New()

class itkDICOMOrientImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkDICOMOrientImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICF3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICF3

        Create a new object of the class itkDICOMOrientImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICF3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_swigregister(itkDICOMOrientImageFilterICF3)
itkDICOMOrientImageFilterICF3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3___New_orig__
itkDICOMOrientImageFilterICF3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_cast


def itkDICOMOrientImageFilterICVF23_New():
    return itkDICOMOrientImageFilterICVF23.New()

class itkDICOMOrientImageFilterICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF23
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF23

        Create a new object of the class itkDICOMOrientImageFilterICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF23 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_swigregister(itkDICOMOrientImageFilterICVF23)
itkDICOMOrientImageFilterICVF23___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23___New_orig__
itkDICOMOrientImageFilterICVF23_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_cast


def itkDICOMOrientImageFilterICVF33_New():
    return itkDICOMOrientImageFilterICVF33.New()

class itkDICOMOrientImageFilterICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF33
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF33

        Create a new object of the class itkDICOMOrientImageFilterICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF33 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_swigregister(itkDICOMOrientImageFilterICVF33)
itkDICOMOrientImageFilterICVF33___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33___New_orig__
itkDICOMOrientImageFilterICVF33_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_cast


def itkDICOMOrientImageFilterICVF43_New():
    return itkDICOMOrientImageFilterICVF43.New()

class itkDICOMOrientImageFilterICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF43
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF43

        Create a new object of the class itkDICOMOrientImageFilterICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF43 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_swigregister(itkDICOMOrientImageFilterICVF43)
itkDICOMOrientImageFilterICVF43___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43___New_orig__
itkDICOMOrientImageFilterICVF43_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_cast


def itkDICOMOrientImageFilterID3_New():
    return itkDICOMOrientImageFilterID3.New()

class itkDICOMOrientImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkDICOMOrientImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterID3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterID3

        Create a new object of the class itkDICOMOrientImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterID3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_swigregister(itkDICOMOrientImageFilterID3)
itkDICOMOrientImageFilterID3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3___New_orig__
itkDICOMOrientImageFilterID3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_cast


def itkDICOMOrientImageFilterIF3_New():
    return itkDICOMOrientImageFilterIF3.New()

class itkDICOMOrientImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIF3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIF3

        Create a new object of the class itkDICOMOrientImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIF3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_swigregister(itkDICOMOrientImageFilterIF3)
itkDICOMOrientImageFilterIF3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3___New_orig__
itkDICOMOrientImageFilterIF3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_cast


def itkDICOMOrientImageFilterIRGBAUC3_New():
    return itkDICOMOrientImageFilterIRGBAUC3.New()

class itkDICOMOrientImageFilterIRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIRGBAUC3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIRGBAUC3

        Create a new object of the class itkDICOMOrientImageFilterIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIRGBAUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_swigregister(itkDICOMOrientImageFilterIRGBAUC3)
itkDICOMOrientImageFilterIRGBAUC3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3___New_orig__
itkDICOMOrientImageFilterIRGBAUC3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_cast


def itkDICOMOrientImageFilterIRGBUC3_New():
    return itkDICOMOrientImageFilterIRGBUC3.New()

class itkDICOMOrientImageFilterIRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIRGBUC3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIRGBUC3

        Create a new object of the class itkDICOMOrientImageFilterIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIRGBUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_swigregister(itkDICOMOrientImageFilterIRGBUC3)
itkDICOMOrientImageFilterIRGBUC3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3___New_orig__
itkDICOMOrientImageFilterIRGBUC3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_cast


def itkDICOMOrientImageFilterISS3_New():
    return itkDICOMOrientImageFilterISS3.New()

class itkDICOMOrientImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkDICOMOrientImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterISS3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterISS3

        Create a new object of the class itkDICOMOrientImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterISS3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_swigregister(itkDICOMOrientImageFilterISS3)
itkDICOMOrientImageFilterISS3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3___New_orig__
itkDICOMOrientImageFilterISS3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_cast


def itkDICOMOrientImageFilterIUC3_New():
    return itkDICOMOrientImageFilterIUC3.New()

class itkDICOMOrientImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIUC3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIUC3

        Create a new object of the class itkDICOMOrientImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_swigregister(itkDICOMOrientImageFilterIUC3)
itkDICOMOrientImageFilterIUC3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3___New_orig__
itkDICOMOrientImageFilterIUC3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_cast


def itkDICOMOrientImageFilterIUS3_New():
    return itkDICOMOrientImageFilterIUS3.New()

class itkDICOMOrientImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIUS3
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIUS3

        Create a new object of the class itkDICOMOrientImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIUS3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_swigregister(itkDICOMOrientImageFilterIUS3)
itkDICOMOrientImageFilterIUS3___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3___New_orig__
itkDICOMOrientImageFilterIUS3_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_cast


def itkDICOMOrientImageFilterIVF23_New():
    return itkDICOMOrientImageFilterIVF23.New()

class itkDICOMOrientImageFilterIVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF23
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF23

        Create a new object of the class itkDICOMOrientImageFilterIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF23 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_swigregister(itkDICOMOrientImageFilterIVF23)
itkDICOMOrientImageFilterIVF23___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23___New_orig__
itkDICOMOrientImageFilterIVF23_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_cast


def itkDICOMOrientImageFilterIVF33_New():
    return itkDICOMOrientImageFilterIVF33.New()

class itkDICOMOrientImageFilterIVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF33
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF33

        Create a new object of the class itkDICOMOrientImageFilterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF33 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_swigregister(itkDICOMOrientImageFilterIVF33)
itkDICOMOrientImageFilterIVF33___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33___New_orig__
itkDICOMOrientImageFilterIVF33_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_cast


def itkDICOMOrientImageFilterIVF43_New():
    return itkDICOMOrientImageFilterIVF43.New()

class itkDICOMOrientImageFilterIVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_Clone)
    GetInputCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetInputCoordinateOrientation)
    GetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetDesiredCoordinateOrientation)
    SetDesiredCoordinateOrientation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_SetDesiredCoordinateOrientation)
    SetDesiredCoordinateDirection = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_SetDesiredCoordinateDirection)
    GetPermuteOrder = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetPermuteOrder)
    GetFlipAxes = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetFlipAxes)
    GenerateOutputInformation = _swig_new_instance_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GenerateOutputInformation)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF43
    cast = _swig_new_static_method(_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF43

        Create a new object of the class itkDICOMOrientImageFilterIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF43 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_swigregister(itkDICOMOrientImageFilterIVF43)
itkDICOMOrientImageFilterIVF43___New_orig__ = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43___New_orig__
itkDICOMOrientImageFilterIVF43_cast = _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def dicom_orient_image_filter(*args, **kwargs):
    """Procedural interface for DICOMOrientImageFilter"""
    import itk
    instance = itk.DICOMOrientImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def dicom_orient_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DICOMOrientImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DICOMOrientImageFilter.values()[0]
    else:
        filter_object = itk.DICOMOrientImageFilter

    dicom_orient_image_filter.__doc__ = filter_object.__doc__
    dicom_orient_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    dicom_orient_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DICOMOrientImageFilter, itkTemplate.itkTemplate):
        dicom_orient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        dicom_orient_image_filter.__doc__ += "\n"
        dicom_orient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        dicom_orient_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



