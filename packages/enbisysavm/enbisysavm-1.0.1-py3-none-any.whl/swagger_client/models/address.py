# coding: utf-8

"""
    ENBISYS AVM API

    API for ENBISYS AVM-platform  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: avm@enbisys.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'street': 'str',
        'postcode': 'str',
        'city': 'str',
        'building_name': 'str',
        'building_number': 'str'
    }

    attribute_map = {
        'address_id': 'addressId',
        'street': 'street',
        'postcode': 'postcode',
        'city': 'city',
        'building_name': 'buildingName',
        'building_number': 'buildingNumber'
    }

    def __init__(self, address_id=None, street=None, postcode=None, city=None, building_name=None, building_number=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._street = None
        self._postcode = None
        self._city = None
        self._building_name = None
        self._building_number = None
        self.discriminator = None
        if address_id is not None:
            self.address_id = address_id
        if street is not None:
            self.street = street
        if postcode is not None:
            self.postcode = postcode
        if city is not None:
            self.city = city
        if building_name is not None:
            self.building_name = building_name
        if building_number is not None:
            self.building_number = building_number

    @property
    def address_id(self):
        """Gets the address_id of this Address.  # noqa: E501

        Address id  # noqa: E501

        :return: The address_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this Address.

        Address id  # noqa: E501

        :param address_id: The address_id of this Address.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        Street  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Street  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def postcode(self):
        """Gets the postcode of this Address.  # noqa: E501

        Postcode  # noqa: E501

        :return: The postcode of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Address.

        Postcode  # noqa: E501

        :param postcode: The postcode of this Address.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        City  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def building_name(self):
        """Gets the building_name of this Address.  # noqa: E501

        Name of building  # noqa: E501

        :return: The building_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this Address.

        Name of building  # noqa: E501

        :param building_name: The building_name of this Address.  # noqa: E501
        :type: str
        """

        self._building_name = building_name

    @property
    def building_number(self):
        """Gets the building_number of this Address.  # noqa: E501

        Number of building  # noqa: E501

        :return: The building_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this Address.

        Number of building  # noqa: E501

        :param building_number: The building_number of this Address.  # noqa: E501
        :type: str
        """

        self._building_number = building_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
