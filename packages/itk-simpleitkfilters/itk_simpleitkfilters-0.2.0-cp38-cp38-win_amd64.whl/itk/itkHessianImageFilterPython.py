# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHessianImageFilterPython
else:
    import _itkHessianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHessianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHessianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkVectorImagePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkHessianImageFilterID2_New():
    return itkHessianImageFilterID2.New()

class itkHessianImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterID2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterID2
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterID2

        Create a new object of the class itkHessianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterID2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterID2_swigregister(itkHessianImageFilterID2)
itkHessianImageFilterID2___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterID2___New_orig__
itkHessianImageFilterID2_cast = _itkHessianImageFilterPython.itkHessianImageFilterID2_cast


def itkHessianImageFilterID3_New():
    return itkHessianImageFilterID3.New()

class itkHessianImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterID3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterID3
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterID3

        Create a new object of the class itkHessianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterID3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterID3_swigregister(itkHessianImageFilterID3)
itkHessianImageFilterID3___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterID3___New_orig__
itkHessianImageFilterID3_cast = _itkHessianImageFilterPython.itkHessianImageFilterID3_cast


def itkHessianImageFilterIF2_New():
    return itkHessianImageFilterIF2.New()

class itkHessianImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIF2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIF2
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIF2

        Create a new object of the class itkHessianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIF2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIF2_swigregister(itkHessianImageFilterIF2)
itkHessianImageFilterIF2___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIF2___New_orig__
itkHessianImageFilterIF2_cast = _itkHessianImageFilterPython.itkHessianImageFilterIF2_cast


def itkHessianImageFilterIF3_New():
    return itkHessianImageFilterIF3.New()

class itkHessianImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIF3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIF3
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIF3

        Create a new object of the class itkHessianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIF3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIF3_swigregister(itkHessianImageFilterIF3)
itkHessianImageFilterIF3___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIF3___New_orig__
itkHessianImageFilterIF3_cast = _itkHessianImageFilterPython.itkHessianImageFilterIF3_cast


def itkHessianImageFilterISS2_New():
    return itkHessianImageFilterISS2.New()

class itkHessianImageFilterISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterISS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterISS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterISS2
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterISS2

        Create a new object of the class itkHessianImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterISS2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterISS2_swigregister(itkHessianImageFilterISS2)
itkHessianImageFilterISS2___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterISS2___New_orig__
itkHessianImageFilterISS2_cast = _itkHessianImageFilterPython.itkHessianImageFilterISS2_cast


def itkHessianImageFilterISS3_New():
    return itkHessianImageFilterISS3.New()

class itkHessianImageFilterISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterISS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterISS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterISS3
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterISS3

        Create a new object of the class itkHessianImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterISS3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterISS3_swigregister(itkHessianImageFilterISS3)
itkHessianImageFilterISS3___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterISS3___New_orig__
itkHessianImageFilterISS3_cast = _itkHessianImageFilterPython.itkHessianImageFilterISS3_cast


def itkHessianImageFilterIUC2_New():
    return itkHessianImageFilterIUC2.New()

class itkHessianImageFilterIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUC2
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUC2

        Create a new object of the class itkHessianImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUC2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUC2_swigregister(itkHessianImageFilterIUC2)
itkHessianImageFilterIUC2___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIUC2___New_orig__
itkHessianImageFilterIUC2_cast = _itkHessianImageFilterPython.itkHessianImageFilterIUC2_cast


def itkHessianImageFilterIUC3_New():
    return itkHessianImageFilterIUC3.New()

class itkHessianImageFilterIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUC3
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUC3

        Create a new object of the class itkHessianImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUC3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUC3_swigregister(itkHessianImageFilterIUC3)
itkHessianImageFilterIUC3___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIUC3___New_orig__
itkHessianImageFilterIUC3_cast = _itkHessianImageFilterPython.itkHessianImageFilterIUC3_cast


def itkHessianImageFilterIUS2_New():
    return itkHessianImageFilterIUS2.New()

class itkHessianImageFilterIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUS2
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUS2

        Create a new object of the class itkHessianImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUS2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUS2_swigregister(itkHessianImageFilterIUS2)
itkHessianImageFilterIUS2___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIUS2___New_orig__
itkHessianImageFilterIUS2_cast = _itkHessianImageFilterPython.itkHessianImageFilterIUS2_cast


def itkHessianImageFilterIUS3_New():
    return itkHessianImageFilterIUS3.New()

class itkHessianImageFilterIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUS3
    cast = _swig_new_static_method(_itkHessianImageFilterPython.itkHessianImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUS3

        Create a new object of the class itkHessianImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUS3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUS3_swigregister(itkHessianImageFilterIUS3)
itkHessianImageFilterIUS3___New_orig__ = _itkHessianImageFilterPython.itkHessianImageFilterIUS3___New_orig__
itkHessianImageFilterIUS3_cast = _itkHessianImageFilterPython.itkHessianImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hessian_image_filter(*args, **kwargs):
    """Procedural interface for HessianImageFilter"""
    import itk
    instance = itk.HessianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hessian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HessianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HessianImageFilter.values()[0]
    else:
        filter_object = itk.HessianImageFilter

    hessian_image_filter.__doc__ = filter_object.__doc__
    hessian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hessian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HessianImageFilter, itkTemplate.itkTemplate):
        hessian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        hessian_image_filter.__doc__ += "\n"
        hessian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        hessian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



