{"version":3,"sources":["webpack:///./src/panels/lovelace/cards/hui-gauge-card.ts"],"names":["severityMap","red","green","yellow","normal","customElement","HuiGaugeCard","_LitElement","[object Object]","args","super","_initialize","this","async","Promise","all","__webpack_require__","e","then","bind","document","createElement","hass","entities","entitiesFallback","type","entity","findEntities","stateObj","isNaN","Number","state","property","config","Error","isValidEntityId","_config","Object","assign","min","max","_get","_getPrototypeOf","prototype","call","_setBaseUnit","html","states","localize","_handleClick","styleMap","--base-unit","_baseUnit","transform","_translateTurn","background-color","_computeSeverity","unit","attributes","unit_of_measurement","name","computeStateName","changedProps","hasConfigOrEntityChanged","_updated","classList","add","oldHass","get","oldConfig","themes","theme","applyThemesOnElement","isConnected","baseUnit","_computeBaseUnit","numberValue","sections","severity","sortable","keys","map","sort","a","b","value","Math","clientWidth","fireEvent","entityId","css","LitElement"],"mappings":"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","file":"chunk.97c67db6002b7e26b639.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket/dist/types\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport \"../../../components/ha-card\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entites\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { GaugeCardConfig } from \"./types\";\n\nexport const severityMap = {\n  red: \"var(--label-badge-red)\",\n  green: \"var(--label-badge-green)\",\n  yellow: \"var(--label-badge-yellow)\",\n  normal: \"var(--label-badge-blue)\",\n};\n\n@customElement(\"hui-gauge-card\")\nclass HuiGaugeCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\n      /* webpackChunkName: \"hui-gauge-card-editor\" */ \"../editor/config-elements/hui-gauge-card-editor\"\n    );\n    return document.createElement(\"hui-gauge-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): GaugeCardConfig {\n    const includeDomains = [\"sensor\"];\n    const maxEntities = 1;\n    const entityFilter = (stateObj: HassEntity): boolean => {\n      return !isNaN(Number(stateObj.state));\n    };\n\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains,\n      entityFilter\n    );\n\n    return { type: \"gauge\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _baseUnit = \"50px\";\n\n  @property() private _config?: GaugeCardConfig;\n\n  private _updated?: boolean;\n\n  public getCardSize(): number {\n    return 2;\n  }\n\n  public setConfig(config: GaugeCardConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Invalid card configuration\");\n    }\n    if (!isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid Entity\");\n    }\n    this._config = { min: 0, max: 100, ...config };\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._setBaseUnit();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const state = Number(stateObj.state);\n\n    if (isNaN(state)) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_non_numeric\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <ha-card\n        @click=\"${this._handleClick}\"\n        tabindex=\"0\"\n        style=${styleMap({\n          \"--base-unit\": this._baseUnit,\n        })}\n      >\n        <div class=\"container\">\n          <div class=\"gauge-a\"></div>\n          <div\n            class=\"gauge-c\"\n            style=${styleMap({\n              transform: `rotate(${this._translateTurn(state)}turn)`,\n              \"background-color\": this._computeSeverity(state),\n            })}\n          ></div>\n          <div class=\"gauge-b\"></div>\n        </div>\n        <div class=\"gauge-data\">\n          <div id=\"percent\">\n            ${stateObj.state}\n            ${this._config.unit ||\n            stateObj.attributes.unit_of_measurement ||\n            \"\"}\n          </div>\n          <div id=\"name\">\n            ${this._config.name || computeStateName(stateObj)}\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected firstUpdated(): void {\n    this._updated = true;\n    this._setBaseUnit();\n    // eslint-disable-next-line wc/no-self-class\n    this.classList.add(\"init\");\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | GaugeCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _setBaseUnit(): void {\n    if (!this.isConnected || !this._updated) {\n      return;\n    }\n    const baseUnit = this._computeBaseUnit();\n    if (baseUnit !== \"0px\") {\n      this._baseUnit = baseUnit;\n    }\n  }\n\n  private _computeSeverity(numberValue: number): string {\n    const sections = this._config!.severity;\n\n    if (!sections) {\n      return severityMap.normal;\n    }\n\n    const sectionsArray = Object.keys(sections);\n    const sortable = sectionsArray.map((severity) => [\n      severity,\n      sections[severity],\n    ]);\n\n    for (const severity of sortable) {\n      if (severityMap[severity[0]] == null || isNaN(severity[1])) {\n        return severityMap.normal;\n      }\n    }\n    sortable.sort((a, b) => a[1] - b[1]);\n\n    if (numberValue >= sortable[0][1] && numberValue < sortable[1][1]) {\n      return severityMap[sortable[0][0]];\n    }\n    if (numberValue >= sortable[1][1] && numberValue < sortable[2][1]) {\n      return severityMap[sortable[1][0]];\n    }\n    if (numberValue >= sortable[2][1]) {\n      return severityMap[sortable[2][0]];\n    }\n    return severityMap.normal;\n  }\n\n  private _translateTurn(value: number): number {\n    const { min, max } = this._config!;\n    const maxTurnValue = Math.min(Math.max(value, min!), max!);\n    return (5 * (maxTurnValue - min!)) / (max! - min!) / 10;\n  }\n\n  private _computeBaseUnit(): string {\n    return this.clientWidth < 200 ? this.clientWidth / 5 + \"px\" : \"50px\";\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", { entityId: this._config!.entity });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-card {\n        cursor: pointer;\n        padding: 16px 16px 0 16px;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        justify-content: center;\n        align-items: center;\n      }\n      ha-card:focus {\n        outline: none;\n        background: var(--divider-color);\n      }\n      .container {\n        width: calc(var(--base-unit) * 4);\n        height: calc(var(--base-unit) * 2);\n        overflow: hidden;\n        position: relative;\n      }\n      .gauge-a {\n        position: absolute;\n        background-color: var(--primary-background-color);\n        width: calc(var(--base-unit) * 4);\n        height: calc(var(--base-unit) * 2);\n        top: 0%;\n        border-radius: calc(var(--base-unit) * 2.5) calc(var(--base-unit) * 2.5)\n          0px 0px;\n      }\n      .gauge-b {\n        position: absolute;\n        background-color: var(--paper-card-background-color);\n        width: calc(var(--base-unit) * 2.5);\n        height: calc(var(--base-unit) * 1.25);\n        top: calc(var(--base-unit) * 0.75);\n        margin-left: calc(var(--base-unit) * 0.75);\n        margin-right: auto;\n        border-radius: calc(var(--base-unit) * 2.5) calc(var(--base-unit) * 2.5)\n          0px 0px;\n      }\n      .gauge-c {\n        position: absolute;\n        background-color: var(--label-badge-blue);\n        width: calc(var(--base-unit) * 4);\n        height: calc(var(--base-unit) * 2);\n        top: calc(var(--base-unit) * 2);\n        margin-left: auto;\n        margin-right: auto;\n        border-radius: 0px 0px calc(var(--base-unit) * 2)\n          calc(var(--base-unit) * 2);\n        transform-origin: center top;\n      }\n      .init .gauge-c {\n        transition: all 1.3s ease-in-out;\n      }\n      .gauge-data {\n        text-align: center;\n        color: var(--primary-text-color);\n        line-height: calc(var(--base-unit) * 0.3);\n        width: 100%;\n        position: relative;\n        top: calc(var(--base-unit) * -0.5);\n      }\n      .init .gauge-data {\n        transition: all 1s ease-out;\n      }\n      .gauge-data #percent {\n        font-size: calc(var(--base-unit) * 0.55);\n        line-height: calc(var(--base-unit) * 0.55);\n      }\n      .gauge-data #name {\n        padding-top: calc(var(--base-unit) * 0.15);\n        font-size: calc(var(--base-unit) * 0.3);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-gauge-card\": HuiGaugeCard;\n  }\n}\n"],"sourceRoot":""}