Metadata-Version: 2.1
Name: pybase-db
Version: 1.0.0.dev0
Summary: PyBase is a database manager for YAML, JSON, Bytes and SQLite3. Very poweful, simple and effective.
Home-page: https://pybase.github.io/
Author: NTBBloodbath
Author-email: bloodbathalchemist@protonmail.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Database
Classifier: Topic :: Database :: Database Engines/Servers
Classifier: Topic :: Software Development :: Libraries
Description-Content-Type: text/markdown
Requires-Dist: psutil (>=5.7.2)
Requires-Dist: pyyaml (>=5.3.1)
Requires-Dist: rich (>=8.0.0)

# PyBase - DB Manager
[![Downloads](https://pepy.tech/badge/pybase-db)](https://pepy.tech/project/pybase-db)
![Version](https://img.shields.io/pypi/v/pybase-db?color=green&label=version)
![Issues](https://img.shields.io/github/issues/NTBBloodbath/PyBase)
![Forks](https://img.shields.io/github/forks/NTBBloodbath/PyBase)
![License](https://img.shields.io/github/license/NTBBloodbath/PyBase)

![PyBase Logo](./res/pybase-logo.png)

PyBase is a DataBase Manager for JSON, YAML, Bytes and SQLite.

It's focused on the ease and effectiveness for the administration of databases.

------

## Why PyBase?
**If you want to store** static **data** (JSON, YAML, Bytes) **or store a database in SQLite**,
**the best thing would be to use an administrator that simplifies your tasks and
helps you with a good organization and efficiently.**

**PyBase does exactly that, allows you to create such databases with
just one method, and simplifies the task of manipulating their data!**

------

## Contribuitors
- [Danny2105](https://github.com/Danny2105)

------

# Quick start
## Installation
PyBase requires Python 3.x and can be installed through `pip` with the following command.
```sh
python3 -m pip install -U pybase_db
```

### Building
The development branch changes aren't compiled and uploaded to Pypi,
so you must compile a wheel yourself to test the experimental stuff.
```sh
python3 setup.py bdist_wheel

python3 -m pip install -U dist/pybase_db-version-py3-none-any.whl
```

## Usage example
This is a brief example of the methods that PyBase currently has.
```py
# Lets import PyBase Class from PyBase Package
from pybase_db.pybase_db import PyBase

# Lets define our database name and format (with default db_path).
# db_type isn't case sensitive. You can use JSON and json and it'll be valid.
db = PyBase("example", "JSON", debug=True, stats=True)  # => ./example.json

# Lets define and add some content to our database.
pybase_info = {"pybase": "awesomeness", "version": "1.0.0"}

# Lets insert the defined dict inside our database.
db.insert(pybase_info,
          mode="w")  # => {'pybase': 'awesomeness', 'version': '1.0.0'}

# Lets delete an object inside our database cuz it's useless.
db.delete('pybase')  # => {'version': '1.0.0'}

# Lets insert more data cuz that's funny!
db.insert(content={"guilds": {}, "ownerID": 1234567890}, mode="w")

# Lets insert some data inside the guilds key
db.insert(content={
    "guilds": {
        "12345": {
            "name": "First guild"
        },
        "67890": {
            "name": "Second guild"
        }
    }
},
          mode="a")

# Lets fetch an object inside our database and display its type.
# It's useful to debug and manipulate the data dynamically.
db.fetch('version')  # => <class 'str'>

# Gets the corresponding value according to the specified key
db.get("version")  # => '1.0.0'

# New data of the new update
pybase_update = {"pybase": {"newVersion": {"version": "1.0.0"}}}
db.insert(pybase_update)

# Get all data from db
db.get()  # => {'pybase': {'newVersion': {'version': '1.0.0'}}, 'version': '1.0.0'}

# Get the values using its key
db.get("pybase")  # => {'newVersion': {'version': '1.0.0'}}

# Get a value of a key separated by a period (.)
db.get("pybase.newVersion")  # => {'version': '1.0.0'}

# Several
db.get("pybase.newVersion.version")  # => 1.0.0
```

> **To see SQLite3 usage example, click [here](./examples/pysql_usage.py)**

## Documentation
You can see the PyBase documentation through the `help()` function of the REPL
and through the [official documentation site](https://pybase.github.io/docs/).

## Changelog
You can see the PyBase changelog [here](./CHANGELOG.md)

------

# License
**PyBase is distributed under MIT License.**

# Contributing
You can see how to contribute [here](./CONTRIBUTING.md)

# Code of Conduct
You can see the code of conduct [here](./CODE_OF_CONDUCT.md)


