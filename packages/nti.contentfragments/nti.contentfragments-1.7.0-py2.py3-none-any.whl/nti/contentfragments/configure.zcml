<!-- -*- mode: nxml -*- -->
<configure  xmlns="http://namespaces.zope.org/zope"
            xmlns:i18n="http://namespaces.zope.org/i18n"
            xmlns:zcml="http://namespaces.zope.org/zcml"
            i18n_domain="zope">

    <include package="zope.component" file="meta.zcml" />
    <include package="zope.security" file="meta.zcml" />
    <include package="zope.component" />
    <include package="zope.security" />

    <include package="zope.mimetype" file="meta.zcml" />

    <!--
    loading the mimetypes is slow. Doing so in
    unit tests over and over is really, really slow.
    So we don't. Tests that depend on them should drop this
    feature from the list. Importing the .interfaces
    package loads and registers them at least once, which
    creates the classes, which will not change for the life of the VM.
    The details of this may change in the future.
    -->
    <configure zcml:condition="not-have devmode">

        <include package="zope.mimetype" />

        <mimeTypes module=".interfaces" file="types.csv" />

    </configure>

    <!--
    If we don't load it, we still need to make sure that
    some of the most important parts are available.
    zope.file, in particular, depends on this.
    -->
    <configure zcml:condition="have devmode">

        <utility provides="zope.mimetype.interfaces.IMimeTypeGetter"
                 component="zope.mimetype.typegetter.smartMimeTypeGuesser" />

        <utility provides="zope.mimetype.interfaces.ICharsetGetter"
                 component="zope.mimetype.typegetter.charsetGetter" />

        <adapter factory="zope.mimetype.contentinfo.ContentInfo"/>

    </configure>

    <!-- Event assignment dispatching. Used in censoring. -->

    <!-- Make sure censoring works -->
    <include package="nti.schema" />

    <!-- Content fragment transformation adapters -->
    <adapter factory=".latex.PlainTextToLatexFragmentConverter"
             for=".interfaces.IPlainTextContentFragment"
             provides=".interfaces.ILatexContentFragment" />

    <adapter factory=".latex.PlainTextToLatexFragmentConverter"
             for=".interfaces.IUnicode"
             provides=".interfaces.ILatexContentFragment" />

    <!--
    We can treat arbitrary strings like they are unsanitized HTML
    TODO: Is this right?
    -->
    <adapter factory=".interfaces.HTMLContentFragment"
             for=".interfaces.IUnicode"
             provides=".interfaces.IHTMLContentFragment" />

    <adapter factory=".rst.check_user_rst"
             for=".interfaces.IUnicode"
             provides=".interfaces.IRstContentFragment" />

    <!--
    We can convert arbitrary strings to a unicode content fragment.
    This will either create a plain text or HTML fragment.
    -->
    <adapter factory=".html.sanitize_user_html"
             for=".interfaces.IString"
             provides=".interfaces.IUnicodeContentFragment" />

    <adapter factory=".html.sanitize_user_html"
             for=".interfaces.IUnicode"
             provides=".interfaces.IUnicodeContentFragment" />

    <!-- This is something of a lie. It might sanitize to plain text -->
    <adapter factory=".html.sanitize_user_html"
             for=".interfaces.IHTMLContentFragment"
             provides=".interfaces.ISanitizedHTMLContentFragment" />

    <!--
        If they specifically ask for plain text, make sure we can
        answer that
    -->
    <adapter factory=".html._sanitize_user_html_to_text"
             for=".interfaces.IUnicode"
             provides=".interfaces.IPlainTextContentFragment" />

    <!--
        Likewise, if they ask for sanitized HTML, do our best
        to provide that. It might actually result in sanitized text,
        however.
    -->
    <adapter factory=".html.sanitize_user_html"
             for=".interfaces.IUnicode"
             provides=".interfaces.ISanitizedHTMLContentFragment" />

    <adapter factory=".html._sanitize_user_html_to_text"
             for=".interfaces.IString"
             name="text"
             provides=".interfaces.IPlainTextContentFragment" />

    <adapter factory=".html._sanitize_user_html_to_text"
             for=".interfaces.IUnicode"
             name="text"
             provides=".interfaces.IPlainTextContentFragment" />

    <!--
        We can (more cheaply) convert things that are already
        HTML to plain text.
    -->
    <adapter factory=".html._html_to_sanitized_text"
             for=".interfaces.IHTMLContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <adapter factory=".html._sanitized_html_to_sanitized_text"
             for=".interfaces.ISanitizedHTMLContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <!-- Register these with the text name too for convenience. -->
    <adapter factory=".html._html_to_sanitized_text"
             name="text"
             for=".interfaces.IHTMLContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <adapter factory=".html._sanitized_html_to_sanitized_text"
             name="text"
             for=".interfaces.ISanitizedHTMLContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <adapter factory=".interfaces._plain_text_to_plain_text"
             name="text" />

    <!--
        Provide for converting rST to plaintext.
    -->
    <adapter factory=".rst.rst_to_plaintext"
             for=".interfaces.IRstContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <adapter factory=".rst.rst_to_plaintext"
             name="text"
             for=".interfaces.IRstContentFragment"
             provides=".interfaces.IPlainTextContentFragment" />

    <!-- Censoring -->
    <!-- Defaults -->
    <utility factory=".censor._word_plus_trivial_profanity_scanner" />
    <utility factory=".censor.SimpleReplacementCensoredContentStrategy" />

    <!--
         IUnicode is implemented by 'unicode'. Our only IUnicodeContentFragment implementation extends
         unicode.
    -->
    <subscriber handler=".censor.censor_before_text_assigned"
                for=".interfaces.IUnicode * nti.schema.interfaces.IBeforeTextAssignedEvent" />

    <utility factory=".latex._DefaultTextLatexEscaper" />
    <utility factory=".urlmatcher.GrubberHyperlinkFormatter" />

    <!-- Punctuation -->
    <utility factory=".punctuation._default_punctuation_mark_pattern" />
    <utility factory=".punctuation._default_punctuation_mark_pattern" name="en" />
    <utility factory=".punctuation._default_punctuation_mark_pattern" name="es" />
    <utility factory=".punctuation._default_punctuation_mark_pattern" name="ru" />
    <utility factory=".punctuation._default_punctuation_mark_pattern_plus" name="en" />
    <utility factory=".punctuation._default_punctuation_mark_pattern_plus" name="es" />
    <utility factory=".punctuation._default_punctuation_mark_pattern_plus" name="ru" />

    <utility factory=".punctuation._default_punctuation_mark_expression" />
    <utility factory=".punctuation._default_punctuation_mark_expression" name="en" />
    <utility factory=".punctuation._default_punctuation_mark_expression" name="es" />
    <utility factory=".punctuation._default_punctuation_mark_expression" name="ru" />

    <utility factory=".punctuation._default_punctuation_mark_expression_plus" name="en" />
    <utility factory=".punctuation._default_punctuation_mark_expression_plus" name="es" />
    <utility factory=".punctuation._default_punctuation_mark_expression_plus" name="ru" />

</configure>
