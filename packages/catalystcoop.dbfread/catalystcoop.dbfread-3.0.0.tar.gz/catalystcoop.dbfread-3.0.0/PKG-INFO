Metadata-Version: 2.1
Name: catalystcoop.dbfread
Version: 3.0.0
Summary: Read DBF Files with Python
Home-page: https://github.com/catalyst-cooperative/dbfread
Author: Ole Martin Bjorndalen
Author-email: ombdalen@gmail.com
Maintainer: Zane A. Selvans
Maintainer-email: zane.selvans@catalyst.coop
License: MIT
Project-URL: Source, https://github.com/catalyst-cooperative/dbfread
Project-URL: Issue Tracker, https://github.com/catalyst-cooperative/dbfread/issues
Description: dbfread - Read DBF Files with Python
        ====================================
        .. image:: https://img.shields.io/github/workflow/status/catalyst-cooperative/dbfread/tox-pytest
          :alt: GitHub Workflow Status
          :target: https://github.com/catalyst-cooperative/dbfread/actions?query=workflow%3Atox-pytest
        .. image:: https://codecov.io/gh/catalyst-cooperative/dbfread/branch/master/graph/badge.svg
          :alt: CodeCov Test Coverage
          :target: https://codecov.io/gh/catalyst-cooperative/dbfread
        .. image:: https://img.shields.io/pypi/pyversions/catalystcoop.dbfread
          :alt: PyPI - Python Versions
        
        
        DBF is a file format used by databases such dBase, Visual FoxPro, and
        FoxBase+. This library reads DBF files and returns the data as native
        Python data types for further processing. It is primarily intended for
        batch jobs and one-off scripts.
        
        ::
        
            >>> from dbfread import DBF
            >>> for record in DBF('people.dbf'):
            ...     print(record)
            OrderedDict([('NAME', 'Alice'), ('BIRTHDATE', datetime.date(1987, 3, 1))])
            OrderedDict([('NAME', 'Bob'), ('BIRTHDATE', datetime.date(1980, 11, 12))])
        
        By default records are streamed directly from the file.  If you have
        enough memory you can instead load them into a list. This allows for
        random access::
        
            >>> table = DBF('people.dbf', load=True)
            >>> print(table.records[1]['NAME'])
            Bob
            >>> print(table.records[0]['NAME'])
            Alice
        
        Full documentation at https://dbfread.readthedocs.io/
        
        See ``docs/changes.rst`` for a full list of changes in each version.
        
        
        Main Features
        -------------
        
        * simple but flexible API
        
        * data is returned as native Python data types
        
        * records are ordered dictionaries, but can be reconfigured to be of
          any type
        
        * aims to handle all variants of DBF files. (Currently only widely
          tested with Visual FoxPro, but should work well with other
          variants.)
        
        * support for 18 field types. Custom types can be added by subclassing
          ``FieldParser``
        
        * reads ``FPT`` and ``DBT`` memo files, both text and binary data
        
        * handles mixed case file names gracefully on case sensitive file systems
        
        * can retrieve deleted records
        
        
        Installing
        ----------
        
        Requires Python 3.6+
        
        ::
        
          pip install catalystcoop.dbfread
        
        ``dbfread`` is a pure Python module and doesn't depend on any packages
        outside the standard library.
        
        To build documentation locally::
        
            sphinx-build docs/ docs/_build
        
        This requires Sphinx. The resulting files can be found in
        ``docs/_build/``.
        
        
        Source code
        ------------
        
        http://github.com/catalyst-cooperative/dbfread/
        
        
        API Changes
        -----------
        
        ``dbfread.open()`` and ``dbfread.read()`` are deprecated as of version
        ``2.0``, and will be removed in ``2.2``.
        
        The ``DBF`` class is no longer a subclass of ``list``. This makes the
        API a lot cleaner and easier to understand, but old code that relied
        on this behaviour will be broken. Iteration and record counting works
        the same as before. Other list operations can be rewritten using the
        ``record`` attribute. For example::
        
            table = dbfread.read('people.dbf')
            print(table[1])
        
        can be rewritten as::
        
            table = DBF('people.dbf', load=True)
            print(table.records[1])
        
        ``open()`` and ``read()`` both return ``DeprecatedDBF``, which is a
        subclass of ``DBF`` and ``list`` and thus backward compatible.
        
        
        License
        -------
        
        dbfread is released under the terms of the `MIT license
        <http://en.wikipedia.org/wiki/MIT_License>`_.
        
        
        Contact
        -------
        
        Ole Martin Bjorndalen - ombdalen@gmail.com
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
Description-Content-Type: text/x-rst
Provides-Extra: doc
Provides-Extra: test
