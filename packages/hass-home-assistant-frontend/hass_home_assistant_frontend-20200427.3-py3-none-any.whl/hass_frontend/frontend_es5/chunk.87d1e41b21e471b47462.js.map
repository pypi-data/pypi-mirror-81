{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-selector/iron-selection.js","webpack:///./node_modules/@polymer/iron-selector/iron-selectable.js","webpack:///./node_modules/@polymer/iron-selector/iron-multi-selectable.js","webpack:///./node_modules/@polymer/iron-menu-behavior/iron-menu-behavior.js"],"names":["IronSelection","selectCallback","_classCallCheck","this","selection","key","value","multi","slice","excludes","forEach","item","indexOf","setItemSelected","isSelected","push","i","splice","toggle","get","__webpack_require__","d","__webpack_exports__","IronSelectableBehavior","properties","attrForSelected","type","String","selected","notify","selectedItem","Object","readOnly","activateEvent","observer","selectable","selectedClass","selectedAttribute","fallbackSelection","items","Array","_excludedLocalNames","template","dom-bind","dom-if","dom-repeat","observers","created","_bindFilterItem","_filterItem","bind","_selection","_applySelection","attached","_observer","_observeItems","_addListener","detached","dom","unobserveNodes","_removeListener","select","selectPrevious","length","index","undefined","Number","_valueToIndex","_indexToValue","selectNext","selectIndex","forceSynchronousItemUpdate","flush","_updateItems","_shouldUpdateSelection","_checkFallback","_updateSelected","eventName","listen","unlisten","_activateEventChanged","old","nodes","queryDistributedElements","prototype","filter","call","_setItems","_updateAttrForSelected","_valueForItem","_selectSelected","_valueToItem","clear","node","localName","propValue","dashToCamelCase","getAttribute","toggleClass","toggleAttribute","_selectionChange","fire","_setSelectedItem","observeNodes","mutation","bubbles","cancelable","_activateHandler","e","t","target","_itemActivate","parentNode","defaultPrevented","IronMultiSelectableBehaviorImpl","Boolean","selectedValues","selectedItems","_toggleSelected","multiChanged","map","unfilteredValue","apply","_selectMulti","values","_valuesToItems","s","_setSelectedItems","IronMultiSelectableBehavior","IronMenuBehaviorImpl","IronMenuBehavior","focusedItem","attrForItemTitle","disabled","_MODIFIER_KEYS","_SEARCH_RESET_TIMEOUT_MS","_previousTabIndex","hostAttributes","role","listeners","focus","keydown","iron-items-changed","keyBindings","up","down","esc","shift+tab:keydown","_resetTabindices","_defaultFocusAsync","cancelAsync","hasAttribute","_setFocusedItem","arguments","firstSelectedItem","setAttribute","_updateMultiselectable","removeAttribute","_focusWithKeyboardEvent","event","cancelDebouncer","searchText","_searchText","searchLength","fromCharCode","keyCode","toLocaleLowerCase","attr","title","trim","debounce","_clearSearchText","_focusPrevious","curFocusIndex","owner","getOwnerRoot","document","activeElement","_focusNext","_focusedItemChanged","_onIronItemsChanged","detail","addedNodes","_onShiftTabDown","oldTabIndex","_shiftTabPressed","async","_onFocus","rootTarget","tabIndex","isLightDescendant","_onUpKey","keyboardEvent","preventDefault","_onDownKey","_onEscKey","blur","_onKeydown","keyboardEventMatchesKeys","stopPropagation","_disabledChanged","IronA11yKeysBehavior"],"mappings":"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","file":"chunk.87d1e41b21e471b47462.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nexport class IronSelection {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  constructor(selectCallback) {\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get() {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  }\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @param {Array} excludes items to be excluded.\n   */\n  clear(excludes) {\n    this.selection.slice().forEach(function(item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  }\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @param {*} item The item whose selection state should be checked.\n   * @return {boolean} Returns true if `item` is selected.\n   */\n  isSelected(item) {\n    return this.selection.indexOf(item) >= 0;\n  }\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected(item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from\n        // current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @param {*} item The item to select.\n   */\n  select(item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  }\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @param {*} item The item to toggle.\n   */\n  toggle(item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {dashToCamelCase} from '@polymer/polymer/lib/utils/case-map.js';\n\nimport {IronSelection} from './iron-selection.js';\n\n/**\n * @polymerBehavior\n */\nexport const IronSelectableBehavior = {\n\n  /**\n   * Fired when iron-selector is activated (selected or deselected).\n   * It is fired before the selected items are changed.\n   * Cancel the event to abort selection.\n   *\n   * @event iron-activate\n   */\n\n  /**\n   * Fired when an item is selected\n   *\n   * @event iron-select\n   */\n\n  /**\n   * Fired when an item is deselected\n   *\n   * @event iron-deselect\n   */\n\n  /**\n   * Fired when the list of selectable items changes (e.g., items are\n   * added or removed). The detail of the event is a mutation record that\n   * describes what changed.\n   *\n   * @event iron-items-changed\n   */\n\n  properties: {\n\n    /**\n     * If you want to use an attribute value or property of an element for\n     * `selected` instead of the index, set this to the name of the attribute\n     * or property. Hyphenated values are converted to camel case when used to\n     * look up the property of a selectable element. Camel cased values are\n     * *not* converted to hyphenated values for attribute lookup. It's\n     * recommended that you provide the hyphenated form of the name so that\n     * selection works in both cases. (Use `attr-or-property-name` instead of\n     * `attrOrPropertyName`.)\n     */\n    attrForSelected: {type: String, value: null},\n\n    /**\n     * Gets or sets the selected element. The default is to use the index of the\n     * item.\n     * @type {string|number}\n     */\n    selected: {type: String, notify: true},\n\n    /**\n     * Returns the currently selected item.\n     *\n     * @type {?Object}\n     */\n    selectedItem: {type: Object, readOnly: true, notify: true},\n\n    /**\n     * The event that fires from items when they are selected. Selectable\n     * will listen for this event from items and update the selection state.\n     * Set to empty string to listen to no events.\n     */\n    activateEvent:\n        {type: String, value: 'tap', observer: '_activateEventChanged'},\n\n    /**\n     * This is a CSS selector string.  If this is set, only items that match the\n     * CSS selector are selectable.\n     */\n    selectable: String,\n\n    /**\n     * The class to set on elements when selected.\n     */\n    selectedClass: {type: String, value: 'iron-selected'},\n\n    /**\n     * The attribute to set on elements when selected.\n     */\n    selectedAttribute: {type: String, value: null},\n\n    /**\n     * Default fallback if the selection based on selected with\n     * `attrForSelected` is not found.\n     */\n    fallbackSelection: {type: String, value: null},\n\n    /**\n     * The list of items from which a selection can be made.\n     */\n    items: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * The set of excluded elements where the key is the `localName`\n     * of the element that will be ignored from the item list.\n     *\n     * @default {template: 1}\n     */\n    _excludedLocalNames: {\n      type: Object,\n      value: function() {\n        return {\n          'template': 1,\n          'dom-bind': 1,\n          'dom-if': 1,\n          'dom-repeat': 1,\n        };\n      }\n    }\n  },\n\n  observers: [\n    '_updateAttrForSelected(attrForSelected)',\n    '_updateSelected(selected)',\n    '_checkFallback(fallbackSelection)'\n  ],\n\n  created: function() {\n    this._bindFilterItem = this._filterItem.bind(this);\n    this._selection = new IronSelection(this._applySelection.bind(this));\n  },\n\n  attached: function() {\n    this._observer = this._observeItems(this);\n    this._addListener(this.activateEvent);\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n    }\n    this._removeListener(this.activateEvent);\n  },\n\n  /**\n   * Returns the index of the given item.\n   *\n   * @method indexOf\n   * @param {Object} item\n   * @returns Returns the index of the item\n   */\n  indexOf: function(item) {\n    return this.items ? this.items.indexOf(item) : -1;\n  },\n\n  /**\n   * Selects the given value.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    this.selected = value;\n  },\n\n  /**\n   * Selects the previous item.\n   *\n   * @method selectPrevious\n   */\n  selectPrevious: function() {\n    var length = this.items.length;\n    var index = length - 1;\n    if (this.selected !== undefined) {\n      index = (Number(this._valueToIndex(this.selected)) - 1 + length) % length;\n    }\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the next item.\n   *\n   * @method selectNext\n   */\n  selectNext: function() {\n    var index = 0;\n    if (this.selected !== undefined) {\n      index =\n          (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;\n    }\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the item at the given index.\n   *\n   * @method selectIndex\n   */\n  selectIndex: function(index) {\n    this.select(this._indexToValue(index));\n  },\n\n  /**\n   * Force a synchronous update of the `items` property.\n   *\n   * NOTE: Consider listening for the `iron-items-changed` event to respond to\n   * updates to the set of selectable items after updates to the DOM list and\n   * selection state have been made.\n   *\n   * WARNING: If you are using this method, you should probably consider an\n   * alternate approach. Synchronously querying for items is potentially\n   * slow for many use cases. The `items` property will update asynchronously\n   * on its own to reflect selectable items in the DOM.\n   */\n  forceSynchronousItemUpdate: function() {\n    if (this._observer && typeof this._observer.flush === 'function') {\n      // NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger\n      // `observeNodes` callbacks. Polymer 2.x returns an object from\n      // `observeNodes` with a `flush` that synchronously gives the callback any\n      // pending MutationRecords (retrieved with `takeRecords`). Any case where\n      // ShadyDOM flushes were expected to synchronously trigger item updates\n      // will now require calling `forceSynchronousItemUpdate`.\n      this._observer.flush();\n    } else {\n      this._updateItems();\n    }\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null;\n  },\n\n  _checkFallback: function() {\n    this._updateSelected();\n  },\n\n  _addListener: function(eventName) {\n    this.listen(this, eventName, '_activateHandler');\n  },\n\n  _removeListener: function(eventName) {\n    this.unlisten(this, eventName, '_activateHandler');\n  },\n\n  _activateEventChanged: function(eventName, old) {\n    this._removeListener(old);\n    this._addListener(eventName);\n  },\n\n  _updateItems: function() {\n    var nodes = dom(this).queryDistributedElements(this.selectable || '*');\n    nodes = Array.prototype.filter.call(nodes, this._bindFilterItem);\n    this._setItems(nodes);\n  },\n\n  _updateAttrForSelected: function() {\n    if (this.selectedItem) {\n      this.selected = this._valueForItem(this.selectedItem);\n    }\n  },\n\n  _updateSelected: function() {\n    this._selectSelected(this.selected);\n  },\n\n  _selectSelected: function(selected) {\n    if (!this.items) {\n      return;\n    }\n\n    var item = this._valueToItem(this.selected);\n    if (item) {\n      this._selection.select(item);\n    } else {\n      this._selection.clear();\n    }\n    // Check for items, since this array is populated only when attached\n    // Since Number(0) is falsy, explicitly check for undefined\n    if (this.fallbackSelection && this.items.length &&\n        (this._selection.get() === undefined)) {\n      this.selected = this.fallbackSelection;\n    }\n  },\n\n  _filterItem: function(node) {\n    return !this._excludedLocalNames[node.localName];\n  },\n\n  _valueToItem: function(value) {\n    return (value == null) ? null : this.items[this._valueToIndex(value)];\n  },\n\n  _valueToIndex: function(value) {\n    if (this.attrForSelected) {\n      for (var i = 0, item; item = this.items[i]; i++) {\n        if (this._valueForItem(item) == value) {\n          return i;\n        }\n      }\n    } else {\n      return Number(value);\n    }\n  },\n\n  _indexToValue: function(index) {\n    if (this.attrForSelected) {\n      var item = this.items[index];\n      if (item) {\n        return this._valueForItem(item);\n      }\n    } else {\n      return index;\n    }\n  },\n\n  _valueForItem: function(item) {\n    if (!item) {\n      return null;\n    }\n    if (!this.attrForSelected) {\n      var i = this.indexOf(item);\n      return i === -1 ? null : i;\n    }\n    var propValue = item[dashToCamelCase(this.attrForSelected)];\n    return propValue != undefined ? propValue :\n                                    item.getAttribute(this.attrForSelected);\n  },\n\n  _applySelection: function(item, isSelected) {\n    if (this.selectedClass) {\n      this.toggleClass(this.selectedClass, isSelected, item);\n    }\n    if (this.selectedAttribute) {\n      this.toggleAttribute(this.selectedAttribute, isSelected, item);\n    }\n    this._selectionChange();\n    this.fire('iron-' + (isSelected ? 'select' : 'deselect'), {item: item});\n  },\n\n  _selectionChange: function() {\n    this._setSelectedItem(this._selection.get());\n  },\n\n  // observe items change under the given node.\n  _observeItems: function(node) {\n    return dom(node).observeNodes(function(mutation) {\n      this._updateItems();\n      this._updateSelected();\n\n      // Let other interested parties know about the change so that\n      // we don't have to recreate mutation observers everywhere.\n      this.fire(\n          'iron-items-changed', mutation, {bubbles: false, cancelable: false});\n    });\n  },\n\n  _activateHandler: function(e) {\n    var t = e.target;\n    var items = this.items;\n    while (t && t != this) {\n      var i = items.indexOf(t);\n      if (i >= 0) {\n        var value = this._indexToValue(i);\n        this._itemActivate(value, t);\n        return;\n      }\n      t = t.parentNode;\n    }\n  },\n\n  _itemActivate: function(value, item) {\n    if (!this.fire('iron-activate', {selected: value, item: item}, {\n               cancelable: true\n             })\n             .defaultPrevented) {\n      this.select(value);\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronSelectableBehavior} from './iron-selectable.js';\n\n/**\n * @polymerBehavior IronMultiSelectableBehavior\n */\nexport const IronMultiSelectableBehaviorImpl = {\n  properties: {\n\n    /**\n     * If true, multiple selections are allowed.\n     */\n    multi: {type: Boolean, value: false, observer: 'multiChanged'},\n\n    /**\n     * Gets or sets the selected elements. This is used instead of `selected`\n     * when `multi` is true.\n     */\n    selectedValues: {\n      type: Array,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     */\n    selectedItems: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n  },\n\n  observers: ['_updateSelected(selectedValues.splices)'],\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    if (this.multi) {\n      this._toggleSelected(value);\n    } else {\n      this.selected = value;\n    }\n  },\n\n  multiChanged: function(multi) {\n    this._selection.multi = multi;\n    this._updateSelected();\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null ||\n        (this.selectedValues != null && this.selectedValues.length);\n  },\n\n  _updateAttrForSelected: function() {\n    if (!this.multi) {\n      IronSelectableBehavior._updateAttrForSelected.apply(this);\n    } else if (this.selectedItems && this.selectedItems.length > 0) {\n      this.selectedValues =\n          this.selectedItems\n              .map(\n                  function(selectedItem) {\n                    return this._indexToValue(this.indexOf(selectedItem));\n                  },\n                  this)\n              .filter(function(unfilteredValue) {\n                return unfilteredValue != null;\n              }, this);\n    }\n  },\n\n  _updateSelected: function() {\n    if (this.multi) {\n      this._selectMulti(this.selectedValues);\n    } else {\n      this._selectSelected(this.selected);\n    }\n  },\n\n  _selectMulti: function(values) {\n    values = values || [];\n\n    var selectedItems =\n        (this._valuesToItems(values) || []).filter(function(item) {\n          return item !== null && item !== undefined;\n        });\n\n    // clear all but the current selected items\n    this._selection.clear(selectedItems);\n\n    // select only those not selected yet\n    for (var i = 0; i < selectedItems.length; i++) {\n      this._selection.setItemSelected(selectedItems[i], true);\n    }\n\n    // Check for items, since this array is populated only when attached\n    if (this.fallbackSelection && !this._selection.get().length) {\n      var fallback = this._valueToItem(this.fallbackSelection);\n      if (fallback) {\n        this.select(this.fallbackSelection);\n      }\n    }\n  },\n\n  _selectionChange: function() {\n    var s = this._selection.get();\n    if (this.multi) {\n      this._setSelectedItems(s);\n      this._setSelectedItem(s.length ? s[0] : null);\n    } else {\n      if (s !== null && s !== undefined) {\n        this._setSelectedItems([s]);\n        this._setSelectedItem(s);\n      } else {\n        this._setSelectedItems([]);\n        this._setSelectedItem(null);\n      }\n    }\n  },\n\n  _toggleSelected: function(value) {\n    var i = this.selectedValues.indexOf(value);\n    var unselected = i < 0;\n    if (unselected) {\n      this.push('selectedValues', value);\n    } else {\n      this.splice('selectedValues', i, 1);\n    }\n  },\n\n  _valuesToItems: function(values) {\n    return (values == null) ? null : values.map(function(value) {\n      return this._valueToItem(value);\n    }, this);\n  }\n};\n\n/** @polymerBehavior */\nexport const IronMultiSelectableBehavior =\n    [IronSelectableBehavior, IronMultiSelectableBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronMultiSelectableBehavior, IronMultiSelectableBehaviorImpl} from '@polymer/iron-selector/iron-multi-selectable.js';\nimport {IronSelectableBehavior} from '@polymer/iron-selector/iron-selectable.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `IronMenuBehavior` implements accessible menu behavior.\n *\n * @demo demo/index.html\n * @polymerBehavior IronMenuBehavior\n */\nexport const IronMenuBehaviorImpl = {\n\n  properties: {\n\n    /**\n     * Returns the currently focused item.\n     * @type {?Object}\n     */\n    focusedItem:\n        {observer: '_focusedItemChanged', readOnly: true, type: Object},\n\n    /**\n     * The attribute to use on menu items to look up the item title. Typing the\n     * first letter of an item when the menu is open focuses that item. If\n     * unset, `textContent` will be used.\n     */\n    attrForItemTitle: {type: String},\n\n    /**\n     * @type {boolean}\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      observer: '_disabledChanged',\n    },\n  },\n\n  /**\n   * The list of keys has been taken from\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n   * @private\n   */\n  _MODIFIER_KEYS: [\n    'Alt',\n    'AltGraph',\n    'CapsLock',\n    'Control',\n    'Fn',\n    'FnLock',\n    'Hyper',\n    'Meta',\n    'NumLock',\n    'OS',\n    'ScrollLock',\n    'Shift',\n    'Super',\n    'Symbol',\n    'SymbolLock'\n  ],\n\n  /** @private */\n  _SEARCH_RESET_TIMEOUT_MS: 1000,\n\n  /** @private */\n  _previousTabIndex: 0,\n\n  hostAttributes: {\n    'role': 'menu',\n  },\n\n  observers: ['_updateMultiselectable(multi)'],\n\n  listeners: {\n    'focus': '_onFocus',\n    'keydown': '_onKeydown',\n    'iron-items-changed': '_onIronItemsChanged'\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'up': '_onUpKey',\n    'down': '_onDownKey',\n    'esc': '_onEscKey',\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n\n  attached: function() {\n    this._resetTabindices();\n  },\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    // Cancel automatically focusing a default item if the menu received focus\n    // through a user action selecting a particular item.\n    if (this._defaultFocusAsync) {\n      this.cancelAsync(this._defaultFocusAsync);\n      this._defaultFocusAsync = null;\n    }\n    var item = this._valueToItem(value);\n    if (item && item.hasAttribute('disabled'))\n      return;\n    this._setFocusedItem(item);\n    IronMultiSelectableBehaviorImpl.select.apply(this, arguments);\n  },\n\n  /**\n   * Resets all tabindex attributes to the appropriate value based on the\n   * current selection state. The appropriate value is `0` (focusable) for\n   * the default selected item, and `-1` (not keyboard focusable) for all\n   * other items. Also sets the correct initial values for aria-selected\n   * attribute, true for default selected item and false for others.\n   */\n  _resetTabindices: function() {\n    var firstSelectedItem = this.multi ?\n        (this.selectedItems && this.selectedItems[0]) :\n        this.selectedItem;\n\n    this.items.forEach(function(item) {\n      item.setAttribute('tabindex', item === firstSelectedItem ? '0' : '-1');\n      item.setAttribute('aria-selected', this._selection.isSelected(item));\n    }, this);\n  },\n\n  /**\n   * Sets appropriate ARIA based on whether or not the menu is meant to be\n   * multi-selectable.\n   *\n   * @param {boolean} multi True if the menu should be multi-selectable.\n   */\n  _updateMultiselectable: function(multi) {\n    if (multi) {\n      this.setAttribute('aria-multiselectable', 'true');\n    } else {\n      this.removeAttribute('aria-multiselectable');\n    }\n  },\n\n  /**\n   * Given a KeyboardEvent, this method will focus the appropriate item in the\n   * menu (if there is a relevant item, and it is possible to focus it).\n   *\n   * @param {KeyboardEvent} event A KeyboardEvent.\n   */\n  _focusWithKeyboardEvent: function(event) {\n    // Make sure that the key pressed is not a modifier key.\n    // getModifierState is not being used, as it is not available in Safari\n    // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)\n    if (this._MODIFIER_KEYS.indexOf(event.key) !== -1)\n      return;\n\n    this.cancelDebouncer('_clearSearchText');\n\n    var searchText = this._searchText || '';\n    var key = event.key && event.key.length == 1 ?\n        event.key :\n        String.fromCharCode(event.keyCode);\n    searchText += key.toLocaleLowerCase();\n\n    var searchLength = searchText.length;\n\n    for (var i = 0, item; item = this.items[i]; i++) {\n      if (item.hasAttribute('disabled')) {\n        continue;\n      }\n\n      var attr = this.attrForItemTitle || 'textContent';\n      var title = (item[attr] || item.getAttribute(attr) || '').trim();\n\n      if (title.length < searchLength) {\n        continue;\n      }\n\n      if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) {\n        this._setFocusedItem(item);\n        break;\n      }\n    }\n\n    this._searchText = searchText;\n    this.debounce(\n        '_clearSearchText',\n        this._clearSearchText,\n        this._SEARCH_RESET_TIMEOUT_MS);\n  },\n\n  _clearSearchText: function() {\n    this._searchText = '';\n  },\n\n  /**\n   * Focuses the previous item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusPrevious: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex - i + length) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Focuses the next item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusNext: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex + i) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Mutates items in the menu based on provided selection details, so that\n   * all items correctly reflect selection state.\n   *\n   * @param {Element} item An item in the menu.\n   * @param {boolean} isSelected True if the item should be shown in a\n   * selected state, otherwise false.\n   */\n  _applySelection: function(item, isSelected) {\n    if (isSelected) {\n      item.setAttribute('aria-selected', 'true');\n    } else {\n      item.setAttribute('aria-selected', 'false');\n    }\n    IronSelectableBehavior._applySelection.apply(this, arguments);\n  },\n\n  /**\n   * Discretely updates tabindex values among menu items as the focused item\n   * changes.\n   *\n   * @param {Element} focusedItem The element that is currently focused.\n   * @param {?Element} old The last element that was considered focused, if\n   * applicable.\n   */\n  _focusedItemChanged: function(focusedItem, old) {\n    old && old.setAttribute('tabindex', '-1');\n    if (focusedItem && !focusedItem.hasAttribute('disabled') &&\n        !this.disabled) {\n      focusedItem.setAttribute('tabindex', '0');\n      focusedItem.focus();\n    }\n  },\n\n  /**\n   * A handler that responds to mutation changes related to the list of items\n   * in the menu.\n   *\n   * @param {CustomEvent} event An event containing mutation records as its\n   * detail.\n   */\n  _onIronItemsChanged: function(event) {\n    if (event.detail.addedNodes.length) {\n      this._resetTabindices();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n\n    IronMenuBehaviorImpl._shiftTabPressed = true;\n\n    this._setFocusedItem(null);\n\n    this.setAttribute('tabindex', '-1');\n\n    this.async(function() {\n      this.setAttribute('tabindex', oldTabIndex);\n      IronMenuBehaviorImpl._shiftTabPressed = false;\n      // NOTE(cdata): polymer/polymer#1305\n    }, 1);\n  },\n\n  /**\n   * Handler that is called when the menu receives focus.\n   *\n   * @param {FocusEvent} event A focus event.\n   */\n  _onFocus: function(event) {\n    if (IronMenuBehaviorImpl._shiftTabPressed) {\n      // do not focus the menu itself\n      return;\n    }\n\n    // Do not focus the selected tab if the deepest target is part of the\n    // menu element's local DOM and is focusable.\n    var rootTarget =\n        /** @type {?HTMLElement} */ (dom(event).rootTarget);\n    if (rootTarget !== this && typeof rootTarget.tabIndex !== 'undefined' &&\n        !this.isLightDescendant(rootTarget)) {\n      return;\n    }\n\n    // clear the cached focus item\n    this._defaultFocusAsync = this.async(function() {\n      // focus the selected item when the menu receives focus, or the first item\n      // if no item is selected\n      var firstSelectedItem = this.multi ?\n          (this.selectedItems && this.selectedItems[0]) :\n          this.selectedItem;\n\n      this._setFocusedItem(null);\n\n      if (firstSelectedItem) {\n        this._setFocusedItem(firstSelectedItem);\n      } else if (this.items[0]) {\n        // We find the first none-disabled item (if one exists)\n        this._focusNext();\n      }\n    });\n  },\n\n  /**\n   * Handler that is called when the up key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onUpKey: function(event) {\n    // up and down arrows moves the focus\n    this._focusPrevious();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the down key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onDownKey: function(event) {\n    this._focusNext();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the esc key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onEscKey: function(event) {\n    var focusedItem = this.focusedItem;\n    if (focusedItem) {\n      focusedItem.blur();\n    }\n  },\n\n  /**\n   * Handler that is called when a keydown event is detected.\n   *\n   * @param {KeyboardEvent} event A keyboard event.\n   */\n  _onKeydown: function(event) {\n    if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {\n      // all other keys focus the menu item starting with that character\n      this._focusWithKeyboardEvent(event);\n    }\n    event.stopPropagation();\n  },\n\n  // override _activateHandler\n  _activateHandler: function(event) {\n    IronSelectableBehavior._activateHandler.call(this, event);\n    event.stopPropagation();\n  },\n\n  /**\n   * Updates this element's tab index when it's enabled/disabled.\n   * @param {boolean} disabled\n   */\n  _disabledChanged: function(disabled) {\n    if (disabled) {\n      this._previousTabIndex =\n          this.hasAttribute('tabindex') ? this.tabIndex : 0;\n      this.removeAttribute(\n          'tabindex');  // No tabindex means not tab-able or select-able.\n    } else if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', this._previousTabIndex);\n    }\n  }\n};\n\nIronMenuBehaviorImpl._shiftTabPressed = false;\n\n/** @polymerBehavior */\nexport const IronMenuBehavior =\n    [IronMultiSelectableBehavior, IronA11yKeysBehavior, IronMenuBehaviorImpl];\n"],"sourceRoot":""}