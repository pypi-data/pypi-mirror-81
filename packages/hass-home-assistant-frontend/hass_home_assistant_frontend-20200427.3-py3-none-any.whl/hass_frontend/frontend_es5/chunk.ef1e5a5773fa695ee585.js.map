{"version":3,"sources":["webpack:///./src/external_app/external_messaging.ts","webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_auth.ts"],"names":["ExternalMessaging","_classCallCheck","this","_defineProperty","key","value","bus","_this","window","addEventListener","ev","fireMessage","type","payload","event","detail","hapticType","externalForwardHaptics","msg","receiveMessage","_this2","msgId","id","Promise","resolve","reject","commands","_sendExternal","pendingCmd","success","result","error","console","warn","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage","Error","ExternalAuth","_Auth","_inherits","Auth","_super","_createSuper","hassUrl","external_auth_classCallCheck","call","clientId","refresh_token","access_token","expires_in","expires","_assertThisInitialized","_refreshAccessToken","_asyncToGenerator","regeneratorRuntime","mark","_callee","force","callbackPromise","tokens","wrap","_context","prev","next","callback","data","getExternalAuth","sent","Date","now","stop","_x","apply","arguments","_revoke","_callee2","_context2","revokeExternalAuth","createExternalAuth","auth","external","attach"],"mappings":"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","file":"chunk.ef1e5a5773fa695ee585.js","sourcesContent":["import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n\n  public cache: { [key: string]: any } = {};\n\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // eslint-disable-next-line no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n","import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface GetExternalAuthPayload extends BasePayload {\n  force?: boolean;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: GetExternalAuthPayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nexport class ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken(force?: boolean) {\n    const payload: GetExternalAuthPayload = {\n      callback: CALLBACK_SET_TOKEN,\n    };\n    if (force) {\n      payload.force = true;\n    }\n\n    const callbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(payload);\n    }\n\n    const tokens = await callbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const payload: BasePayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(payload);\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n"],"sourceRoot":""}