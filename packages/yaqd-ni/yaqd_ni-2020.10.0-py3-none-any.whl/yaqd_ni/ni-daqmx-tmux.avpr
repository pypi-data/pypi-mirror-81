{
    "config": {
        "channels": {
            "default": [],
            "items": "channel",
            "type": "array"
        },
        "choppers": {
            "default": [],
            "items": "chopper",
            "type": "array"
        },
        "loop_at_startup": {
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "type": "boolean"
        },
        "make": {
            "default": null,
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": null,
            "type": [
                "null",
                "string"
            ]
        },
        "nsamples": {
            "default": 900,
            "type": "int"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "type": "int"
        },
        "rest_channel": {
            "default": "ai0",
            "doc": "Channel to occupy when not making an explicitly specified measurement.",
            "type": "string"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "timeout": {
            "default": 10.0,
            "doc": "Timeout in seconds.",
            "type": "float"
        },
        "trigger_source": {
            "default": "ai0",
            "type": "string"
        }
    },
    "doc": "Triggered NI-daqmx with multiplex.",
    "links": {
        "bugtracker": "",
        "manufacturer": "",
        "source": ""
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "request": [],
            "response": "boolean"
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "request": [],
            "response": "string"
        },
        "get_measured": {
            "doc": "Get most recent measured value.",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "float",
                    "ndarray"
                ]
            }
        },
        "get_measured_samples": {
            "request": [],
            "response": "ndarray"
        },
        "get_measured_shots": {
            "request": [],
            "response": "ndarray"
        },
        "get_nshots": {
            "doc": "Get the currently planned number of shots.",
            "request": [],
            "response": "int"
        },
        "get_sample_correspondances": {
            "doc": "Returns an array of integers of length nsamples. Zero indicates rest sample. Postive indicates channel. Negative indicates chopper.",
            "request": [],
            "response": "ndarray"
        },
        "get_shots_processing_script": {
            "doc": "Get the path to the currently applied shots processing script.",
            "request": [],
            "response": "string"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "set_nshots": {
            "doc": "Set the number of shots to acquire.",
            "request": [
                {
                    "name": "nshots",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_shots_processing_script": {
            "doc": "Give the path to a shots processing script.",
            "request": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "response": "null"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "request": [],
            "response": "null"
        }
    },
    "protocol": "ni-daqmx-tmux",
    "requires": [],
    "state": {
        "nshots": {
            "default": 100,
            "type": "int"
        },
        "shots_processing_script": {
            "default": null,
            "doc": "Path to script for shots processing.",
            "type": [
                "null",
                "string"
            ]
        }
    },
    "trait": "is-sensor",
    "traits": [
        "has-measure-trigger",
        "is-sensor",
        "is-daemon"
    ],
    "types": [
        {
            "default": "average",
            "name": "processing_method",
            "symbols": [
                "average",
                "sum",
                "min",
                "max"
            ],
            "type": "enum"
        },
        {
            "fields": [
                {
                    "name": "name",
                    "type": "string"
                },
                {
                    "name": "range",
                    "type": "string"
                },
                {
                    "default": true,
                    "name": "enabled",
                    "type": "boolean"
                },
                {
                    "name": "physical_channel",
                    "type": "string"
                },
                {
                    "default": false,
                    "name": "invert",
                    "type": "boolean"
                },
                {
                    "name": "signal_start",
                    "type": "int"
                },
                {
                    "name": "signal_stop",
                    "type": "int"
                },
                {
                    "default": 0,
                    "name": "signal_presample",
                    "type": "int"
                },
                {
                    "name": "signal_method",
                    "type": "processing_method"
                },
                {
                    "default": false,
                    "name": "use_baseline",
                    "type": "boolean"
                },
                {
                    "default": "__null__",
                    "name": "baseline_start",
                    "type": [
                        "null",
                        "int"
                    ]
                },
                {
                    "default": "__null__",
                    "name": "baseline_stop",
                    "type": [
                        "null",
                        "int"
                    ]
                },
                {
                    "default": 0,
                    "name": "baseline_presample",
                    "type": "int"
                },
                {
                    "name": "baseline_method",
                    "type": "processing_method"
                }
            ],
            "name": "channel",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "name",
                    "type": "string"
                },
                {
                    "default": true,
                    "name": "enabled",
                    "type": "boolean"
                },
                {
                    "default": false,
                    "name": "invert",
                    "type": "boolean"
                },
                {
                    "default": false,
                    "name": "physical_channel",
                    "type": "string"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "name": "chopper",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}
