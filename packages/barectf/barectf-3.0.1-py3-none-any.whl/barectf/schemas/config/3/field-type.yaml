# The MIT License (MIT)
#
# Copyright (c) 2020 Philippe Proulx <pproulx@efficios.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

$schema: http://json-schema.org/draft-07/schema#
$id: https://barectf.org/schemas/config/3/field-type.json
title: Effective field type object
definitions:
  ft-base:
    type: object
    required:
      - class
  bit-array-ft:
    allOf:
      - $ref: '#/definitions/ft-base'
      - properties:
          size:
            $ref: https://barectf.org/schemas/config/common/common.json#/definitions/int-ft-size-prop
          alignment:
            $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-int-min-1
        required:
          - size
  int-ft-props:
    properties:
      class: true
      size: true
      alignment: true
      preferred-display-base: true
    additionalProperties: false
  int-ft:
    allOf:
      - $ref: '#/definitions/bit-array-ft'
      - properties:
          preferred-display-base:
            $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-int-ft-preferred-display-base-prop
  uint-ft-class-prop:
    type: string
    enum:
      - uint
      - unsigned-int
      - unsigned-integer
  uint-ft:
    title: Unsigned integer field type object
    allOf:
      - $ref: '#/definitions/int-ft'
      - $ref: '#/definitions/int-ft-props'
      - properties:
          class:
            $ref: '#/definitions/uint-ft-class-prop'
  sint-ft-class-prop:
    type: string
    enum:
      - sint
      - signed-int
      - signed-integer
  sint-ft:
    title: Signed integer field type object
    allOf:
      - $ref: '#/definitions/int-ft'
      - $ref: '#/definitions/int-ft-props'
      - properties:
          class:
            $ref: '#/definitions/sint-ft-class-prop'
  enum-ft-props:
    properties:
      class: true
      size: true
      alignment: true
      preferred-display-base: true
      mappings: true
    additionalProperties: false
  enum-ft:
    properties:
      class: true
      size: true
      alignment: true
      preferred-display-base: true
      mappings:
        if:
          type: object
        then:
          patternProperties:
            '.*':
              type: array
              minItems: 1
              items:
                if:
                  type: array
                then:
                  items:
                    type: integer
                  minItems: 2
                  maxItems: 2
                else:
                  type: integer
          minProperties: 1
        else:
          type: 'null'
    additionalProperties: false
    required:
      - mappings
  uenum-ft-class-prop:
    type: string
    enum:
      - uenum
      - unsigned-enum
      - unsigned-enumeration
  uenum-ft:
    title: Unsigned enumeration field type object
    allOf:
      - $ref: '#/definitions/int-ft'
      - $ref: '#/definitions/enum-ft'
      - $ref: '#/definitions/enum-ft-props'
      - properties:
          class:
            $ref: '#/definitions/uenum-ft-class-prop'
  senum-ft-class-prop:
    type: string
    enum:
      - senum
      - signed-enum
      - signed-enumeration
  senum-ft:
    title: Signed enumeration field type object
    allOf:
      - $ref: '#/definitions/int-ft'
      - $ref: '#/definitions/enum-ft'
      - $ref: '#/definitions/enum-ft-props'
      - properties:
          class:
            $ref: '#/definitions/senum-ft-class-prop'
  real-ft-class-prop:
    type: string
    const: real
  real-ft:
    title: Real field type object
    allOf:
      - $ref: '#/definitions/bit-array-ft'
      - properties:
          class:
            $ref: '#/definitions/real-ft-class-prop'
          size:
            enum:
              - 32
              - 64
    properties:
      class: true
      size: true
      alignment: true
    additionalProperties: false
  string-ft-class-prop:
    type: string
    enum:
      - str
      - string
  string-ft:
    title: String field type object
    allOf:
      - $ref: '#/definitions/ft-base'
      - properties:
          class:
            $ref: '#/definitions/string-ft-class-prop'
    properties:
      class: true
    additionalProperties: false
  array-ft:
    title: Array field type object
    allOf:
      - $ref: '#/definitions/ft-base'
      - properties:
          element-field-type:
            $ref: '#/definitions/ft'
        required:
          - element-field-type
  static-array-ft-class-prop:
    type: string
    const: static-array
  static-array-ft:
    title: Static array field type object
    allOf:
      - $ref: '#/definitions/array-ft'
      - properties:
          class:
            $ref: '#/definitions/static-array-ft-class-prop'
          length:
            type: integer
            minimum: 0
    properties:
      class: true
      element-field-type: true
      length: true
    additionalProperties: false
  dynamic-array-ft-class-prop:
    type: string
    const: dynamic-array
  dynamic-array-ft-class-prop:
    title: Dynamic array field type object
    allOf:
      - $ref: '#/definitions/array-ft'
      - properties:
          class:
            $ref: '#/definitions/dynamic-array-ft-class-prop'
    properties:
      class: true
      element-field-type: true
    additionalProperties: false
  struct-ft-class-prop:
    type: string
    enum:
      - struct
      - structure
  struct-ft-member:
    type: object
    properties:
      field-type:
        $ref: '#/definitions/ft'
    required:
      - field-type
    additionalProperties: false
  struct-ft-members:
    type: array
    items:
      type: object
      patternProperties:
        '^[A-Za-z_][A-Za-z0-9_]*$':
          $ref: '#/definitions/struct-ft-member'
      minProperties: 1
      maxProperties: 1
  struct-ft:
    title: Structure field type object
    allOf:
      - $ref: '#/definitions/ft-base'
      - properties:
          class:
            $ref: '#/definitions/struct-ft-class-prop'
          minimum-alignment:
            $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-int-min-1
          members:
            if:
              type: array
            then:
              $ref: '#/definitions/struct-ft-members'
            else:
              type: 'null'
    properties:
      class: true
      minimum-alignment: true
      members: true
    additionalProperties: false
  ft:
    allOf:
      - $ref: '#/definitions/ft-base'
      - properties:
          # This is used to make sure that the field type's class name
          # is valid as any of the conditionals below can fail.
          #
          # Although we could use `oneOf` instead of this enumeration
          # here and refer to each of the `*-ft-class-prop` definitions,
          # it would be hard for the validator to show something useful
          # for the user as all cases would fail.
          #
          # Using `enum` below makes the validator show a very clear
          # validation failure message.
          class:
            enum:
              - uint
              - unsigned-int
              - unsigned-integer
              - sint
              - signed-int
              - signed-integer
              - uenum
              - unsigned-enum
              - unsigned-enumeration
              - senum
              - signed-enum
              - signed-enumeration
              - real
              - str
              - string
              - static-array
              - dynamic-array
              - struct
              - structure
      - if:
          properties:
            class:
              $ref: '#/definitions/uint-ft-class-prop'
        then:
          $ref: '#/definitions/uint-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/sint-ft-class-prop'
        then:
          $ref: '#/definitions/sint-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/uenum-ft-class-prop'
        then:
          $ref: '#/definitions/uenum-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/senum-ft-class-prop'
        then:
          $ref: '#/definitions/senum-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/real-ft-class-prop'
        then:
          $ref: '#/definitions/real-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/string-ft-class-prop'
        then:
          $ref: '#/definitions/string-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/static-array-ft-class-prop'
        then:
          $ref: '#/definitions/static-array-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/dynamic-array-ft-class-prop'
        then:
          $ref: '#/definitions/dynamic-array-ft'
      - if:
          properties:
            class:
              $ref: '#/definitions/struct-ft-class-prop'
        then:
          $ref: '#/definitions/struct-ft'
    required:
      - class
$ref: '#/definitions/ft'
