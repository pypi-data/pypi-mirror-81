# coding: utf-8

"""
    ENBISYS AVM API

    API for ENBISYS AVM-platform  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: avm@enbisys.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Valuation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'most_probable_price': 'int',
        'price_range_from': 'int',
        'price_range_to': 'int',
        'confidence': 'int',
        'price_distribution': 'list[ValuationPriceDistribution]'
    }

    attribute_map = {
        'most_probable_price': 'mostProbablePrice',
        'price_range_from': 'priceRangeFrom',
        'price_range_to': 'priceRangeTo',
        'confidence': 'confidence',
        'price_distribution': 'priceDistribution'
    }

    def __init__(self, most_probable_price=None, price_range_from=None, price_range_to=None, confidence=None, price_distribution=None):  # noqa: E501
        """Valuation - a model defined in OpenAPI"""  # noqa: E501

        self._most_probable_price = None
        self._price_range_from = None
        self._price_range_to = None
        self._confidence = None
        self._price_distribution = None
        self.discriminator = None

        if most_probable_price is not None:
            self.most_probable_price = most_probable_price
        if price_range_from is not None:
            self.price_range_from = price_range_from
        if price_range_to is not None:
            self.price_range_to = price_range_to
        if confidence is not None:
            self.confidence = confidence
        if price_distribution is not None:
            self.price_distribution = price_distribution

    @property
    def most_probable_price(self):
        """Gets the most_probable_price of this Valuation.  # noqa: E501

        Predicted price, pound  # noqa: E501

        :return: The most_probable_price of this Valuation.  # noqa: E501
        :rtype: int
        """
        return self._most_probable_price

    @most_probable_price.setter
    def most_probable_price(self, most_probable_price):
        """Sets the most_probable_price of this Valuation.

        Predicted price, pound  # noqa: E501

        :param most_probable_price: The most_probable_price of this Valuation.  # noqa: E501
        :type: int
        """

        self._most_probable_price = most_probable_price

    @property
    def price_range_from(self):
        """Gets the price_range_from of this Valuation.  # noqa: E501

        Lower price boundary, pound  # noqa: E501

        :return: The price_range_from of this Valuation.  # noqa: E501
        :rtype: int
        """
        return self._price_range_from

    @price_range_from.setter
    def price_range_from(self, price_range_from):
        """Sets the price_range_from of this Valuation.

        Lower price boundary, pound  # noqa: E501

        :param price_range_from: The price_range_from of this Valuation.  # noqa: E501
        :type: int
        """

        self._price_range_from = price_range_from

    @property
    def price_range_to(self):
        """Gets the price_range_to of this Valuation.  # noqa: E501

        Higher price boundary, pound  # noqa: E501

        :return: The price_range_to of this Valuation.  # noqa: E501
        :rtype: int
        """
        return self._price_range_to

    @price_range_to.setter
    def price_range_to(self, price_range_to):
        """Sets the price_range_to of this Valuation.

        Higher price boundary, pound  # noqa: E501

        :param price_range_to: The price_range_to of this Valuation.  # noqa: E501
        :type: int
        """

        self._price_range_to = price_range_to

    @property
    def confidence(self):
        """Gets the confidence of this Valuation.  # noqa: E501

        Probability (in percents) that actual price is within the specified boundaries  # noqa: E501

        :return: The confidence of this Valuation.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Valuation.

        Probability (in percents) that actual price is within the specified boundaries  # noqa: E501

        :param confidence: The confidence of this Valuation.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def price_distribution(self):
        """Gets the price_distribution of this Valuation.  # noqa: E501

        Describes the probabilities (in percents) that actual price is within particular subranges  # noqa: E501

        :return: The price_distribution of this Valuation.  # noqa: E501
        :rtype: list[ValuationPriceDistribution]
        """
        return self._price_distribution

    @price_distribution.setter
    def price_distribution(self, price_distribution):
        """Sets the price_distribution of this Valuation.

        Describes the probabilities (in percents) that actual price is within particular subranges  # noqa: E501

        :param price_distribution: The price_distribution of this Valuation.  # noqa: E501
        :type: list[ValuationPriceDistribution]
        """

        self._price_distribution = price_distribution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Valuation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
