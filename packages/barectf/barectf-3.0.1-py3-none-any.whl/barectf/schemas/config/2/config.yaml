# The MIT License (MIT)
#
# Copyright (c) 2020 Philippe Proulx <pproulx@efficios.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

$schema: http://json-schema.org/draft-07/schema#
$id: https://barectf.org/schemas/config/2/config.json
title: Effective configuration object
definitions:
  opt-struct-ft:
    if:
      type: object
    then:
      $ref: https://barectf.org/schemas/config/2/field-type.json#/definitions/struct-ft
    else:
      type: 'null'
  uint-ft:
    allOf:
      - $ref: https://barectf.org/schemas/config/2/field-type.json#/definitions/int-ft
      - properties:
          signed:
            const: false
  uint-ft-ts:
    allOf:
      - $ref: '#/definitions/uint-ft'
      - properties:
          property-mappings:
            type: array
        required:
          - property-mappings
  packet-header-ft-prop:
    allOf:
      - $ref: '#/definitions/opt-struct-ft'
      - if:
          type: object
          properties:
            fields:
              type: object
        then:
          properties:
            fields:
              properties:
                magic:
                  allOf:
                    - $ref: '#/definitions/uint-ft'
                    - properties:
                        size:
                          const: 32
                uuid:
                  allOf:
                    - $ref: https://barectf.org/schemas/config/2/field-type.json#/definitions/array-ft
                    - properties:
                        length:
                          const: 16
                        element-type:
                          allOf:
                            - $ref: https://barectf.org/schemas/config/2/field-type.json#/definitions/int-ft
                            - properties:
                                size:
                                  const: 8
                                signed:
                                  const: false
                                align:
                                  enum:
                                    - 1
                                    - 2
                                    - 4
                                    - 8
                stream_id:
                  $ref: '#/definitions/uint-ft'
                stream_instance_id:
                  $ref: '#/definitions/uint-ft'
  trace-type:
    title: Trace type object
    type: object
    properties:
      byte-order:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/byte-order-prop
      uuid:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-trace-type-uuid-prop
      packet-header-type:
        $ref: '#/definitions/packet-header-ft-prop'
    required:
      - byte-order
    additionalProperties: false
  clock-type:
    title: Clock type object
    type: object
    oneOf:
      - required:
          - $return-ctype
      - required:
          - return-ctype
      - allOf:
          - not:
              required:
                - $return-ctype
          - not:
              required:
                - return-ctype
    properties:
      uuid:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-uuid-prop
      description:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-string
      freq:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-int-min-1
      error-cycles:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-int-min-0
      offset:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-clock-type-offset-prop
      absolute:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-bool
      return-ctype:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-string
      $return-ctype:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-string
    additionalProperties: false
  $default-stream:
    if:
      type: string
    then:
      pattern: '^[A-Za-z_][A-Za-z0-9_]*$'
    else:
      type: 'null'
  packet-context-ft-prop:
    allOf:
      - $ref: https://barectf.org/schemas/config/2/field-type.json#/definitions/struct-ft
      - properties:
          fields:
            properties:
              packet_size:
                $ref: '#/definitions/uint-ft'
              content_size:
                $ref: '#/definitions/uint-ft'
              events_discarded:
                $ref: '#/definitions/uint-ft'
              packet_seq_num:
                $ref: '#/definitions/uint-ft'
              timestamp_begin:
                $ref: '#/definitions/uint-ft-ts'
              timestamp_end:
                $ref: '#/definitions/uint-ft-ts'
            required:
              - packet_size
              - content_size
            dependencies:
              timestamp_begin:
                - timestamp_end
              timestamp_end:
                - timestamp_begin
        required:
          - fields
  event-header-ft-prop:
    allOf:
      - $ref: '#/definitions/opt-struct-ft'
      - if:
          type: object
          properties:
            fields:
              type: object
        then:
          properties:
            fields:
              properties:
                id:
                  $ref: '#/definitions/uint-ft'
                timestamp:
                  $ref: '#/definitions/uint-ft-ts'
  dst:
    title: Data stream type object
    type: object
    properties:
      $default:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-bool
      packet-context-type:
        $ref: '#/definitions/packet-context-ft-prop'
      event-header-type:
        $ref: '#/definitions/event-header-ft-prop'
      event-context-type:
        $ref: '#/definitions/opt-struct-ft'
      events:
        title: Event record types object
        type: object
        patternProperties:
          '^[A-Za-z_][A-Za-z0-9_]*$':
            $ref: '#/definitions/ert'
        additionalProperties: false
        minProperties: 1
    required:
      - packet-context-type
      - events
    additionalProperties: false
  ert:
    title: Event record type object
    type: object
    properties:
      log-level:
        if:
          type: integer
        then:
          minimum: 0
        else:
          oneOf:
            - type: string
            - type: 'null'
      context-type:
        $ref: '#/definitions/opt-struct-ft'
      payload-type:
        $ref: '#/definitions/opt-struct-ft'
    additionalProperties: false
type: object
properties:
  version:
    type: string
    enum:
      - '2.0'
      - '2.1'
      - '2.2'
  prefix:
    $ref: https://barectf.org/schemas/config/common/common.json#/definitions/config-prefix-prop
  options:
    title: Configuration options object
    type: object
    properties:
      gen-prefix-def:
        type: boolean
      gen-default-stream-def:
        type: boolean
    additionalProperties: false
  metadata:
    title: Metadata object
    type: object
    oneOf:
      - required:
          - $log-levels
      - required:
          - log-levels
      - allOf:
          - not:
              required:
                - $log-levels
          - not:
              required:
                - log-levels
    properties:
      log-levels:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-log-level-aliases-prop
      $log-levels:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-log-level-aliases-prop
      trace:
        $ref: '#/definitions/trace-type'
      env:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-env-prop
      clocks:
        title: Clock types object
        type: object
        patternProperties:
          '^[A-Za-z_][A-Za-z0-9_]*$':
            $ref: '#/definitions/clock-type'
        additionalProperties: false
      $default-stream:
        $ref: https://barectf.org/schemas/config/common/common.json#/definitions/opt-string
      streams:
        title: Data stream types object
        type: object
        patternProperties:
          '^[A-Za-z_][A-Za-z0-9_]*$':
            $ref: '#/definitions/dst'
        additionalProperties: false
        minProperties: 1
    required:
      - trace
      - streams
    additionalProperties: false
required:
  - version
  - metadata
additionalProperties: false
