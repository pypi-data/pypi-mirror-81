{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/dialogs/config-entry-system-options/dialog-config-entry-system-options.ts"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_inherits","_super","_createSuper","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","_assertThisInitialized","F","d","kind","decorators","property","type","Boolean","key","value","query","_this2","_get","_getPrototypeOf","prototype","style","setProperty","classList","toggle","_slot","assignedNodes","addEventListener","haptic","forwardHaptic","html","_templateObject","ripple","interactionNode","_haChangeHandler","static","css","_templateObject2","e","mdcFoundation","handleChange","checked","formElement","HaIronFocusablesHelper","getTabbableNodes","node","result","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","paperDialogClass","haTabFixBehaviorImpl","_focusableNodes","HaPaperDialog","_mixinBehaviors","mixinBehaviors","define","_callee","params","systemOptions","regeneratorRuntime","wrap","_context","prev","next","_params","_error","undefined","_loading","getConfigEntrySystemOptions","hass","entry","entry_id","sent","_disableNewEntities","disable_new_entities","updateComplete","stop","_openedChanged","localize","domain","_templateObject3","_templateObject4","_templateObject5","_disableNewEntitiesChanged","_submitting","_templateObject6","_updateEntry","ev","target","_callee2","_context2","updateConfigEntrySystemOptions","t0","message","finish","detail","haStyleDialog","_templateObject7","LitElement"],"mappings":"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","file":"chunk.e15d151f5a4b121d1471.js","sourcesContent":["import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function (node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function (node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport type { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport type { Constructor } from \"../../types\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\") as Constructor<\n  PaperDialogElement\n>;\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\n// @ts-ignore\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport {\n  getConfigEntrySystemOptions,\n  updateConfigEntrySystemOptions,\n} from \"../../data/config_entries\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { ConfigEntrySystemOptionsDialogParams } from \"./show-dialog-config-entry-system-options\";\n\n@customElement(\"dialog-config-entry-system-options\")\nclass DialogConfigEntrySystemOptions extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _disableNewEntities!: boolean;\n\n  @property() private _error?: string;\n\n  @property() private _params?: ConfigEntrySystemOptionsDialogParams;\n\n  @property() private _loading?: boolean;\n\n  @property() private _submitting?: boolean;\n\n  public async showDialog(\n    params: ConfigEntrySystemOptionsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._loading = true;\n    const systemOptions = await getConfigEntrySystemOptions(\n      this.hass,\n      params.entry.entry_id\n    );\n    this._loading = false;\n    this._disableNewEntities = systemOptions.disable_new_entities;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this.hass.localize(\n            \"ui.dialogs.config_entry_system_options.title\",\n            \"integration\",\n            this.hass.localize(\n              `component.${this._params.entry.domain}.title`\n            ) || this._params.entry.domain\n          )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._loading\n            ? html`\n                <div class=\"init-spinner\">\n                  <paper-spinner-lite active></paper-spinner-lite>\n                </div>\n              `\n            : html`\n                ${this._error\n                  ? html` <div class=\"error\">${this._error}</div> `\n                  : \"\"}\n                <div class=\"form\">\n                  <ha-switch\n                    .checked=${!this._disableNewEntities}\n                    @change=${this._disableNewEntitiesChanged}\n                    .disabled=${this._submitting}\n                  >\n                    <div>\n                      <p>\n                        ${this.hass.localize(\n                          \"ui.dialogs.config_entry_system_options.enable_new_entities_label\"\n                        )}\n                      </p>\n                      <p class=\"secondary\">\n                        ${this.hass.localize(\n                          \"ui.dialogs.config_entry_system_options.enable_new_entities_description\",\n                          \"integration\",\n                          this.hass.localize(\n                            `component.${this._params.entry.domain}.title`\n                          ) || this._params.entry.domain\n                        )}\n                      </p>\n                    </div>\n                  </ha-switch>\n                </div>\n              `}\n        </paper-dialog-scrollable>\n        ${!this._loading\n          ? html`\n              <div class=\"paper-dialog-buttons\">\n                <mwc-button\n                  @click=\"${this._updateEntry}\"\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.dialogs.config_entry_system_options.update\"\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _disableNewEntitiesChanged(ev: Event): void {\n    this._error = undefined;\n    this._disableNewEntities = !(ev.target as HaSwitch).checked;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await updateConfigEntrySystemOptions(\n        this.hass,\n        this._params!.entry.entry_id,\n        {\n          disable_new_entities: this._disableNewEntities,\n        }\n      );\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        .init-spinner {\n          padding: 50px 100px;\n          text-align: center;\n        }\n\n        .form {\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        p {\n          margin: 0;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-config-entry-system-options\": DialogConfigEntrySystemOptions;\n  }\n}\n"],"sourceRoot":""}