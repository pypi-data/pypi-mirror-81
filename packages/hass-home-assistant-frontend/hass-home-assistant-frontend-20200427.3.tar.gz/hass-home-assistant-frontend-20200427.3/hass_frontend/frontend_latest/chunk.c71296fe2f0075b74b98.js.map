{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","cardConfigStruct","type","cards","title","HuiStackCardEditor","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","decorators","property","key","query","config","_config","hass","html","selected","_selectedCard","numcards","length","_handleSelectedCard","map","_card","i","undefined","_toggleMode","_guiModeAvailable","localize","_cardEditorEl","_GUImode","_handleMove","_handleDeleteCard","lovelace","_handleConfigChanged","_handleGUIModeChanged","_handleCardPicked","ev","target","id","_setMode","parseInt","detail","stopPropagation","guiModeAvailable","fireEvent","push","splice","Math","max","source","card","guiMode","_this$_cardEditorEl","toggleMode","GUImode","static","css","LitElement"],"mappings":"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","file":"chunk.c71296fe2f0075b74b98.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { struct } from \"../../common/structs/struct\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport {\n  ConfigChangedEvent,\n  HuiCardEditor,\n} from \"../card-editor/hui-card-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport { GUIModeChangedEvent } from \"../types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  cards: [\"any\"],\n  title: \"string?\",\n});\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() public lovelace?: LovelaceConfig;\n\n  @property() private _config?: StackCardConfig;\n\n  @property() private _selectedCard = 0;\n\n  @property() private _GUImode = true;\n\n  @property() private _guiModeAvailable? = true;\n\n  @query(\"hui-card-editor\") private _cardEditorEl?: HuiCardEditor;\n\n  public setConfig(config: StackCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map((_card, i) => {\n              return html`\n                <paper-tab>\n                  ${i + 1}\n                </paper-tab>\n              `;\n            })}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-icon icon=\"hass:plus\"></ha-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards\n            ? html`\n                <div id=\"card-options\">\n                  <mwc-button\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    class=\"gui-mode-button\"\n                  >\n                    ${this.hass!.localize(\n                      !this._cardEditorEl || this._GUImode\n                        ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                        : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                    )}\n                  </mwc-button>\n                  <paper-icon-button\n                    id=\"move-before\"\n                    title=\"Move card before\"\n                    icon=\"hass:arrow-left\"\n                    .disabled=${selected === 0}\n                    @click=${this._handleMove}\n                  ></paper-icon-button>\n\n                  <paper-icon-button\n                    id=\"move-after\"\n                    title=\"Move card after\"\n                    icon=\"hass:arrow-right\"\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                  ></paper-icon-button>\n\n                  <paper-icon-button\n                    icon=\"hass:delete\"\n                    @click=${this._handleDeleteCard}\n                  ></paper-icon-button>\n                </div>\n\n                <hui-card-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-editor>\n              `\n            : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=\"${this._handleCardPicked}\"\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSelectedCard(ev) {\n    if (ev.target.id === \"add-card\") {\n      this._selectedCard = this._config!.cards.length;\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._selectedCard = parseInt(ev.detail.selected, 10);\n  }\n\n  private _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config.cards[this._selectedCard] = ev.detail.config;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    this._config.cards.push(config);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    this._config.cards.splice(this._selectedCard, 1);\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleMove(ev) {\n    if (!this._config) {\n      return;\n    }\n    const source = this._selectedCard;\n    const target = ev.target.id === \"move-before\" ? source - 1 : source + 1;\n    const card = this._config.cards.splice(this._selectedCard, 1)[0];\n    this._config.cards.splice(target, 0, card);\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .toolbar {\n        display: flex;\n        --paper-tabs-selection-bar-color: var(--primary-color);\n        --paper-tab-ink: var(--primary-color);\n      }\n      paper-tabs {\n        display: flex;\n        font-size: 14px;\n        flex-grow: 1;\n      }\n      #add-card {\n        max-width: 32px;\n        padding: 0;\n      }\n\n      #card-options {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n      }\n\n      #editor {\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      @media (max-width: 450px) {\n        #editor {\n          margin: 0 -12px;\n        }\n      }\n\n      .gui-mode-button {\n        margin-right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"sourceRoot":""}