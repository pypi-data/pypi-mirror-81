# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'PreventionInspectTemplateInspectConfig',
    'PreventionInspectTemplateInspectConfigInfoType',
    'PreventionInspectTemplateInspectConfigLimits',
    'PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType',
    'PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType',
    'PreventionInspectTemplateInspectConfigRuleSet',
    'PreventionInspectTemplateInspectConfigRuleSetInfoType',
    'PreventionInspectTemplateInspectConfigRuleSetRule',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryCloudStoragePath',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryWordList',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType',
    'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex',
    'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule',
    'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex',
    'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment',
    'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity',
    'PreventionJobTriggerInspectJob',
    'PreventionJobTriggerInspectJobAction',
    'PreventionJobTriggerInspectJobActionSaveFindings',
    'PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig',
    'PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable',
    'PreventionJobTriggerInspectJobStorageConfig',
    'PreventionJobTriggerInspectJobStorageConfigBigQueryOptions',
    'PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference',
    'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions',
    'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet',
    'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet',
    'PreventionJobTriggerInspectJobStorageConfigDatastoreOptions',
    'PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKind',
    'PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId',
    'PreventionJobTriggerInspectJobStorageConfigTimespanConfig',
    'PreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampField',
    'PreventionJobTriggerTrigger',
    'PreventionJobTriggerTriggerSchedule',
    'PreventionStoredInfoTypeDictionary',
    'PreventionStoredInfoTypeDictionaryCloudStoragePath',
    'PreventionStoredInfoTypeDictionaryWordList',
    'PreventionStoredInfoTypeLargeCustomDictionary',
    'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryField',
    'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldField',
    'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable',
    'PreventionStoredInfoTypeLargeCustomDictionaryCloudStorageFileSet',
    'PreventionStoredInfoTypeLargeCustomDictionaryOutputPath',
    'PreventionStoredInfoTypeRegex',
]

@pulumi.output_type
class PreventionInspectTemplateInspectConfig(dict):
    def __init__(__self__, *,
                 content_options: Optional[Sequence[str]] = None,
                 exclude_info_types: Optional[bool] = None,
                 include_quote: Optional[bool] = None,
                 info_types: Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigInfoType']] = None,
                 limits: Optional['outputs.PreventionInspectTemplateInspectConfigLimits'] = None,
                 min_likelihood: Optional[str] = None,
                 rule_sets: Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSet']] = None):
        """
        :param Sequence[str] content_options: List of options defining data content to scan. If empty, text, images, and other content will be included.
               Each value may be one of `CONTENT_TEXT` and `CONTENT_IMAGE`.
        :param bool exclude_info_types: Set of infoTypes for which findings would affect this rule.
               Structure is documented below.
        :param bool include_quote: When true, a contextual quote from the data that triggered a finding is included in the response.
        :param Sequence['PreventionInspectTemplateInspectConfigInfoTypeArgs'] info_types: If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigLimitsArgs' limits: Configuration to control the number of findings returned.
               Structure is documented below.
        :param str min_likelihood: Only returns findings equal or above this threshold. See https://cloud.google.com/dlp/docs/likelihood for more info
               Default value is `POSSIBLE`.
               Possible values are `VERY_UNLIKELY`, `UNLIKELY`, `POSSIBLE`, `LIKELY`, and `VERY_LIKELY`.
        :param Sequence['PreventionInspectTemplateInspectConfigRuleSetArgs'] rule_sets: Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end,
               other rules are executed in the order they are specified for each info type.
               Structure is documented below.
        """
        if content_options is not None:
            pulumi.set(__self__, "content_options", content_options)
        if exclude_info_types is not None:
            pulumi.set(__self__, "exclude_info_types", exclude_info_types)
        if include_quote is not None:
            pulumi.set(__self__, "include_quote", include_quote)
        if info_types is not None:
            pulumi.set(__self__, "info_types", info_types)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if min_likelihood is not None:
            pulumi.set(__self__, "min_likelihood", min_likelihood)
        if rule_sets is not None:
            pulumi.set(__self__, "rule_sets", rule_sets)

    @property
    @pulumi.getter(name="contentOptions")
    def content_options(self) -> Optional[Sequence[str]]:
        """
        List of options defining data content to scan. If empty, text, images, and other content will be included.
        Each value may be one of `CONTENT_TEXT` and `CONTENT_IMAGE`.
        """
        return pulumi.get(self, "content_options")

    @property
    @pulumi.getter(name="excludeInfoTypes")
    def exclude_info_types(self) -> Optional[bool]:
        """
        Set of infoTypes for which findings would affect this rule.
        Structure is documented below.
        """
        return pulumi.get(self, "exclude_info_types")

    @property
    @pulumi.getter(name="includeQuote")
    def include_quote(self) -> Optional[bool]:
        """
        When true, a contextual quote from the data that triggered a finding is included in the response.
        """
        return pulumi.get(self, "include_quote")

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigInfoType']]:
        """
        If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
        Structure is documented below.
        """
        return pulumi.get(self, "info_types")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigLimits']:
        """
        Configuration to control the number of findings returned.
        Structure is documented below.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="minLikelihood")
    def min_likelihood(self) -> Optional[str]:
        """
        Only returns findings equal or above this threshold. See https://cloud.google.com/dlp/docs/likelihood for more info
        Default value is `POSSIBLE`.
        Possible values are `VERY_UNLIKELY`, `UNLIKELY`, `POSSIBLE`, `LIKELY`, and `VERY_LIKELY`.
        """
        return pulumi.get(self, "min_likelihood")

    @property
    @pulumi.getter(name="ruleSets")
    def rule_sets(self) -> Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSet']]:
        """
        Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end,
        other rules are executed in the order they are specified for each info type.
        Structure is documented below.
        """
        return pulumi.get(self, "rule_sets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigInfoType(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
               at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
        at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigLimits(dict):
    def __init__(__self__, *,
                 max_findings_per_item: int,
                 max_findings_per_request: int,
                 max_findings_per_info_types: Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType']] = None):
        """
        :param int max_findings_per_item: Max number of findings that will be returned for each item scanned. The maximum returned is 2000.
        :param int max_findings_per_request: Max number of findings that will be returned per request/job. The maximum returned is 2000.
        :param Sequence['PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeArgs'] max_findings_per_info_types: Configuration of findings limit given for specified infoTypes.
               Structure is documented below.
        """
        pulumi.set(__self__, "max_findings_per_item", max_findings_per_item)
        pulumi.set(__self__, "max_findings_per_request", max_findings_per_request)
        if max_findings_per_info_types is not None:
            pulumi.set(__self__, "max_findings_per_info_types", max_findings_per_info_types)

    @property
    @pulumi.getter(name="maxFindingsPerItem")
    def max_findings_per_item(self) -> int:
        """
        Max number of findings that will be returned for each item scanned. The maximum returned is 2000.
        """
        return pulumi.get(self, "max_findings_per_item")

    @property
    @pulumi.getter(name="maxFindingsPerRequest")
    def max_findings_per_request(self) -> int:
        """
        Max number of findings that will be returned per request/job. The maximum returned is 2000.
        """
        return pulumi.get(self, "max_findings_per_request")

    @property
    @pulumi.getter(name="maxFindingsPerInfoTypes")
    def max_findings_per_info_types(self) -> Optional[Sequence['outputs.PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType']]:
        """
        Configuration of findings limit given for specified infoTypes.
        Structure is documented below.
        """
        return pulumi.get(self, "max_findings_per_info_types")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType(dict):
    def __init__(__self__, *,
                 info_type: 'outputs.PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType',
                 max_findings: int):
        """
        :param 'PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeArgs' info_type: Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
               not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
               specified in another InfoTypeLimit.
               Structure is documented below.
        :param int max_findings: Max findings limit for the given infoType.
        """
        pulumi.set(__self__, "info_type", info_type)
        pulumi.set(__self__, "max_findings", max_findings)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> 'outputs.PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType':
        """
        Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
        not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
        specified in another InfoTypeLimit.
        Structure is documented below.
        """
        return pulumi.get(self, "info_type")

    @property
    @pulumi.getter(name="maxFindings")
    def max_findings(self) -> int:
        """
        Max findings limit for the given infoType.
        """
        return pulumi.get(self, "max_findings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
               at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
        at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSet(dict):
    def __init__(__self__, *,
                 info_types: Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetInfoType'],
                 rules: Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetRule']):
        """
        :param Sequence['PreventionInspectTemplateInspectConfigRuleSetInfoTypeArgs'] info_types: If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
               Structure is documented below.
        :param Sequence['PreventionInspectTemplateInspectConfigRuleSetRuleArgs'] rules: Set of rules to be applied to infoTypes. The rules are applied in order.
               Structure is documented below.
        """
        pulumi.set(__self__, "info_types", info_types)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetInfoType']:
        """
        If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
        Structure is documented below.
        """
        return pulumi.get(self, "info_types")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetRule']:
        """
        Set of rules to be applied to infoTypes. The rules are applied in order.
        Structure is documented below.
        """
        return pulumi.get(self, "rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetInfoType(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
               at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
        at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRule(dict):
    def __init__(__self__, *,
                 exclusion_rule: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule'] = None,
                 hotword_rule: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule'] = None):
        """
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs' exclusion_rule: The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs' hotword_rule: Hotword-based detection rule.
               Structure is documented below.
        """
        if exclusion_rule is not None:
            pulumi.set(__self__, "exclusion_rule", exclusion_rule)
        if hotword_rule is not None:
            pulumi.set(__self__, "hotword_rule", hotword_rule)

    @property
    @pulumi.getter(name="exclusionRule")
    def exclusion_rule(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule']:
        """
        The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
        Structure is documented below.
        """
        return pulumi.get(self, "exclusion_rule")

    @property
    @pulumi.getter(name="hotwordRule")
    def hotword_rule(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule']:
        """
        Hotword-based detection rule.
        Structure is documented below.
        """
        return pulumi.get(self, "hotword_rule")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule(dict):
    def __init__(__self__, *,
                 matching_type: str,
                 dictionary: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary'] = None,
                 exclude_info_types: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes'] = None,
                 regex: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex'] = None):
        """
        :param str matching_type: How the rule is applied. See the documentation for more information: https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#MatchingType
               Possible values are `MATCHING_TYPE_FULL_MATCH`, `MATCHING_TYPE_PARTIAL_MATCH`, and `MATCHING_TYPE_INVERSE_MATCH`.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryArgs' dictionary: Dictionary which defines the rule.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesArgs' exclude_info_types: Set of infoTypes for which findings would affect this rule.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegexArgs' regex: Regular expression which defines the rule.
               Structure is documented below.
        """
        pulumi.set(__self__, "matching_type", matching_type)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if exclude_info_types is not None:
            pulumi.set(__self__, "exclude_info_types", exclude_info_types)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter(name="matchingType")
    def matching_type(self) -> str:
        """
        How the rule is applied. See the documentation for more information: https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#MatchingType
        Possible values are `MATCHING_TYPE_FULL_MATCH`, `MATCHING_TYPE_PARTIAL_MATCH`, and `MATCHING_TYPE_INVERSE_MATCH`.
        """
        return pulumi.get(self, "matching_type")

    @property
    @pulumi.getter
    def dictionary(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary']:
        """
        Dictionary which defines the rule.
        Structure is documented below.
        """
        return pulumi.get(self, "dictionary")

    @property
    @pulumi.getter(name="excludeInfoTypes")
    def exclude_info_types(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes']:
        """
        Set of infoTypes for which findings would affect this rule.
        Structure is documented below.
        """
        return pulumi.get(self, "exclude_info_types")

    @property
    @pulumi.getter
    def regex(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex']:
        """
        Regular expression which defines the rule.
        Structure is documented below.
        """
        return pulumi.get(self, "regex")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary(dict):
    def __init__(__self__, *,
                 cloud_storage_path: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryCloudStoragePath'] = None,
                 word_list: Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryWordList'] = None):
        """
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryCloudStoragePathArgs' cloud_storage_path: Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryWordListArgs' word_list: List of words or phrases to search for.
               Structure is documented below.
        """
        if cloud_storage_path is not None:
            pulumi.set(__self__, "cloud_storage_path", cloud_storage_path)
        if word_list is not None:
            pulumi.set(__self__, "word_list", word_list)

    @property
    @pulumi.getter(name="cloudStoragePath")
    def cloud_storage_path(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryCloudStoragePath']:
        """
        Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
        Structure is documented below.
        """
        return pulumi.get(self, "cloud_storage_path")

    @property
    @pulumi.getter(name="wordList")
    def word_list(self) -> Optional['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryWordList']:
        """
        List of words or phrases to search for.
        Structure is documented below.
        """
        return pulumi.get(self, "word_list")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryCloudStoragePath(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionaryWordList(dict):
    def __init__(__self__, *,
                 words: Sequence[str]):
        """
        :param Sequence[str] words: Words or phrases defining the dictionary. The dictionary must contain at least one
               phrase and every phrase must contain at least 2 characters that are letters or digits.
        """
        pulumi.set(__self__, "words", words)

    @property
    @pulumi.getter
    def words(self) -> Sequence[str]:
        """
        Words or phrases defining the dictionary. The dictionary must contain at least one
        phrase and every phrase must contain at least 2 characters that are letters or digits.
        """
        return pulumi.get(self, "words")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes(dict):
    def __init__(__self__, *,
                 info_types: Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType']):
        """
        :param Sequence['PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoTypeArgs'] info_types: If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
               Structure is documented below.
        """
        pulumi.set(__self__, "info_types", info_types)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Sequence['outputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType']:
        """
        If a finding is matched by any of the infoType detectors listed here, the finding will be excluded from the scan results.
        Structure is documented below.
        """
        return pulumi.get(self, "info_types")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
               at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed
        at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex(dict):
    def __init__(__self__, *,
                 pattern: str,
                 group_indexes: Optional[Sequence[int]] = None):
        """
        :param str pattern: Pattern defining the regular expression.
               Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        :param Sequence[int] group_indexes: The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        pulumi.set(__self__, "pattern", pattern)
        if group_indexes is not None:
            pulumi.set(__self__, "group_indexes", group_indexes)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Pattern defining the regular expression.
        Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="groupIndexes")
    def group_indexes(self) -> Optional[Sequence[int]]:
        """
        The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        return pulumi.get(self, "group_indexes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule(dict):
    def __init__(__self__, *,
                 hotword_regex: 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex',
                 likelihood_adjustment: 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment',
                 proximity: 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity'):
        """
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegexArgs' hotword_regex: Regular expression pattern defining what qualifies as a hotword.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustmentArgs' likelihood_adjustment: Likelihood adjustment to apply to all matching findings.
               Structure is documented below.
        :param 'PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximityArgs' proximity: Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
               exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
               used to match substrings of the finding itself. For example, the certainty of a phone number regex
               `(\d{3}) \d{3}-\d{4}` could be adjusted upwards if the area code is known to be the local area code of a company
               office using the hotword regex `(xxx)`, where `xxx` is the area code in question.
               Structure is documented below.
        """
        pulumi.set(__self__, "hotword_regex", hotword_regex)
        pulumi.set(__self__, "likelihood_adjustment", likelihood_adjustment)
        pulumi.set(__self__, "proximity", proximity)

    @property
    @pulumi.getter(name="hotwordRegex")
    def hotword_regex(self) -> 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex':
        """
        Regular expression pattern defining what qualifies as a hotword.
        Structure is documented below.
        """
        return pulumi.get(self, "hotword_regex")

    @property
    @pulumi.getter(name="likelihoodAdjustment")
    def likelihood_adjustment(self) -> 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment':
        """
        Likelihood adjustment to apply to all matching findings.
        Structure is documented below.
        """
        return pulumi.get(self, "likelihood_adjustment")

    @property
    @pulumi.getter
    def proximity(self) -> 'outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity':
        """
        Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
        exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
        used to match substrings of the finding itself. For example, the certainty of a phone number regex
        `(\d{3}) \d{3}-\d{4}` could be adjusted upwards if the area code is known to be the local area code of a company
        office using the hotword regex `(xxx)`, where `xxx` is the area code in question.
        Structure is documented below.
        """
        return pulumi.get(self, "proximity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex(dict):
    def __init__(__self__, *,
                 pattern: str,
                 group_indexes: Optional[Sequence[int]] = None):
        """
        :param str pattern: Pattern defining the regular expression.
               Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        :param Sequence[int] group_indexes: The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        pulumi.set(__self__, "pattern", pattern)
        if group_indexes is not None:
            pulumi.set(__self__, "group_indexes", group_indexes)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Pattern defining the regular expression.
        Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="groupIndexes")
    def group_indexes(self) -> Optional[Sequence[int]]:
        """
        The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        return pulumi.get(self, "group_indexes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment(dict):
    def __init__(__self__, *,
                 fixed_likelihood: Optional[str] = None,
                 relative_likelihood: Optional[int] = None):
        """
        :param str fixed_likelihood: Set the likelihood of a finding to a fixed value. Either this or relative_likelihood can be set.
               Possible values are `VERY_UNLIKELY`, `UNLIKELY`, `POSSIBLE`, `LIKELY`, and `VERY_LIKELY`.
        :param int relative_likelihood: Increase or decrease the likelihood by the specified number of levels. For example,
               if a finding would be POSSIBLE without the detection rule and relativeLikelihood is 1,
               then it is upgraded to LIKELY, while a value of -1 would downgrade it to UNLIKELY.
               Likelihood may never drop below VERY_UNLIKELY or exceed VERY_LIKELY, so applying an
               adjustment of 1 followed by an adjustment of -1 when base likelihood is VERY_LIKELY
               will result in a final likelihood of LIKELY. Either this or fixed_likelihood can be set.
        """
        if fixed_likelihood is not None:
            pulumi.set(__self__, "fixed_likelihood", fixed_likelihood)
        if relative_likelihood is not None:
            pulumi.set(__self__, "relative_likelihood", relative_likelihood)

    @property
    @pulumi.getter(name="fixedLikelihood")
    def fixed_likelihood(self) -> Optional[str]:
        """
        Set the likelihood of a finding to a fixed value. Either this or relative_likelihood can be set.
        Possible values are `VERY_UNLIKELY`, `UNLIKELY`, `POSSIBLE`, `LIKELY`, and `VERY_LIKELY`.
        """
        return pulumi.get(self, "fixed_likelihood")

    @property
    @pulumi.getter(name="relativeLikelihood")
    def relative_likelihood(self) -> Optional[int]:
        """
        Increase or decrease the likelihood by the specified number of levels. For example,
        if a finding would be POSSIBLE without the detection rule and relativeLikelihood is 1,
        then it is upgraded to LIKELY, while a value of -1 would downgrade it to UNLIKELY.
        Likelihood may never drop below VERY_UNLIKELY or exceed VERY_LIKELY, so applying an
        adjustment of 1 followed by an adjustment of -1 when base likelihood is VERY_LIKELY
        will result in a final likelihood of LIKELY. Either this or fixed_likelihood can be set.
        """
        return pulumi.get(self, "relative_likelihood")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity(dict):
    def __init__(__self__, *,
                 window_after: Optional[int] = None,
                 window_before: Optional[int] = None):
        """
        :param int window_after: Number of characters after the finding to consider. Either this or window_before must be specified
        :param int window_before: Number of characters before the finding to consider. Either this or window_after must be specified
        """
        if window_after is not None:
            pulumi.set(__self__, "window_after", window_after)
        if window_before is not None:
            pulumi.set(__self__, "window_before", window_before)

    @property
    @pulumi.getter(name="windowAfter")
    def window_after(self) -> Optional[int]:
        """
        Number of characters after the finding to consider. Either this or window_before must be specified
        """
        return pulumi.get(self, "window_after")

    @property
    @pulumi.getter(name="windowBefore")
    def window_before(self) -> Optional[int]:
        """
        Number of characters before the finding to consider. Either this or window_after must be specified
        """
        return pulumi.get(self, "window_before")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJob(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.PreventionJobTriggerInspectJobAction'],
                 inspect_template_name: str,
                 storage_config: 'outputs.PreventionJobTriggerInspectJobStorageConfig'):
        """
        :param Sequence['PreventionJobTriggerInspectJobActionArgs'] actions: A task to execute on the completion of a job.
               Structure is documented below.
        :param str inspect_template_name: The name of the template to run when this job is triggered.
        :param 'PreventionJobTriggerInspectJobStorageConfigArgs' storage_config: Information on where to inspect
               Structure is documented below.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "inspect_template_name", inspect_template_name)
        pulumi.set(__self__, "storage_config", storage_config)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.PreventionJobTriggerInspectJobAction']:
        """
        A task to execute on the completion of a job.
        Structure is documented below.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="inspectTemplateName")
    def inspect_template_name(self) -> str:
        """
        The name of the template to run when this job is triggered.
        """
        return pulumi.get(self, "inspect_template_name")

    @property
    @pulumi.getter(name="storageConfig")
    def storage_config(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfig':
        """
        Information on where to inspect
        Structure is documented below.
        """
        return pulumi.get(self, "storage_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobAction(dict):
    def __init__(__self__, *,
                 save_findings: 'outputs.PreventionJobTriggerInspectJobActionSaveFindings'):
        """
        :param 'PreventionJobTriggerInspectJobActionSaveFindingsArgs' save_findings: Schedule for triggered jobs
               Structure is documented below.
        """
        pulumi.set(__self__, "save_findings", save_findings)

    @property
    @pulumi.getter(name="saveFindings")
    def save_findings(self) -> 'outputs.PreventionJobTriggerInspectJobActionSaveFindings':
        """
        Schedule for triggered jobs
        Structure is documented below.
        """
        return pulumi.get(self, "save_findings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobActionSaveFindings(dict):
    def __init__(__self__, *,
                 output_config: 'outputs.PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig'):
        """
        :param 'PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs' output_config: Information on where to store output
               Structure is documented below.
        """
        pulumi.set(__self__, "output_config", output_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> 'outputs.PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig':
        """
        Information on where to store output
        Structure is documented below.
        """
        return pulumi.get(self, "output_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig(dict):
    def __init__(__self__, *,
                 table: 'outputs.PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable',
                 output_schema: Optional[str] = None):
        """
        :param 'PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs' table: Information on the location of the target BigQuery Table.
               Structure is documented below.
        :param str output_schema: Schema used for writing the findings for Inspect jobs. This field is only used for
               Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
               object. If appending to an existing table, any columns from the predefined schema
               that are missing will be added. No columns in the existing table will be deleted.
               If unspecified, then all available columns will be used for a new table or an (existing)
               table with no schema, and no changes will be made to an existing table that has a schema.
               Only for use with external storage.
               Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
        """
        pulumi.set(__self__, "table", table)
        if output_schema is not None:
            pulumi.set(__self__, "output_schema", output_schema)

    @property
    @pulumi.getter
    def table(self) -> 'outputs.PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable':
        """
        Information on the location of the target BigQuery Table.
        Structure is documented below.
        """
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> Optional[str]:
        """
        Schema used for writing the findings for Inspect jobs. This field is only used for
        Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
        object. If appending to an existing table, any columns from the predefined schema
        that are missing will be added. No columns in the existing table will be deleted.
        If unspecified, then all available columns will be used for a new table or an (existing)
        table with no schema, and no changes will be made to an existing table that has a schema.
        Only for use with external storage.
        Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
        """
        return pulumi.get(self, "output_schema")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable(dict):
    def __init__(__self__, *,
                 dataset_id: str,
                 project_id: str,
                 table_id: Optional[str] = None):
        """
        :param str dataset_id: Dataset ID of the table.
        :param str project_id: The Google Cloud Platform project ID of the project containing the table.
        :param str table_id: Name of the table. If is not set a new one will be generated for you with the following format:
               `dlp_googleapis_yyyy_mm_dd_[dlp_job_id]`. Pacific timezone will be used for generating the date details.
        """
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "project_id", project_id)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        Dataset ID of the table.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud Platform project ID of the project containing the table.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        """
        Name of the table. If is not set a new one will be generated for you with the following format:
        `dlp_googleapis_yyyy_mm_dd_[dlp_job_id]`. Pacific timezone will be used for generating the date details.
        """
        return pulumi.get(self, "table_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfig(dict):
    def __init__(__self__, *,
                 big_query_options: Optional['outputs.PreventionJobTriggerInspectJobStorageConfigBigQueryOptions'] = None,
                 cloud_storage_options: Optional['outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions'] = None,
                 datastore_options: Optional['outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptions'] = None,
                 timespan_config: Optional['outputs.PreventionJobTriggerInspectJobStorageConfigTimespanConfig'] = None):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsArgs' big_query_options: Options defining BigQuery table and row identifiers.
               Structure is documented below.
        :param 'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsArgs' cloud_storage_options: Options defining a file or a set of files within a Google Cloud Storage bucket.
               Structure is documented below.
        :param 'PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsArgs' datastore_options: Options defining a data set within Google Cloud Datastore.
               Structure is documented below.
        :param 'PreventionJobTriggerInspectJobStorageConfigTimespanConfigArgs' timespan_config: Information on where to inspect
               Structure is documented below.
        """
        if big_query_options is not None:
            pulumi.set(__self__, "big_query_options", big_query_options)
        if cloud_storage_options is not None:
            pulumi.set(__self__, "cloud_storage_options", cloud_storage_options)
        if datastore_options is not None:
            pulumi.set(__self__, "datastore_options", datastore_options)
        if timespan_config is not None:
            pulumi.set(__self__, "timespan_config", timespan_config)

    @property
    @pulumi.getter(name="bigQueryOptions")
    def big_query_options(self) -> Optional['outputs.PreventionJobTriggerInspectJobStorageConfigBigQueryOptions']:
        """
        Options defining BigQuery table and row identifiers.
        Structure is documented below.
        """
        return pulumi.get(self, "big_query_options")

    @property
    @pulumi.getter(name="cloudStorageOptions")
    def cloud_storage_options(self) -> Optional['outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions']:
        """
        Options defining a file or a set of files within a Google Cloud Storage bucket.
        Structure is documented below.
        """
        return pulumi.get(self, "cloud_storage_options")

    @property
    @pulumi.getter(name="datastoreOptions")
    def datastore_options(self) -> Optional['outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptions']:
        """
        Options defining a data set within Google Cloud Datastore.
        Structure is documented below.
        """
        return pulumi.get(self, "datastore_options")

    @property
    @pulumi.getter(name="timespanConfig")
    def timespan_config(self) -> Optional['outputs.PreventionJobTriggerInspectJobStorageConfigTimespanConfig']:
        """
        Information on where to inspect
        Structure is documented below.
        """
        return pulumi.get(self, "timespan_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigBigQueryOptions(dict):
    def __init__(__self__, *,
                 table_reference: 'outputs.PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference'):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceArgs' table_reference: Set of files to scan.
               Structure is documented below.
        """
        pulumi.set(__self__, "table_reference", table_reference)

    @property
    @pulumi.getter(name="tableReference")
    def table_reference(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference':
        """
        Set of files to scan.
        Structure is documented below.
        """
        return pulumi.get(self, "table_reference")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference(dict):
    def __init__(__self__, *,
                 dataset_id: str,
                 project_id: str,
                 table_id: str):
        """
        :param str dataset_id: Dataset ID of the table.
        :param str project_id: The Google Cloud Platform project ID of the project containing the table.
        :param str table_id: Name of the table. If is not set a new one will be generated for you with the following format:
               `dlp_googleapis_yyyy_mm_dd_[dlp_job_id]`. Pacific timezone will be used for generating the date details.
        """
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        Dataset ID of the table.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud Platform project ID of the project containing the table.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> str:
        """
        Name of the table. If is not set a new one will be generated for you with the following format:
        `dlp_googleapis_yyyy_mm_dd_[dlp_job_id]`. Pacific timezone will be used for generating the date details.
        """
        return pulumi.get(self, "table_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions(dict):
    def __init__(__self__, *,
                 file_set: 'outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet',
                 bytes_limit_per_file: Optional[int] = None,
                 bytes_limit_per_file_percent: Optional[int] = None,
                 file_types: Optional[Sequence[str]] = None,
                 files_limit_percent: Optional[int] = None,
                 sample_method: Optional[str] = None):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetArgs' file_set: Set of files to scan.
               Structure is documented below.
        :param int bytes_limit_per_file: Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
               then the rest of the bytes are omitted.
        :param int bytes_limit_per_file_percent: Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down.
               Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        :param Sequence[str] file_types: List of file type groups to include in the scan. If empty, all files are scanned and available data
               format processors are applied. In addition, the binary content of the selected files is always scanned as well.
               Images are scanned only as binary if the specified region does not support image inspection and no fileTypes were specified.
               Each value may be one of `BINARY_FILE`, `TEXT_FILE`, `IMAGE`, `WORD`, `PDF`, `AVRO`, `CSV`, and `TSV`.
        :param int files_limit_percent: Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down.
               Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        :param str sample_method: How to sample bytes if not all bytes are scanned. Meaningful only when used in conjunction with bytesLimitPerFile.
               If not specified, scanning would start from the top.
               Possible values are `TOP` and `RANDOM_START`.
        """
        pulumi.set(__self__, "file_set", file_set)
        if bytes_limit_per_file is not None:
            pulumi.set(__self__, "bytes_limit_per_file", bytes_limit_per_file)
        if bytes_limit_per_file_percent is not None:
            pulumi.set(__self__, "bytes_limit_per_file_percent", bytes_limit_per_file_percent)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if files_limit_percent is not None:
            pulumi.set(__self__, "files_limit_percent", files_limit_percent)
        if sample_method is not None:
            pulumi.set(__self__, "sample_method", sample_method)

    @property
    @pulumi.getter(name="fileSet")
    def file_set(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet':
        """
        Set of files to scan.
        Structure is documented below.
        """
        return pulumi.get(self, "file_set")

    @property
    @pulumi.getter(name="bytesLimitPerFile")
    def bytes_limit_per_file(self) -> Optional[int]:
        """
        Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
        then the rest of the bytes are omitted.
        """
        return pulumi.get(self, "bytes_limit_per_file")

    @property
    @pulumi.getter(name="bytesLimitPerFilePercent")
    def bytes_limit_per_file_percent(self) -> Optional[int]:
        """
        Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down.
        Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        """
        return pulumi.get(self, "bytes_limit_per_file_percent")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence[str]]:
        """
        List of file type groups to include in the scan. If empty, all files are scanned and available data
        format processors are applied. In addition, the binary content of the selected files is always scanned as well.
        Images are scanned only as binary if the specified region does not support image inspection and no fileTypes were specified.
        Each value may be one of `BINARY_FILE`, `TEXT_FILE`, `IMAGE`, `WORD`, `PDF`, `AVRO`, `CSV`, and `TSV`.
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter(name="filesLimitPercent")
    def files_limit_percent(self) -> Optional[int]:
        """
        Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down.
        Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        """
        return pulumi.get(self, "files_limit_percent")

    @property
    @pulumi.getter(name="sampleMethod")
    def sample_method(self) -> Optional[str]:
        """
        How to sample bytes if not all bytes are scanned. Meaningful only when used in conjunction with bytesLimitPerFile.
        If not specified, scanning would start from the top.
        Possible values are `TOP` and `RANDOM_START`.
        """
        return pulumi.get(self, "sample_method")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet(dict):
    def __init__(__self__, *,
                 regex_file_set: Optional['outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet'] = None,
                 url: Optional[str] = None):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetArgs' regex_file_set: The regex-filtered set of files to scan.
               Structure is documented below.
        :param str url: The Cloud Storage url of the file(s) to scan, in the format `gs://<bucket>/<path>`. Trailing wildcard
               in the path is allowed.
               If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned
               non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is
               equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`.
        """
        if regex_file_set is not None:
            pulumi.set(__self__, "regex_file_set", regex_file_set)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="regexFileSet")
    def regex_file_set(self) -> Optional['outputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet']:
        """
        The regex-filtered set of files to scan.
        Structure is documented below.
        """
        return pulumi.get(self, "regex_file_set")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The Cloud Storage url of the file(s) to scan, in the format `gs://<bucket>/<path>`. Trailing wildcard
        in the path is allowed.
        If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned
        non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is
        equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`.
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 exclude_regexes: Optional[Sequence[str]] = None,
                 include_regexes: Optional[Sequence[str]] = None):
        """
        :param str bucket_name: The name of a Cloud Storage bucket.
        :param Sequence[str] exclude_regexes: A list of regular expressions matching file paths to exclude. All files in the bucket that match at
               least one of these regular expressions will be excluded from the scan.
        :param Sequence[str] include_regexes: A list of regular expressions matching file paths to include. All files in the bucket
               that match at least one of these regular expressions will be included in the set of files,
               except for those that also match an item in excludeRegex. Leaving this field empty will
               match all files by default (this is equivalent to including .* in the list)
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        if exclude_regexes is not None:
            pulumi.set(__self__, "exclude_regexes", exclude_regexes)
        if include_regexes is not None:
            pulumi.set(__self__, "include_regexes", include_regexes)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The name of a Cloud Storage bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="excludeRegexes")
    def exclude_regexes(self) -> Optional[Sequence[str]]:
        """
        A list of regular expressions matching file paths to exclude. All files in the bucket that match at
        least one of these regular expressions will be excluded from the scan.
        """
        return pulumi.get(self, "exclude_regexes")

    @property
    @pulumi.getter(name="includeRegexes")
    def include_regexes(self) -> Optional[Sequence[str]]:
        """
        A list of regular expressions matching file paths to include. All files in the bucket
        that match at least one of these regular expressions will be included in the set of files,
        except for those that also match an item in excludeRegex. Leaving this field empty will
        match all files by default (this is equivalent to including .* in the list)
        """
        return pulumi.get(self, "include_regexes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigDatastoreOptions(dict):
    def __init__(__self__, *,
                 kind: 'outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKind',
                 partition_id: 'outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId'):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindArgs' kind: A representation of a Datastore kind.
               Structure is documented below.
        :param 'PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdArgs' partition_id: Datastore partition ID. A partition ID identifies a grouping of entities. The grouping
               is always by project and namespace, however the namespace ID may be empty.
               Structure is documented below.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "partition_id", partition_id)

    @property
    @pulumi.getter
    def kind(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKind':
        """
        A representation of a Datastore kind.
        Structure is documented below.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId':
        """
        Datastore partition ID. A partition ID identifies a grouping of entities. The grouping
        is always by project and namespace, however the namespace ID may be empty.
        Structure is documented below.
        """
        return pulumi.get(self, "partition_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKind(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the Datastore kind.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Datastore kind.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId(dict):
    def __init__(__self__, *,
                 project_id: str,
                 namespace_id: Optional[str] = None):
        """
        :param str project_id: The Google Cloud Platform project ID of the project containing the table.
        :param str namespace_id: If not empty, the ID of the namespace to which the entities belong.
        """
        pulumi.set(__self__, "project_id", project_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud Platform project ID of the project containing the table.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        """
        If not empty, the ID of the namespace to which the entities belong.
        """
        return pulumi.get(self, "namespace_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigTimespanConfig(dict):
    def __init__(__self__, *,
                 timestamp_field: 'outputs.PreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampField',
                 enable_auto_population_of_timespan_config: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param 'PreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldArgs' timestamp_field: Information on where to inspect
               Structure is documented below.
        :param bool enable_auto_population_of_timespan_config: When the job is started by a JobTrigger we will automatically figure out a valid startTime to avoid
               scanning files that have not been modified since the last time the JobTrigger executed. This will
               be based on the time of the execution of the last run of the JobTrigger.
        :param str end_time: Exclude files or rows newer than this value. If set to zero, no upper time limit is applied.
        :param str start_time: Exclude files or rows older than this value.
        """
        pulumi.set(__self__, "timestamp_field", timestamp_field)
        if enable_auto_population_of_timespan_config is not None:
            pulumi.set(__self__, "enable_auto_population_of_timespan_config", enable_auto_population_of_timespan_config)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="timestampField")
    def timestamp_field(self) -> 'outputs.PreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampField':
        """
        Information on where to inspect
        Structure is documented below.
        """
        return pulumi.get(self, "timestamp_field")

    @property
    @pulumi.getter(name="enableAutoPopulationOfTimespanConfig")
    def enable_auto_population_of_timespan_config(self) -> Optional[bool]:
        """
        When the job is started by a JobTrigger we will automatically figure out a valid startTime to avoid
        scanning files that have not been modified since the last time the JobTrigger executed. This will
        be based on the time of the execution of the last run of the JobTrigger.
        """
        return pulumi.get(self, "enable_auto_population_of_timespan_config")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Exclude files or rows newer than this value. If set to zero, no upper time limit is applied.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Exclude files or rows older than this value.
        """
        return pulumi.get(self, "start_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampField(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the Datastore kind.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Datastore kind.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerTrigger(dict):
    def __init__(__self__, *,
                 schedule: Optional['outputs.PreventionJobTriggerTriggerSchedule'] = None):
        """
        :param 'PreventionJobTriggerTriggerScheduleArgs' schedule: Schedule for triggered jobs
               Structure is documented below.
        """
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.PreventionJobTriggerTriggerSchedule']:
        """
        Schedule for triggered jobs
        Structure is documented below.
        """
        return pulumi.get(self, "schedule")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionJobTriggerTriggerSchedule(dict):
    def __init__(__self__, *,
                 recurrence_period_duration: Optional[str] = None):
        """
        :param str recurrence_period_duration: With this option a job is started a regular periodic basis. For example: every day (86400 seconds).
               A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs.
               This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
               A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        if recurrence_period_duration is not None:
            pulumi.set(__self__, "recurrence_period_duration", recurrence_period_duration)

    @property
    @pulumi.getter(name="recurrencePeriodDuration")
    def recurrence_period_duration(self) -> Optional[str]:
        """
        With this option a job is started a regular periodic basis. For example: every day (86400 seconds).
        A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs.
        This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        return pulumi.get(self, "recurrence_period_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeDictionary(dict):
    def __init__(__self__, *,
                 cloud_storage_path: Optional['outputs.PreventionStoredInfoTypeDictionaryCloudStoragePath'] = None,
                 word_list: Optional['outputs.PreventionStoredInfoTypeDictionaryWordList'] = None):
        """
        :param 'PreventionStoredInfoTypeDictionaryCloudStoragePathArgs' cloud_storage_path: Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
               Structure is documented below.
        :param 'PreventionStoredInfoTypeDictionaryWordListArgs' word_list: List of words or phrases to search for.
               Structure is documented below.
        """
        if cloud_storage_path is not None:
            pulumi.set(__self__, "cloud_storage_path", cloud_storage_path)
        if word_list is not None:
            pulumi.set(__self__, "word_list", word_list)

    @property
    @pulumi.getter(name="cloudStoragePath")
    def cloud_storage_path(self) -> Optional['outputs.PreventionStoredInfoTypeDictionaryCloudStoragePath']:
        """
        Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
        Structure is documented below.
        """
        return pulumi.get(self, "cloud_storage_path")

    @property
    @pulumi.getter(name="wordList")
    def word_list(self) -> Optional['outputs.PreventionStoredInfoTypeDictionaryWordList']:
        """
        List of words or phrases to search for.
        Structure is documented below.
        """
        return pulumi.get(self, "word_list")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeDictionaryCloudStoragePath(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeDictionaryWordList(dict):
    def __init__(__self__, *,
                 words: Sequence[str]):
        """
        :param Sequence[str] words: Words or phrases defining the dictionary. The dictionary must contain at least one
               phrase and every phrase must contain at least 2 characters that are letters or digits.
        """
        pulumi.set(__self__, "words", words)

    @property
    @pulumi.getter
    def words(self) -> Sequence[str]:
        """
        Words or phrases defining the dictionary. The dictionary must contain at least one
        phrase and every phrase must contain at least 2 characters that are letters or digits.
        """
        return pulumi.get(self, "words")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionary(dict):
    def __init__(__self__, *,
                 output_path: 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryOutputPath',
                 big_query_field: Optional['outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryField'] = None,
                 cloud_storage_file_set: Optional['outputs.PreventionStoredInfoTypeLargeCustomDictionaryCloudStorageFileSet'] = None):
        """
        :param 'PreventionStoredInfoTypeLargeCustomDictionaryOutputPathArgs' output_path: Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
               If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
               Structure is documented below.
        :param 'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldArgs' big_query_field: Field in a BigQuery table where each cell represents a dictionary phrase.
               Structure is documented below.
        :param 'PreventionStoredInfoTypeLargeCustomDictionaryCloudStorageFileSetArgs' cloud_storage_file_set: Set of files containing newline-delimited lists of dictionary phrases.
               Structure is documented below.
        """
        pulumi.set(__self__, "output_path", output_path)
        if big_query_field is not None:
            pulumi.set(__self__, "big_query_field", big_query_field)
        if cloud_storage_file_set is not None:
            pulumi.set(__self__, "cloud_storage_file_set", cloud_storage_file_set)

    @property
    @pulumi.getter(name="outputPath")
    def output_path(self) -> 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryOutputPath':
        """
        Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
        If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
        Structure is documented below.
        """
        return pulumi.get(self, "output_path")

    @property
    @pulumi.getter(name="bigQueryField")
    def big_query_field(self) -> Optional['outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryField']:
        """
        Field in a BigQuery table where each cell represents a dictionary phrase.
        Structure is documented below.
        """
        return pulumi.get(self, "big_query_field")

    @property
    @pulumi.getter(name="cloudStorageFileSet")
    def cloud_storage_file_set(self) -> Optional['outputs.PreventionStoredInfoTypeLargeCustomDictionaryCloudStorageFileSet']:
        """
        Set of files containing newline-delimited lists of dictionary phrases.
        Structure is documented below.
        """
        return pulumi.get(self, "cloud_storage_file_set")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionaryBigQueryField(dict):
    def __init__(__self__, *,
                 field: 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldField',
                 table: 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable'):
        """
        :param 'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldFieldArgs' field: Designated field in the BigQuery table.
               Structure is documented below.
        :param 'PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTableArgs' table: Field in a BigQuery table where each cell represents a dictionary phrase.
               Structure is documented below.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def field(self) -> 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldField':
        """
        Designated field in the BigQuery table.
        Structure is documented below.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def table(self) -> 'outputs.PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable':
        """
        Field in a BigQuery table where each cell represents a dictionary phrase.
        Structure is documented below.
        """
        return pulumi.get(self, "table")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldField(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name describing the field.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name describing the field.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable(dict):
    def __init__(__self__, *,
                 dataset_id: str,
                 project_id: str,
                 table_id: str):
        """
        :param str dataset_id: The dataset ID of the table.
        :param str project_id: The Google Cloud Platform project ID of the project containing the table.
        :param str table_id: The name of the table.
        """
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The dataset ID of the table.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud Platform project ID of the project containing the table.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> str:
        """
        The name of the table.
        """
        return pulumi.get(self, "table_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionaryCloudStorageFileSet(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The url, in the format `gs://<bucket>/<path>`. Trailing wildcard in the path is allowed.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url, in the format `gs://<bucket>/<path>`. Trailing wildcard in the path is allowed.
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeLargeCustomDictionaryOutputPath(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A url representing a file or path (no wildcards) in Cloud Storage. Example: `gs://[BUCKET_NAME]/dictionary.txt`
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreventionStoredInfoTypeRegex(dict):
    def __init__(__self__, *,
                 pattern: str,
                 group_indexes: Optional[Sequence[int]] = None):
        """
        :param str pattern: Pattern defining the regular expression.
               Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        :param Sequence[int] group_indexes: The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        pulumi.set(__self__, "pattern", pattern)
        if group_indexes is not None:
            pulumi.set(__self__, "group_indexes", group_indexes)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Pattern defining the regular expression.
        Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="groupIndexes")
    def group_indexes(self) -> Optional[Sequence[int]]:
        """
        The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        return pulumi.get(self, "group_indexes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


